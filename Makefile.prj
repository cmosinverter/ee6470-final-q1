
##############################################################################
# Makefile generated by bdw_makegen version 21.20-p100
#      Cadence Design Systems
#      Fri May 26 17:57:33 CST 2023
#          Project file was <project.tcl>
##############################################################################

GENERATING_STRATUS_VERSION = 21.20-p100

# Check that we have Stratus on our path
ifneq ($(shell if `which bdw_shell >&/dev/null` ; then echo 1; fi),1)
    $(error Stratus executable was not found. Please add Stratus installation to your search path, and run 'bdw_makegen' command.)
endif

CURRENT_STRATUS_VERSION := $(shell bdw_shell -version)
CURRENT_STRATUS_VERSION := $(shell echo $(CURRENT_STRATUS_VERSION) | cut -d ' ' -f 3)

# Check that this Makefile.prj was generated by the current stratus version
ifneq ($(CURRENT_STRATUS_VERSION),$(GENERATING_STRATUS_VERSION))
    $(error The Makefile.prj was created with a different version of Stratus. Please run 'bdw_makegen' command to re-generate Makefile.prj.)                                                                          
endif

# Dependencies on tcl files source by the project file.
Makefile.prj: project.tcl

######################################################################
## Exported variables.  
## Each of these variables will be accessible to all child processes.
######################################################################

export BDW_TECH_LIBS	=	/usr/cadtool/cadence/STRATUS/STRATUS_21.10.100/share/stratus/techlibs/GPDK045/gsclib045_svt_v4.4/gsclib045/timing/slow_vdd1v2_basicCells.lib
export BDW_WORKLIB
ifeq ($(BDW_WORKLIB),)
	BDW_WORKLIB = bdw_work
endif

ifeq ($(shell if `which bdw_shell >&/dev/null` ; then echo 1; fi),1)
export STRATUS_HOME := $(shell echo "puts [get_install_path]" | bdw_shell)
else
export STRATUS_HOME := /usr/cadtool/cadence/STRATUS/STRATUS_21.10.100
endif
export STRATUS_PLATFORM := lnx86

export BDW_TCL_DIR = $(STRATUS_HOME)/share/stratus/tcl


export BDW_SYSTEMC_VERSION = 2.3.3


# Use internal SystemC 2.3.3 for simulation
export SYSTEMC := $(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/systemc/2.3.3


# Use builtin gcc 6.3 for simulations.
export BDW_CC := $(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/gcc/6.3/bin/g++
export BDW_AR := $(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/gcc/6.3/bin/ar rc
export BDW_CCDEP := $(BDW_CC)
export BDW_LINK := $(BDW_CC)



ifeq ($(BDW_DEBUG),1)
BDW_DEBUG_DIR = /debug
else
BDW_DEBUG_DIR =
endif

ifeq ($(BDW_GENDEP),)
export BDW_GENDEPS=0
endif
export ARITH_HOME = /usr/cadtool/cadence/STRATUS/STRATUS_21.10.100/tools/cellmath
export BDW_USE_ESCLIB = 1
export BDW_VERILOG_DIALECT = 1995
export BDW_OBJDIR		=	$(BDW_WORKLIB)/objs
export BDW_SIMDIR		=	$(BDW_WORKLIB)/sims
export BDW_MODULEDIR	=	$(BDW_WORKLIB)/modules
export BDW_LIBDIR		=	$(BDW_WORKLIB)/libs
export BDW_WRAPDIR		=	$(BDW_WORKLIB)/wrappers
export BDW_HLSLIB_DIRS
export BDW_HLSLIB_NAMES
export BDW_PROJECT_FILE =   project.tcl
export BDW_SIM_CONFIG
export BDW_SIM_CONFIG_DIR
export BDW_LS_CONFIG
export BDW_LS_CONFIG_DIR
export BDW_LS_CONFIG_LOGS
export BDW_VRTL_FILE
export BDW_MODULE
export BDW_HLS_CONFIG
export BDW_HLS_CONFIG_DIR
export BDW_CYNTH_CONFIG
export BDW_CYNTH_CONFIG_DIR
export BDW_LS_INFO

export BDW_VISTA = 0
export BDW_NCSC = 0
export BDW_XMSC = 1
export BDW_VLOGSIM_ARGS
export BDW_VLOGCOMP_ARGS
export BDW_VLOG_LIBS
export BDW_VLOG_DEFINES
export BDW_VLOG_DUT_FILES
export BDW_VLOG_DUMPFILE
export BDW_EXTRA_LDFLAGS
export BDW_EXTRA_LIBS
export BDW_EXTRA_LIB_FLAGS
export BDW_COV_LIB_FLAGS
export BDW_EXTRA_CCFLAGS
export BDW_CCOPTIONS
export BDW_SCSIM_ARGS
export BDW_HUB_ARGV
export BDW_USE_SCV
export BDW_FSDBVCSPLATFORM
BDW_FSDBVCSPLATFORM = LINUX64
export BDW_USE_SCV = 0
ifeq ($(CM_USERLOGDIR),)
	export CM_USERLOGDIR = $(shell pwd)/$(BDW_WORKLIB)/tmp
endif
ifeq ($(CM_USERTMPDIR),)
	export CM_USERTMPDIR = $(shell pwd)/$(BDW_WORKLIB)/tmp
endif

# Provide backwards compatibility with CONF variable used in some applications
# to set the configuration on the command line.
ifneq ($(CONF),)
	BDW_SIM_CONFIG = $(CONF)
endif


######################################################################
## Definitions for remote execution
######################################################################
export BDW_EXEC_CMD
export BDW_PMAKE_FLG
ifeq ($(BDW_EXEC_CMD),)
    BDW_EXEC_CMD=
endif

######################################################################
## Definitions for user defined tool command scripts
######################################################################



ifeq ($(BDW_STRATUS_HLS_COMMAND),)
    BDW_STRATUS_HLS_COMMAND = stratus_hls
endif
ifeq ($(BDW_STRATUS_IDE_COMMAND),)
    BDW_STRATUS_IDE_COMMAND = stratus_ide
endif
ifeq ($(BDW_WRAPGEN_COMMAND),)
    BDW_WRAPGEN_COMMAND = bdw_wrapgen
endif
ifeq ($(BDW_LAUNCH_UPDATE_WRAPPERS_COMMAND),)
    BDW_LAUNCH_UPDATE_WRAPPERS_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_HLS_COMMAND),)
    BDW_LAUNCH_HLS_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_SIM_COMMAND),)
    BDW_LAUNCH_SIM_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND),)
    BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_POWER_COMMAND),)
    BDW_LAUNCH_POWER_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_ANALYSIS_COMMAND),)
    BDW_LAUNCH_ANALYSIS_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_EQUIV_COMMAND),)
    BDW_LAUNCH_EQUIV_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_IDE_COMMAND),)
    BDW_LAUNCH_IDE_COMMAND = $(BDW_LAUNCH_COMMAND)
endif

######################################################################
## Definitions for compilation and synthesis
######################################################################

MAKE			   = make --no-print-directory -f $(firstword $(MAKEFILE_LIST))
PERL			   = perl
CYNTHHL            = $(BDW_STRATUS_HLS_COMMAND)
CYNTHVLG		   = ${STRATUS_HOME}/bin/stratus_vlg --project project.tcl
ifneq ($(BDW_TMPLNK_DIR),)
BDW_TMPLNK_FILE    := $(shell $(STRATUS_HOME)/bin/bdw_tmpfile $(BDW_TMPLNK_DIR)/BDWLNK.$(USER).XXXXXX)
endif

######################################################################
## Set variables for and include BDW common Makefile bdw.mak
######################################################################

export BDW_USEHUB	   = $(BDW_USE_ESCLIB)
export BDW_USECYNTH	   = 1
export BDW_WRITEFSDB   = 0
ifeq ($(BDW_WRITEFSDB),1)
	export BDW_NOVAS_INST_DIR = $(shell $(STRATUS_HOME)/bin/bdw_find_novas_install)
	ifeq ($(wildcard $(BDW_NOVAS_INST_DIR)/share/PLI/VCS*),$(BDW_NOVAS_INST_DIR)/share/PLI/VCS)
		# The PLI/VCS dir is an indication that this is a 2010 or later Novas release, and we can use automatic VCS platform selection.
		BDW_FSDB_VCS_ARGS = -debug_pp -LDFLAGS -Wl,-rpath,$(BDW_NOVAS_INST_DIR)/share/PLI/VCS/$(BDW_FSDBVCSPLATFORM) -P $(BDW_NOVAS_INST_DIR)/share/PLI/VCS/$(BDW_FSDBVCSPLATFORM)/novas.tab $(BDW_NOVAS_INST_DIR)/share/PLI/VCS/$(BDW_FSDBVCSPLATFORM)/pli.a
	else
		# For older versions of Novas, use vcs_latest, which works with all supported VCS versions.
		BDW_FSDB_VCS_ARGS = -P $(BDW_NOVAS_INST_DIR)/share/PLI/vcs_latest/$(BDW_FSDBVCSPLATFORM)/novas.tab $(BDW_NOVAS_INST_DIR)/share/PLI/vcs_latest/$(BDW_FSDBVCSPLATFORM)/pli.a
	endif
else
	BDW_FSDB_VCS_ARGS =
endif
BDW_INCLUDE_DIRS = 
BDW_CCFLAGS        = -I./ -I$(BDW_WRAPDIR) $(BDW_LIB_DASHI) $(addprefix -I,$(BDW_INCLUDE_DIRS))
ifneq ($(BDW_SIM_CONFIG),)
    BDW_SOURCES		   += main.cc system.cc tb.cc
endif
BDW_CCOPTIONS	   = -g -DCLOCK_PERIOD=5.0 
BDW_COV_LIB_FLAGS = 
BDW_DEP_FILTER	   = | bdw_depfilter project.tcl

VPATH += $(BDW_INCLUDE_DIRS)

vpath %.bdt $(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/lib

BDW_LOGOPTIONS_FILE = $(BDW_WRAPDIR)/.logOptions

# rule to create .logOptions if it gets accidentally removed
$(BDW_LOGOPTIONS_FILE): project.tcl
	@bdw_makegen project.tcl -q 

######################################################################
# Preparation for concurrent builds target
######################################################################


ifeq ($(CWBExec_prep),1)
prep_all all_deps: 
	$(BDW_LAUNCH_UPDATE_WRAPPERS_COMMAND) $(MAKE) update_hierarchy prep_vlog_all gen_all_deps
else
prep_all all_deps:
	bdw_exec -jobproject $(BDW_PROJECT_FILE) -job prep_all $(MAKE) CWBExec_prep=1 prep_all
endif


######################################################################
## Start of Configurations
######################################################################
BDW_SHAREDLIB		=	0
BDW_VLOG_DUT_FILES	=	
VLOG_COSIM_TOP	=
BDW_ALL_WRAPPERS    =


HL_FLAGS           = --logfile=stratus_hls.log -I. -I$(BDW_WRAPDIR) -I$(STRATUS_HOME)/share/stratus/include --c++14 $(BDW_EXTRA_HLFLAGS) $(addprefix --tl=,$(BDW_TECH_LIBS)) --balance_expr=delay --clock_period=5.000 --cycle_slack=0.500 --dpopt_auto=op --flatten_arrays=all --ignore_scan_cells=on --inline_partial_constants=on --lsb_trimming=on --message_detail=1 --path_delay_limit=111.000 --rtl_annotation=op,stack --undef_func=error --unroll_loops=off
VLG_FLAGS          = -DBDW_RTL=1 -I$(BDW_WRAPDIR) --c++14 $(BDW_EXTRA_VLGFLAGS)

HL_FLAGS_dut_BASIC	= -DBASIC=1 -DBDW_RTL_dut_BASIC=1 $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_BASIC)))
HL_FLAGS_dut_DPA	= -DDPA=1 -DBDW_RTL_dut_DPA=1 --dpopt_auto=op,expr $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_DPA)))
HL_FLAGS_dut_NODPO	= -DNODPO=1 -DBDW_RTL_dut_NODPO=1 -DLAT=2 $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_NODPO)))
HL_FLAGS_dut_DPO_AUTO_OP	= -DDPO_AUTO_OP=1 -DBDW_RTL_dut_DPO_AUTO_OP=1 -DLAT=3 --dpopt_auto=op $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_DPO_AUTO_OP)))
HL_FLAGS_dut_DPO_AUTO_EXPR	= -DDPO_AUTO_EXPR=1 -DBDW_RTL_dut_DPO_AUTO_EXPR=1 -DLAT=3 --dpopt_auto=expr $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_DPO_AUTO_EXPR)))
HL_FLAGS_dut_DPO_REGION	= -DDPO_REGION=1 -DBDW_RTL_dut_DPO_REGION=1 -DLAT=2 -DDPOPT_ALL $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_DPO_REGION)))
HL_FLAGS_dut_FLAT_UNROLL_ALL_FAST	= -DFLAT_UNROLL_ALL_FAST=1 -DBDW_RTL_dut_FLAT_UNROLL_ALL_FAST=1 --flatten_arrays=all $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_FLAT_UNROLL_ALL_FAST)))
HL_FLAGS_dut_FLAT_UNROLL_ALL	= -DFLAT_UNROLL_ALL=1 -DBDW_RTL_dut_FLAT_UNROLL_ALL=1 --flatten_arrays=all $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_FLAT_UNROLL_ALL)))
HL_FLAGS_dut_PIPELINE	= -DPIPELINE=1 -DBDW_RTL_dut_PIPELINE=1 -DII=1 $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_PIPELINE)))
BDW_ALL_WRAPPERS += $(BDW_WORKLIB)/wrappers/dut_wrap.h
ifeq ($(BDW_SIM_CONFIG),B)



BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/dut.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/dut.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         +=  
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	dut.cc
VLOG_COSIM_TOP		=	
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	 
BDW_VLOG_LIBS		=	
BDW_VLOG_DUMPFILE   =   
BDW_VLOG_DEFINES	=	
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/dut.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/system.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/tb.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	
	BDW_VLOG_SIM_PATH =	
endif


else
ifeq ($(BDW_SIM_CONFIG),BASIC_B)



BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/BASIC/debug/dut_beh.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/BASIC/dut_beh.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         +=  
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	dut.cc
VLOG_COSIM_TOP		=	
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	 
BDW_VLOG_LIBS		=	
BDW_VLOG_DUMPFILE   =   
BDW_VLOG_DEFINES	=	
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/BASIC/dut.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/system.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/tb.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	
	BDW_VLOG_SIM_PATH =	
endif


else
ifeq ($(BDW_SIM_CONFIG),BASIC_V)

BDW_SHAREDLIB		= 1

BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/BASIC/debug/dut.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/BASIC/dut.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         += -DBDW_RTL_dut_BASIC 
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_BASIC_V.v
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/dut_cosim.v $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/dut/BASIC/v_rtl
BDW_VLOG_DUMPFILE   =   $(BDW_WORKLIB)/sims/BASIC_V/verilog.vcd
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_dut_BASIC
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_dut_BASIC
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/BASIC/dut.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/system.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/tb.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	xcelium
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else
ifeq ($(BDW_SIM_CONFIG),DPA_B)



BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/DPA/debug/dut_beh.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/DPA/dut_beh.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         +=  
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	dut.cc
VLOG_COSIM_TOP		=	
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	 
BDW_VLOG_LIBS		=	
BDW_VLOG_DUMPFILE   =   
BDW_VLOG_DEFINES	=	
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/DPA/dut.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/system.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/tb.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	
	BDW_VLOG_SIM_PATH =	
endif


else
ifeq ($(BDW_SIM_CONFIG),DPA_V)

BDW_SHAREDLIB		= 1

BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/DPA/debug/dut.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/DPA/dut.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         += -DBDW_RTL_dut_DPA 
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_DPA_V.v
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/dut_cosim.v $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/dut/DPA/v_rtl
BDW_VLOG_DUMPFILE   =   $(BDW_WORKLIB)/sims/DPA_V/verilog.vcd
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_dut_DPA
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_dut_DPA
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/DPA/dut.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/system.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/tb.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	xcelium
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else
ifeq ($(BDW_SIM_CONFIG),NODPO_B)



BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/NODPO/debug/dut_beh.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/NODPO/dut_beh.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         +=  
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	dut.cc
VLOG_COSIM_TOP		=	
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	 
BDW_VLOG_LIBS		=	
BDW_VLOG_DUMPFILE   =   
BDW_VLOG_DEFINES	=	
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/NODPO/dut.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/system.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/tb.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	
	BDW_VLOG_SIM_PATH =	
endif


else
ifeq ($(BDW_SIM_CONFIG),NODPO_V)

BDW_SHAREDLIB		= 1

BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/NODPO/debug/dut.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/NODPO/dut.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         += -DBDW_RTL_dut_NODPO 
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_NODPO_V.v
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/dut_cosim.v $(BDW_WORKLIB)/modules/dut/NODPO/dut_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/dut/NODPO/v_rtl
BDW_VLOG_DUMPFILE   =   $(BDW_WORKLIB)/sims/NODPO_V/verilog.vcd
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_dut_NODPO
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_dut_NODPO
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/NODPO/dut.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/system.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/tb.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/dut/NODPO/dut_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	xcelium
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else
ifeq ($(BDW_SIM_CONFIG),DPO_AUTO_OP_B)



BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/debug/dut_beh.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_beh.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         +=  
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	dut.cc
VLOG_COSIM_TOP		=	
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	 
BDW_VLOG_LIBS		=	
BDW_VLOG_DUMPFILE   =   
BDW_VLOG_DEFINES	=	
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/system.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/tb.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	
	BDW_VLOG_SIM_PATH =	
endif


else
ifeq ($(BDW_SIM_CONFIG),DPO_AUTO_OP_V)

BDW_SHAREDLIB		= 1

BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/debug/dut.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         += -DBDW_RTL_dut_DPO_AUTO_OP 
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_DPO_AUTO_OP_V.v
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/dut_cosim.v $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/v_rtl
BDW_VLOG_DUMPFILE   =   $(BDW_WORKLIB)/sims/DPO_AUTO_OP_V/verilog.vcd
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_dut_DPO_AUTO_OP
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_dut_DPO_AUTO_OP
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/system.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/tb.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	xcelium
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else
ifeq ($(BDW_SIM_CONFIG),DPO_AUTO_EXPR_B)



BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/debug/dut_beh.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_beh.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         +=  
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	dut.cc
VLOG_COSIM_TOP		=	
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	 
BDW_VLOG_LIBS		=	
BDW_VLOG_DUMPFILE   =   
BDW_VLOG_DEFINES	=	
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/system.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/tb.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	
	BDW_VLOG_SIM_PATH =	
endif


else
ifeq ($(BDW_SIM_CONFIG),DPO_AUTO_EXPR_V)

BDW_SHAREDLIB		= 1

BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/debug/dut.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         += -DBDW_RTL_dut_DPO_AUTO_EXPR 
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_DPO_AUTO_EXPR_V.v
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/dut_cosim.v $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/v_rtl
BDW_VLOG_DUMPFILE   =   $(BDW_WORKLIB)/sims/DPO_AUTO_EXPR_V/verilog.vcd
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_dut_DPO_AUTO_EXPR
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_dut_DPO_AUTO_EXPR
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/system.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/tb.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	xcelium
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else
ifeq ($(BDW_SIM_CONFIG),DPO_REGION_B)



BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/DPO_REGION/debug/dut_beh.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_beh.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         +=  
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	dut.cc
VLOG_COSIM_TOP		=	
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	 
BDW_VLOG_LIBS		=	
BDW_VLOG_DUMPFILE   =   
BDW_VLOG_DEFINES	=	
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/system.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/tb.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	
	BDW_VLOG_SIM_PATH =	
endif


else
ifeq ($(BDW_SIM_CONFIG),DPO_REGION_V)

BDW_SHAREDLIB		= 1

BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/DPO_REGION/debug/dut.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/DPO_REGION/dut.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         += -DBDW_RTL_dut_DPO_REGION 
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_DPO_REGION_V.v
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/dut_cosim.v $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/dut/DPO_REGION/v_rtl
BDW_VLOG_DUMPFILE   =   $(BDW_WORKLIB)/sims/DPO_REGION_V/verilog.vcd
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_dut_DPO_REGION
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_dut_DPO_REGION
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/system.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/tb.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	xcelium
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else
ifeq ($(BDW_SIM_CONFIG),FLAT_UNROLL_ALL_FAST_B)



BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/debug/dut_beh.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_beh.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         +=  
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	dut.cc
VLOG_COSIM_TOP		=	
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	 
BDW_VLOG_LIBS		=	
BDW_VLOG_DUMPFILE   =   
BDW_VLOG_DEFINES	=	
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/system.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/tb.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	
	BDW_VLOG_SIM_PATH =	
endif


else
ifeq ($(BDW_SIM_CONFIG),FLAT_UNROLL_ALL_FAST_V)

BDW_SHAREDLIB		= 1

BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/debug/dut.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         += -DBDW_RTL_dut_FLAT_UNROLL_ALL_FAST 
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_FLAT_UNROLL_ALL_FAST_V.v
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/dut_cosim.v $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/v_rtl
BDW_VLOG_DUMPFILE   =   $(BDW_WORKLIB)/sims/FLAT_UNROLL_ALL_FAST_V/verilog.vcd
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_dut_FLAT_UNROLL_ALL_FAST
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_dut_FLAT_UNROLL_ALL_FAST
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/system.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/tb.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	xcelium
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else
ifeq ($(BDW_SIM_CONFIG),FLAT_UNROLL_ALL_B)



BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/debug/dut_beh.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_beh.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         +=  
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	dut.cc
VLOG_COSIM_TOP		=	
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	 
BDW_VLOG_LIBS		=	
BDW_VLOG_DUMPFILE   =   
BDW_VLOG_DEFINES	=	
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/system.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/tb.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	
	BDW_VLOG_SIM_PATH =	
endif


else
ifeq ($(BDW_SIM_CONFIG),FLAT_UNROLL_ALL_V)

BDW_SHAREDLIB		= 1

BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/debug/dut.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         += -DBDW_RTL_dut_FLAT_UNROLL_ALL 
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_FLAT_UNROLL_ALL_V.v
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/dut_cosim.v $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/v_rtl
BDW_VLOG_DUMPFILE   =   $(BDW_WORKLIB)/sims/FLAT_UNROLL_ALL_V/verilog.vcd
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_dut_FLAT_UNROLL_ALL
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_dut_FLAT_UNROLL_ALL
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/system.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/tb.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	xcelium
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else
ifeq ($(BDW_SIM_CONFIG),PIPELINE_B)



BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/PIPELINE/debug/dut_beh.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/PIPELINE/dut_beh.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         +=  
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	dut.cc
VLOG_COSIM_TOP		=	
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	 
BDW_VLOG_LIBS		=	
BDW_VLOG_DUMPFILE   =   
BDW_VLOG_DEFINES	=	
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/PIPELINE/dut.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/system.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/tb.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	
	BDW_VLOG_SIM_PATH =	
endif


else
ifeq ($(BDW_SIM_CONFIG),PIPELINE_V)

BDW_SHAREDLIB		= 1

BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/PIPELINE/debug/dut.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/PIPELINE/dut.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)$(BDW_DEBUG_DIR)
BDW_CCFLAGS         += -DBDW_RTL_dut_PIPELINE 
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_PIPELINE_V.v
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/dut_cosim.v $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/dut/PIPELINE/v_rtl
BDW_VLOG_DUMPFILE   =   $(BDW_WORKLIB)/sims/PIPELINE_V/verilog.vcd
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_dut_PIPELINE
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_dut_PIPELINE
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/PIPELINE/dut.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/main.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/system.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/tb.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	xcelium
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else

BDW_MISSING_WRAPPERS=	
ifneq ($(BDW_DEP_CYNTH_CONFIG),)
DEP_FILES           =   bdw_work/wrappers/dut_wrap.d
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif

################################################################
# List of all dep files outside sim_configs for make all_deps
################################################################
BDW_DEP_FILES = $(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/BASIC/dut.d $(BDW_WORKLIB)/modules/dut/DPA/dut.d $(BDW_WORKLIB)/modules/dut/NODPO/dut.d $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut.d $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut.d $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut.d $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut.d $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut.d $(BDW_WORKLIB)/modules/dut/PIPELINE/dut.d


################################################################
# start of logicSynth Configurations
################################################################

# global logicSynth definitions


        
# logicSynthConfig specific definitions

ifeq ($(BDW_LS_CONFIG),L_BASIC)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/L_BASIC
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/L_BASIC/dut.log} {$(BDW_WORKLIB)/logicsynth/L_BASIC/dut.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),dut)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/L_BASIC/dut.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.v
BDW_CYNTH_CONFIG = BASIC
BDW_HLS_CONFIG = BASIC
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/BASIC
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/BASIC
endif
else
ifeq ($(BDW_LS_CONFIG),L_DPA)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/L_DPA
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/L_DPA/dut.log} {$(BDW_WORKLIB)/logicsynth/L_DPA/dut.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),dut)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/L_DPA/dut.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.v
BDW_CYNTH_CONFIG = DPA
BDW_HLS_CONFIG = DPA
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/DPA
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/DPA
endif
else
ifeq ($(BDW_LS_CONFIG),L_NODPO)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/L_NODPO
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/L_NODPO/dut.log} {$(BDW_WORKLIB)/logicsynth/L_NODPO/dut.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),dut)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/L_NODPO/dut.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/dut/NODPO/dut_rtl.v
BDW_CYNTH_CONFIG = NODPO
BDW_HLS_CONFIG = NODPO
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/NODPO
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/NODPO
endif
else
ifeq ($(BDW_LS_CONFIG),L_DPO_AUTO_OP)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/L_DPO_AUTO_OP
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/L_DPO_AUTO_OP/dut.log} {$(BDW_WORKLIB)/logicsynth/L_DPO_AUTO_OP/dut.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),dut)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/L_DPO_AUTO_OP/dut.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_rtl.v
BDW_CYNTH_CONFIG = DPO_AUTO_OP
BDW_HLS_CONFIG = DPO_AUTO_OP
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP
endif
else
ifeq ($(BDW_LS_CONFIG),L_DPO_AUTO_EXPR)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/L_DPO_AUTO_EXPR
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/L_DPO_AUTO_EXPR/dut.log} {$(BDW_WORKLIB)/logicsynth/L_DPO_AUTO_EXPR/dut.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),dut)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/L_DPO_AUTO_EXPR/dut.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_rtl.v
BDW_CYNTH_CONFIG = DPO_AUTO_EXPR
BDW_HLS_CONFIG = DPO_AUTO_EXPR
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR
endif
else
ifeq ($(BDW_LS_CONFIG),L_DPO_REGION)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/L_DPO_REGION
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/L_DPO_REGION/dut.log} {$(BDW_WORKLIB)/logicsynth/L_DPO_REGION/dut.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),dut)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/L_DPO_REGION/dut.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_rtl.v
BDW_CYNTH_CONFIG = DPO_REGION
BDW_HLS_CONFIG = DPO_REGION
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/DPO_REGION
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/DPO_REGION
endif
else
ifeq ($(BDW_LS_CONFIG),L_FLAT_UNROLL_ALL_FAST)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/L_FLAT_UNROLL_ALL_FAST
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/L_FLAT_UNROLL_ALL_FAST/dut.log} {$(BDW_WORKLIB)/logicsynth/L_FLAT_UNROLL_ALL_FAST/dut.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),dut)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/L_FLAT_UNROLL_ALL_FAST/dut.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_rtl.v
BDW_CYNTH_CONFIG = FLAT_UNROLL_ALL_FAST
BDW_HLS_CONFIG = FLAT_UNROLL_ALL_FAST
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST
endif
else
ifeq ($(BDW_LS_CONFIG),L_FLAT_UNROLL_ALL)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/L_FLAT_UNROLL_ALL
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/L_FLAT_UNROLL_ALL/dut.log} {$(BDW_WORKLIB)/logicsynth/L_FLAT_UNROLL_ALL/dut.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),dut)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/L_FLAT_UNROLL_ALL/dut.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_rtl.v
BDW_CYNTH_CONFIG = FLAT_UNROLL_ALL
BDW_HLS_CONFIG = FLAT_UNROLL_ALL
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL
endif
else
ifeq ($(BDW_LS_CONFIG),L_PIPELINE)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/L_PIPELINE
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/L_PIPELINE/dut.log} {$(BDW_WORKLIB)/logicsynth/L_PIPELINE/dut.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),dut)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/L_PIPELINE/dut.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.v
BDW_CYNTH_CONFIG = PIPELINE
BDW_HLS_CONFIG = PIPELINE
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/PIPELINE
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/PIPELINE
endif
endif
endif
endif
endif
endif
endif
endif
endif
endif

################################################################
# start of analysis Configurations
################################################################

# global analysis definitions


        
# analysisConfig specific definitions


ifeq ($(BDW_SHAREDLIB),0)
	EXECUTABLE			= scsim_$(BDW_SIM_CONFIG)
	
ifeq ($(BDW_DEBUG),1)
SIM_BUILD			= $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/debug/sim_$(BDW_SIM_CONFIG)
else
SIM_BUILD			= $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG)
endif
else
	EXECUTABLE			= $(BDW_VLOG_SIM)

ifeq ($(BDW_DEBUG),1)
    COSIM_FILES			= $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/debug/sim_$(BDW_SIM_CONFIG).so $(VLOG_COSIM_TOP)
else
    COSIM_FILES			= $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG).so $(VLOG_COSIM_TOP)
endif
	SIM_BUILD			= $(COSIM_FILES)
endif


################################################################
# start of place and route configurations
################################################################

# pnrConfig specific definitions 

######################################################################
# Include dependency files for this configuration.
# These will be automatically generted if they do not exist.
# Avoid including (and so generating) these files for 'clean' and
# 'help' commands.
######################################################################
ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
    ifeq ($(findstring clean,$(MAKECMDGOALS)),)
        ifeq ($(findstring help,$(MAKECMDGOALS)),)
            ifneq ($(DEP_FILES),)
                -include $(DEP_FILES)
            endif
            ifneq ($(SIM_DEP_FILES),)
                ifeq ($(BDW_GENDEPS),1)
                    -include $(SIM_DEP_FILES)
                endif
            endif
        endif
    endif
endif

######################################################################
## Include pre-defined variables and rules provided with BDW
######################################################################

include ${STRATUS_HOME}/share/stratus/source/bdw.mak

######################################################################
## Error checking rules for variable and environment settings.
######################################################################
vista_needs_gcc3:
ifeq ($(BDW_GCC_VERSION),2.95.3)
	@echo "*** You must use GCC 3 to use Vista." ;  exit
endif

#########################################################
## Start of the "ALL" rule set
#########################################################

pnr_all:


kill_pnr_all:


clean_pnr_all:


power_all: power_P_BASIC power_P_DPA power_P_NODPO power_P_DPO_AUTO_OP power_P_DPO_AUTO_EXPR power_P_DPO_REGION power_P_FLAT_UNROLL_ALL_FAST power_P_FLAT_UNROLL_ALL power_P_PIPELINE


kill_power_all: kill_power_P_BASIC kill_power_P_DPA kill_power_P_NODPO kill_power_P_DPO_AUTO_OP kill_power_P_DPO_AUTO_EXPR kill_power_P_DPO_REGION kill_power_P_FLAT_UNROLL_ALL_FAST kill_power_P_FLAT_UNROLL_ALL kill_power_P_PIPELINE


clean_power_all: clean_power_P_BASIC clean_power_P_DPA clean_power_P_NODPO clean_power_P_DPO_AUTO_OP clean_power_P_DPO_AUTO_EXPR clean_power_P_DPO_REGION clean_power_P_FLAT_UNROLL_ALL_FAST clean_power_P_FLAT_UNROLL_ALL clean_power_P_PIPELINE


equiv_all:


kill_equiv_all:


clean_equiv_all:


ls_all: ls_L_BASIC ls_L_DPA ls_L_NODPO ls_L_DPO_AUTO_OP ls_L_DPO_AUTO_EXPR ls_L_DPO_REGION ls_L_FLAT_UNROLL_ALL_FAST ls_L_FLAT_UNROLL_ALL ls_L_PIPELINE


kill_ls_all: kill_ls_L_BASIC kill_ls_L_DPA kill_ls_L_NODPO kill_ls_L_DPO_AUTO_OP kill_ls_L_DPO_AUTO_EXPR kill_ls_L_DPO_REGION kill_ls_L_FLAT_UNROLL_ALL_FAST kill_ls_L_FLAT_UNROLL_ALL kill_ls_L_PIPELINE


clean_ls_all: clean_ls_L_BASIC clean_ls_L_DPA clean_ls_L_NODPO clean_ls_L_DPO_AUTO_OP clean_ls_L_DPO_AUTO_EXPR clean_ls_L_DPO_REGION clean_ls_L_FLAT_UNROLL_ALL_FAST clean_ls_L_FLAT_UNROLL_ALL clean_ls_L_PIPELINE


analysis_all:


kill_analysis_all:


clean_analysis_all:


hls_sim_all: hls_B hls_BASIC_B hls_BASIC_V hls_DPA_B hls_DPA_V hls_NODPO_B hls_NODPO_V hls_DPO_AUTO_OP_B hls_DPO_AUTO_OP_V hls_DPO_AUTO_EXPR_B hls_DPO_AUTO_EXPR_V hls_DPO_REGION_B hls_DPO_REGION_V hls_FLAT_UNROLL_ALL_FAST_B hls_FLAT_UNROLL_ALL_FAST_V hls_FLAT_UNROLL_ALL_B hls_FLAT_UNROLL_ALL_V hls_PIPELINE_B hls_PIPELINE_V


hls_all: hls_dut_BASIC hls_dut_DPA hls_dut_NODPO hls_dut_DPO_AUTO_OP hls_dut_DPO_AUTO_EXPR hls_dut_DPO_REGION hls_dut_FLAT_UNROLL_ALL_FAST hls_dut_FLAT_UNROLL_ALL hls_dut_PIPELINE


hls_dut_all: hls_dut_BASIC hls_dut_DPA hls_dut_NODPO hls_dut_DPO_AUTO_OP hls_dut_DPO_AUTO_EXPR hls_dut_DPO_REGION hls_dut_FLAT_UNROLL_ALL_FAST hls_dut_FLAT_UNROLL_ALL hls_dut_PIPELINE


cynth_all: cynth_B cynth_BASIC_B cynth_BASIC_V cynth_DPA_B cynth_DPA_V cynth_NODPO_B cynth_NODPO_V cynth_DPO_AUTO_OP_B cynth_DPO_AUTO_OP_V cynth_DPO_AUTO_EXPR_B cynth_DPO_AUTO_EXPR_V cynth_DPO_REGION_B cynth_DPO_REGION_V cynth_FLAT_UNROLL_ALL_FAST_B cynth_FLAT_UNROLL_ALL_FAST_V cynth_FLAT_UNROLL_ALL_B cynth_FLAT_UNROLL_ALL_V cynth_PIPELINE_B cynth_PIPELINE_V


kill_hls_all kill_cynth_all: kill_hls_dut_BASIC kill_hls_dut_DPA kill_hls_dut_NODPO kill_hls_dut_DPO_AUTO_OP kill_hls_dut_DPO_AUTO_EXPR kill_hls_dut_DPO_REGION kill_hls_dut_FLAT_UNROLL_ALL_FAST kill_hls_dut_FLAT_UNROLL_ALL kill_hls_dut_PIPELINE


gen_all_deps: 
	-@$(MAKE) $(BDW_DEP_FILES)


.PHONY: gen_all_deps
.PHONY: all_deps


all_wrappers : bdw_prebuild_wrappers

bdw_prebuild_wrappers:
ifneq ($(BDW_ALL_WRAPPERS),)
	@$(MAKE) -j 1 $(BDW_ALL_WRAPPERS)
endif

bdw_prebuild_rtl:
ifneq ($(SIM_RTL_TARGETS),)
	@$(MAKE) $(SIM_RTL_TARGETS)
endif


clean_hls_all: clean_hls_B clean_hls_BASIC_B clean_hls_BASIC_V clean_hls_DPA_B clean_hls_DPA_V clean_hls_NODPO_B clean_hls_NODPO_V clean_hls_DPO_AUTO_OP_B clean_hls_DPO_AUTO_OP_V clean_hls_DPO_AUTO_EXPR_B clean_hls_DPO_AUTO_EXPR_V clean_hls_DPO_REGION_B clean_hls_DPO_REGION_V clean_hls_FLAT_UNROLL_ALL_FAST_B clean_hls_FLAT_UNROLL_ALL_FAST_V clean_hls_FLAT_UNROLL_ALL_B clean_hls_FLAT_UNROLL_ALL_V clean_hls_PIPELINE_B clean_hls_PIPELINE_V

hls_clean_all: clean_hls_all
cynth_clean_all: clean_hls_all
clean_cynth_all: clean_hls_all
prebuild_all: prebuild_B prebuild_BASIC_B prebuild_BASIC_V prebuild_DPA_B prebuild_DPA_V prebuild_NODPO_B prebuild_NODPO_V prebuild_DPO_AUTO_OP_B prebuild_DPO_AUTO_OP_V prebuild_DPO_AUTO_EXPR_B prebuild_DPO_AUTO_EXPR_V prebuild_DPO_REGION_B prebuild_DPO_REGION_V prebuild_FLAT_UNROLL_ALL_FAST_B prebuild_FLAT_UNROLL_ALL_FAST_V prebuild_FLAT_UNROLL_ALL_B prebuild_FLAT_UNROLL_ALL_V prebuild_PIPELINE_B prebuild_PIPELINE_V

build_all: build_B build_BASIC_B build_BASIC_V build_DPA_B build_DPA_V build_NODPO_B build_NODPO_V build_DPO_AUTO_OP_B build_DPO_AUTO_OP_V build_DPO_AUTO_EXPR_B build_DPO_AUTO_EXPR_V build_DPO_REGION_B build_DPO_REGION_V build_FLAT_UNROLL_ALL_FAST_B build_FLAT_UNROLL_ALL_FAST_V build_FLAT_UNROLL_ALL_B build_FLAT_UNROLL_ALL_V build_PIPELINE_B build_PIPELINE_V

sim_all: sim_B sim_BASIC_B sim_BASIC_V sim_DPA_B sim_DPA_V sim_NODPO_B sim_NODPO_V sim_DPO_AUTO_OP_B sim_DPO_AUTO_OP_V sim_DPO_AUTO_EXPR_B sim_DPO_AUTO_EXPR_V sim_DPO_REGION_B sim_DPO_REGION_V sim_FLAT_UNROLL_ALL_FAST_B sim_FLAT_UNROLL_ALL_FAST_V sim_FLAT_UNROLL_ALL_B sim_FLAT_UNROLL_ALL_V sim_PIPELINE_B sim_PIPELINE_V

kill_sim_all: kill_sim_B kill_sim_BASIC_B kill_sim_BASIC_V kill_sim_DPA_B kill_sim_DPA_V kill_sim_NODPO_B kill_sim_NODPO_V kill_sim_DPO_AUTO_OP_B kill_sim_DPO_AUTO_OP_V kill_sim_DPO_AUTO_EXPR_B kill_sim_DPO_AUTO_EXPR_V kill_sim_DPO_REGION_B kill_sim_DPO_REGION_V kill_sim_FLAT_UNROLL_ALL_FAST_B kill_sim_FLAT_UNROLL_ALL_FAST_V kill_sim_FLAT_UNROLL_ALL_B kill_sim_FLAT_UNROLL_ALL_V kill_sim_PIPELINE_B kill_sim_PIPELINE_V

clean_wrap_all: clean_wrap_B clean_wrap_BASIC_B clean_wrap_BASIC_V clean_wrap_DPA_B clean_wrap_DPA_V clean_wrap_NODPO_B clean_wrap_NODPO_V clean_wrap_DPO_AUTO_OP_B clean_wrap_DPO_AUTO_OP_V clean_wrap_DPO_AUTO_EXPR_B clean_wrap_DPO_AUTO_EXPR_V clean_wrap_DPO_REGION_B clean_wrap_DPO_REGION_V clean_wrap_FLAT_UNROLL_ALL_FAST_B clean_wrap_FLAT_UNROLL_ALL_FAST_V clean_wrap_FLAT_UNROLL_ALL_B clean_wrap_FLAT_UNROLL_ALL_V clean_wrap_PIPELINE_B clean_wrap_PIPELINE_V

kill_all: 
	@bdw_kill -all


clean_cachelib:
	@rm -rf /home/m111/m111061617/ee6470/stratus/path_count/cachelib

clean_all:
	@if [ -d $(BDW_WORKLIB) ] ; then \
		td=`mktemp -d $(BDW_WORKLIB).XXXXXXXX` ; \
		mv $(BDW_WORKLIB) $${td} ; \
		for f in *.vcd *.fsdb ; do \
			if [ -f $$f ] ; then \
				mv $$f $${td} ; \
			fi ; \
		done ; \
		rm -rf $${td} & \
	fi

clean_sim_all: clean_B clean_BASIC_B clean_BASIC_V clean_DPA_B clean_DPA_V clean_NODPO_B clean_NODPO_V clean_DPO_AUTO_OP_B clean_DPO_AUTO_OP_V clean_DPO_AUTO_EXPR_B clean_DPO_AUTO_EXPR_V clean_DPO_REGION_B clean_DPO_REGION_V clean_FLAT_UNROLL_ALL_FAST_B clean_FLAT_UNROLL_ALL_FAST_V clean_FLAT_UNROLL_ALL_B clean_FLAT_UNROLL_ALL_V clean_PIPELINE_B clean_PIPELINE_V clean_deps
	@rm -rf *.vcd *.fsdb $(BDW_OBJDIR) $(BDW_SIMDIR) $(BDW_MODULEDIR) $(BDW_WRAPDIR)

jobs:
	@bdw_ps

clean_libs:
	@rm -rf $(BDW_LIBDIR)

clean_deps:
	@if [ -d $(BDW_WORKLIB) ]; then find $(BDW_WORKLIB) -name '*.d' -exec rm {} \; ; fi

deps : $(DEP_FILES)

#########################################################
## End of the "ALL" rule set
#########################################################



#########################################################
## Start of the "config groups" rule set
#########################################################
        

#########################################################
## End of the "config groups" rule set
#########################################################
        

help:
	@echo 
	@echo "Makefile generated by bdw_makegen version 21.20-p100 from project.tcl"
	@echo 
	@echo "PROJECT-WIDE RULES:"
	@echo "    workbench   - Stratus Workbench for the project."
	@echo "    help-configs - List all configs defined in the project."
	@echo 
	@echo "GROUP RULES:"
	@echo "    hls_all             - Run stratus_hls for all modules for all configurations."
	@echo "    hls_sim_all         - Run stratus_hls for all modules that are RTL_V in a sim_config."
	@echo "    clean_hls_all       - Clear all RTL files generated for all stratus_hls runs for each configuration."
	@echo "    ls_all             - Run logic synthesis for all logic synthesis configs "
	@echo "    clean_ls_all       - Removes logic synthesis results for all logic synthesis configs "
	@echo "    build_all           - Build all simulation executables or shared libraries (but don't run them)."
	@echo "    sim_all             - Build AND run all simulation configurations."
	@echo "    power_all           - Run all Power configurations."
	@echo "    pnr_all             - Run all place and route configurations."
	@echo "    equiv_all           - Run all whole-design equivalence checking configurations."
	@echo "    clean_all           - Removes the $(BDW_WORKLIB) directory, thus cleaning up everything."
	@echo "    clean_sim_all       - Clean up all modules for all simulation configurations."
	@echo "    clean_power_all     - Clean all files generated for all power estimation configs."
	@echo "    clean_pnr_all       - Clean all files generated for all place and route configs."
	@echo "    clean_equiv_all     - Clean all files generated for all equivalence checking configs."
	@echo "    clean_libs          - Clean up all locally built items for hls_libs."
	@echo "    clean_cachelib      - Clean up the local Cache Library."
	@echo "    clean_deps          - Clean up auto-generated dependencies so they will be re-generated."
	@echo "    clean_wrap_all      - Clean all generated wrapper files."
	@echo "    all_deps            - Re-creates all dependencies."
	@echo "    all_wrappers        - Generates all out of date hls_module wrappers."
	@echo "    jobs                - List all current jobs for this project."
	@echo "    kill_all            - Kills alls current jobs for this project."
	@echo "    kill_hls_all        - Kills alls stratus_hls jobs for this project."
	@echo "    kill_ls_all         - Kill all logic synthesis jobs for this project."
	@echo "    kill_sim_all        - Kill all simulation jobs for this project."
	@echo "    kill_pnr_all        - Kill all place and route jobs for this project."
	@echo "    kill_power_all      - Kill all power estimation jobs for this project."
	@echo "    kill_hls_<config_group>_<hls_config>  - Kill all the stratus_hls jobs for a config group"
	@echo "    kill_equiv_all      - Kill all equivalence checking jobs for this project."
	@echo 
	@echo "PER-hls_config RULES:"
	@echo "    hls_<hls_config>   - Run stratus_hls on all modules that have a hls_config with the given name to Verilog"
	@echo "    hhls_<module>_<hls_config>  - Run stratus_hls on the given module and its submodules and hls_config to Verilog"
	@echo "    hls_<config_group>  - Run stratus_hls on the modules in a config group specified by define_config_group command"
	@echo "    clean_<hls_config> - Clean the given hls_config from all modules that have it"
	@echo "    view_<hls_config>  - View schematics for all modules that have a hls_config with the given name"
	@echo "    view_<sim_config>  - View waveforms for the simulation (waveform viewer tool is choosen from project file)"
	@echo 
	@echo "PER-module-and-hls_config RULES:"
	@echo "    hls_<module>_all            - Run stratus_hls on the given module and all its hls_configs to Verilog"
	@echo "    hls_<module>_<hls_config>   - Run stratus_hls on the given module and hls_config to Verilog"
	@echo "    elab_<module>_<hls_config>  - Run stratus_hls through elaboration on the given module and hls_config"
	@echo "    optim_<module>_<hls_config> - Run stratus_hls through optimization on the given module and hls_config"
	@echo "    sched_<module>_<hls_config> - Run stratus_hls through scheduling on the given module and hls_config"
	@echo "    clean_hls_<module>_<hls_config>  - Clean synthesis results for the given module and hls_config"
	@echo "    view_<module>_<hls_config> - View schematic for the given module and hls_config"
	@echo "    kill_<module>_<hls_config> - Kill stratus_hls job for this module and hls_config"
	@echo 
	@echo "DEFINED module and hls_config NAMES:"
	@echo "	hls_config for module dut:"
	@echo "		BASIC	DPA	NODPO	DPO_AUTO_OP"
	@echo "		DPO_AUTO_EXPR	DPO_REGION	FLAT_UNROLL_ALL_FAST	FLAT_UNROLL_ALL"
	@echo "		PIPELINE"
	@echo 
	@echo "PER-sim_config RULES:"
	@echo "    clean_hls_<sim_config> - Clean stratus_hls output files for all modules required by the named sim_config"
	@echo "    build_<sim_config>   - Build the simulation executable for the named sim_config"
	@echo "    sim_<sim_config>     - Builds and executes a simulation for the named sim_config"
	@echo "    kill_sim_<sim_config> - Kills the simulation for the  named sim_config"
	@echo "    debug_<sim_config>   - Builds a simulation for the named sim_config for use with the gdb debugger under stratus_ide"
	@echo "    view_<sim_config>    - View schematics for all modules required by the named sim_config"
	@echo "    clean_<sim_config>   - Clean up files built for the named sim_config"
	@echo 
	@echo "DEFINED sim_config NAMES:"

	@echo "	B	BASIC_B	BASIC_V	DPA_B"
	@echo "	DPA_V	NODPO_B	NODPO_V	DPO_AUTO_OP_B"
	@echo "	DPO_AUTO_OP_V	DPO_AUTO_EXPR_B	DPO_AUTO_EXPR_V	DPO_REGION_B"
	@echo "	DPO_REGION_V	FLAT_UNROLL_ALL_FAST_B	FLAT_UNROLL_ALL_FAST_V	FLAT_UNROLL_ALL_B"
	@echo "	FLAT_UNROLL_ALL_V	PIPELINE_B	PIPELINE_V"

	@echo
	@echo "PER-logicSynthConfig Rules:"
	@echo "    ls_<logicSynthConfig> - Run logic synthesis for the modules in this logicSynthConfig"
	@echo "    view_ls_<logicSynthConfig> - View schematics for the modules in this logicSynthConfig"
	@echo "    clean_ls_<logicSynthConfig> - Removes logic synthesis results for this logicSynthConfig"
	@echo "    kill_ls_<logicSynthConfig> - Kills the logic synthesis job for this logicSynthConfig"
	@echo
	@echo "DEFINED logicSynthConfig NAMES:"

	@echo "	L_BASIC	L_DPA	L_NODPO	L_DPO_AUTO_OP"
	@echo "	L_DPO_AUTO_EXPR	L_DPO_REGION	L_FLAT_UNROLL_ALL_FAST	L_FLAT_UNROLL_ALL"
	@echo "	L_PIPELINE"

	@echo
	@echo "PER-powerConfig Rules:"
	@echo "    power_<powerConfig> - Run power estimation for this powerConfig"
	@echo "    clean_power_<powerConfig> - Removes power estimation results for this powerConfig"
	@echo "    kill_power_<powerConfig> - Kills the power estimation job for this powerConfig"
	@echo
	@echo "DEFINED powerConfig NAMES:"

	@echo "	P_BASIC	P_DPA	P_NODPO	P_DPO_AUTO_OP"
	@echo "	P_DPO_AUTO_EXPR	P_DPO_REGION	P_FLAT_UNROLL_ALL_FAST	P_FLAT_UNROLL_ALL"
	@echo "	P_PIPELINE"
	@echo 


help-configs:
	@echo 
	@echo "DEFINED module and hls_config NAMES:"
	@echo "	hls_config for module dut:"
	@echo "		BASIC	DPA	NODPO	DPO_AUTO_OP"
	@echo "		DPO_AUTO_EXPR	DPO_REGION	FLAT_UNROLL_ALL_FAST	FLAT_UNROLL_ALL"
	@echo "		PIPELINE"
	@echo 
	@echo "DEFINED sim_config NAMES:"

	@echo "	B	BASIC_B	BASIC_V	DPA_B"
	@echo "	DPA_V	NODPO_B	NODPO_V	DPO_AUTO_OP_B"
	@echo "	DPO_AUTO_OP_V	DPO_AUTO_EXPR_B	DPO_AUTO_EXPR_V	DPO_REGION_B"
	@echo "	DPO_REGION_V	FLAT_UNROLL_ALL_FAST_B	FLAT_UNROLL_ALL_FAST_V	FLAT_UNROLL_ALL_B"
	@echo "	FLAT_UNROLL_ALL_V	PIPELINE_B	PIPELINE_V"
	@echo
	@echo "DEFINED logicSynthConfig NAMES:"

	@echo "	L_BASIC	L_DPA	L_NODPO	L_DPO_AUTO_OP"
	@echo "	L_DPO_AUTO_EXPR	L_DPO_REGION	L_FLAT_UNROLL_ALL_FAST	L_FLAT_UNROLL_ALL"
	@echo "	L_PIPELINE"
	@echo
	@echo "DEFINED powerConfig NAMES:"

	@echo "	P_BASIC	P_DPA	P_NODPO	P_DPO_AUTO_OP"
	@echo "	P_DPO_AUTO_EXPR	P_DPO_REGION	P_FLAT_UNROLL_ALL_FAST	P_FLAT_UNROLL_ALL"
	@echo "	P_PIPELINE"
	@echo 


#########################################################
# rules for making parent simConfig links
#########################################################
parentLinks:
	@if [ ! -d $(BDW_SIM_CONFIG_DIR) ] ; then mkdir -p $(BDW_SIM_CONFIG_DIR) ; fi
	@cd $(BDW_SIM_CONFIG_DIR) ; \
	ln -sf ../$(BDW_PARENT_SIM)/xcelium ; \
	if [ -d ../$(BDW_PARENT_SIM)/xcelium.d ] ; then \
		ln -sf ../$(BDW_PARENT_SIM)/xcelium.d ; \
	fi; \
	ln -sf ../$(BDW_PARENT_SIM)/siminfo



#########################################################
## Start of the rule set for sim_config B
#########################################################


hls_B: 



cynth_B: 

hls_clean_B: clean_hls_B

cynth_clean_B: hls_clean_B

clean_hls_B: $(addprefix clean_, ) 

clean_cynth_B: clean_hls_B

prebuild_B: bdw_prebuild_wrappers 

ifeq ($(CWBExec_build),1)

dbg_build_B:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=B
	@$(MAKE) BDW_DEBUG=1 build_B


build_B build_B_sub: bdw_prebuild_wrappers 
	@$(MAKE) siminfo BDW_SIM_CONFIG=B
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=B BDW_GENDEPS=1

else
.PHONY: build_B
.PHONY: dbg_build_B

dbg_build_B:
	@bdw_exec -jobproject project.tcl -job dbg_build.B $(MAKE) CWBExec_build=1 dbg_build_B

build_B:
	@bdw_exec -jobproject project.tcl -job build.B $(MAKE) CWBExec_build=1 build_B

build_B_sub:
	@bdw_exec -jobproject project.tcl -job build.B.s $(MAKE) CWBExec_build=1 build_B_sub
endif


ifeq ($(CWBExec_sim),1)
sim_B sim_sub_B: build_B_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=B 

else
.PHONY: sim_B

sim_B:
	@bdw_exec -jobproject project.tcl -job sim.B $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_B 

sim_sub_B:
	@bdw_exec -jobproject project.tcl -job sim_sub.B.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_B 
endif


kill_sim_B:
	@bdw_kill -job sim.B
	@bdw_kill -job sim.B.s


catlog_B: 
debug_B: 
	@$(MAKE) BDW_DEBUG=1 build_B
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=B RUN_DEBUGGER=1
    
ifeq ($(CWBExec_view),1)
view_B:
	@if [ -e $(BDW_WORKLIB)/sims/B/systemc.vcd ]; then \
	bdw_view_waveform -project project.tcl -simconfig B ;\
	else   \
	$(MAKE) sim_B ;\
	bdw_view_waveform -project project.tcl -simconfig B ;\
    fi
else
view_B:
	@bdw_exec -jobproject project.tcl -job view.B $(MAKE) CWBExec_view=1 view_B
endif
    


clean_wrap_B:
	@rm -f 
	@rm -rf $(BDW_WORKLIB)/sims/B $(BDW_WORKLIB)/sims/B/sim_B
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=B

clean_B: clean_hls_B clean_sim_B

clean_sim_B: clean_wrap_B
	@rm -rf $(BDW_WORKLIB)/jobs/sim.B.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.B
	@rm -rf $(BDW_WORKLIB)/jobs/build.B


#########################################################
## Start of the rule set for sim_config BASIC_B
#########################################################


hls_BASIC_B: 



cynth_BASIC_B: 

hls_clean_BASIC_B: clean_hls_BASIC_B

cynth_clean_BASIC_B: hls_clean_BASIC_B

clean_hls_BASIC_B: $(addprefix clean_, ) 

clean_cynth_BASIC_B: clean_hls_BASIC_B

prebuild_BASIC_B: bdw_prebuild_wrappers 

ifeq ($(CWBExec_build),1)

dbg_build_BASIC_B:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=BASIC_B
	@$(MAKE) BDW_DEBUG=1 build_BASIC_B


build_BASIC_B build_BASIC_B_sub: bdw_prebuild_wrappers 
	@$(MAKE) siminfo BDW_SIM_CONFIG=BASIC_B
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=BASIC_B BDW_GENDEPS=1

else
.PHONY: build_BASIC_B
.PHONY: dbg_build_BASIC_B

dbg_build_BASIC_B:
	@bdw_exec -jobproject project.tcl -job dbg_build.BASIC_B $(MAKE) CWBExec_build=1 dbg_build_BASIC_B

build_BASIC_B:
	@bdw_exec -jobproject project.tcl -job build.BASIC_B $(MAKE) CWBExec_build=1 build_BASIC_B

build_BASIC_B_sub:
	@bdw_exec -jobproject project.tcl -job build.BASIC_B.s $(MAKE) CWBExec_build=1 build_BASIC_B_sub
endif


ifeq ($(CWBExec_sim),1)
sim_BASIC_B sim_sub_BASIC_B: build_BASIC_B_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=BASIC_B 

else
.PHONY: sim_BASIC_B

sim_BASIC_B:
	@bdw_exec -jobproject project.tcl -job sim.BASIC_B $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_BASIC_B 

sim_sub_BASIC_B:
	@bdw_exec -jobproject project.tcl -job sim_sub.BASIC_B.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_BASIC_B 
endif


kill_sim_BASIC_B:
	@bdw_kill -job sim.BASIC_B
	@bdw_kill -job sim.BASIC_B.s


catlog_BASIC_B: 
debug_BASIC_B: 
	@$(MAKE) BDW_DEBUG=1 build_BASIC_B
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=BASIC_B RUN_DEBUGGER=1
    
ifeq ($(CWBExec_view),1)
view_BASIC_B:
	@if [ -e $(BDW_WORKLIB)/sims/BASIC_B/systemc.vcd ]; then \
	bdw_view_waveform -project project.tcl -simconfig BASIC_B ;\
	else   \
	$(MAKE) sim_BASIC_B ;\
	bdw_view_waveform -project project.tcl -simconfig BASIC_B ;\
    fi
else
view_BASIC_B:
	@bdw_exec -jobproject project.tcl -job view.BASIC_B $(MAKE) CWBExec_view=1 view_BASIC_B
endif
    


clean_wrap_BASIC_B:
	@rm -f 
	@rm -rf $(BDW_WORKLIB)/sims/BASIC_B $(BDW_WORKLIB)/sims/BASIC_B/sim_BASIC_B
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=BASIC_B

clean_BASIC_B: clean_hls_BASIC_B clean_sim_BASIC_B

clean_sim_BASIC_B: clean_wrap_BASIC_B
	@rm -rf $(BDW_WORKLIB)/jobs/sim.BASIC_B.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.BASIC_B
	@rm -rf $(BDW_WORKLIB)/jobs/build.BASIC_B


#########################################################
## Start of the rule set for sim_config BASIC_V
#########################################################


hls_BASIC_V:  
	$(MAKE) -j1 hls_dut_BASIC



cynth_BASIC_V:  
	$(MAKE) -j1 hlsc_dut_BASIC

hls_clean_BASIC_V: clean_hls_BASIC_V

cynth_clean_BASIC_V: hls_clean_BASIC_V

clean_hls_BASIC_V: $(addprefix clean_, hls_dut_BASIC) 

clean_cynth_BASIC_V: clean_hls_BASIC_V

prebuild_BASIC_V: bdw_prebuild_wrappers  
	$(MAKE) -j1 hls_dut_BASIC

ifeq ($(CWBExec_build),1)

dbg_build_BASIC_V:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=BASIC_V
	@$(MAKE) BDW_DEBUG=1 build_BASIC_V


build_BASIC_V build_BASIC_V_sub: bdw_prebuild_wrappers  
	$(MAKE) -j1 CWBExec_hls=1 hls_dut_BASIC
	@$(MAKE) siminfo BDW_SIM_CONFIG=BASIC_V
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=BASIC_V BDW_GENDEPS=1

else
.PHONY: build_BASIC_V
.PHONY: dbg_build_BASIC_V

dbg_build_BASIC_V:
	@bdw_exec -jobproject project.tcl -job dbg_build.BASIC_V $(MAKE) CWBExec_build=1 dbg_build_BASIC_V

build_BASIC_V:
	@bdw_exec -jobproject project.tcl -job build.BASIC_V $(MAKE) CWBExec_build=1 build_BASIC_V

build_BASIC_V_sub:
	@bdw_exec -jobproject project.tcl -job build.BASIC_V.s $(MAKE) CWBExec_build=1 build_BASIC_V_sub
endif


ifeq ($(CWBExec_sim),1)
sim_BASIC_V sim_sub_BASIC_V: build_BASIC_V_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=BASIC_V 

else
.PHONY: sim_BASIC_V

sim_BASIC_V:
	@bdw_exec -jobproject project.tcl -job sim.BASIC_V $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_BASIC_V 

sim_sub_BASIC_V:
	@bdw_exec -jobproject project.tcl -job sim_sub.BASIC_V.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_BASIC_V 
endif


kill_sim_BASIC_V:
	@bdw_kill -job sim.BASIC_V
	@bdw_kill -job sim.BASIC_V.s


catlog_BASIC_V: catVLGLog_dut_BASIC
debug_BASIC_V: 
	@$(MAKE) BDW_DEBUG=1 build_BASIC_V
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=BASIC_V RUN_DEBUGGER=1
    
ifeq ($(CWBExec_view),1)
view_BASIC_V:
	@if [ -e $(BDW_WORKLIB)/sims/BASIC_V/verilog.vcd ]; then \
	bdw_view_waveform -project project.tcl -simconfig BASIC_V ;\
	else   \
	$(MAKE) sim_BASIC_V ;\
	bdw_view_waveform -project project.tcl -simconfig BASIC_V ;\
    fi
else
view_BASIC_V:
	@bdw_exec -jobproject project.tcl -job view.BASIC_V $(MAKE) CWBExec_view=1 view_BASIC_V
endif
    


clean_wrap_BASIC_V:
	@rm -f $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/BASIC_V $(BDW_WORKLIB)/sims/BASIC_V/sim_BASIC_V.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=BASIC_V

clean_BASIC_V: clean_hls_BASIC_V clean_sim_BASIC_V

clean_sim_BASIC_V: clean_wrap_BASIC_V
	@rm -rf $(BDW_WORKLIB)/jobs/sim.BASIC_V.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.BASIC_V
	@rm -rf $(BDW_WORKLIB)/jobs/build.BASIC_V


$(BDW_WORKLIB)/sims/top_BASIC_V.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project project.tcl -simconfig BASIC_V -top top



#########################################################
## Start of the rule set for sim_config DPA_B
#########################################################


hls_DPA_B: 



cynth_DPA_B: 

hls_clean_DPA_B: clean_hls_DPA_B

cynth_clean_DPA_B: hls_clean_DPA_B

clean_hls_DPA_B: $(addprefix clean_, ) 

clean_cynth_DPA_B: clean_hls_DPA_B

prebuild_DPA_B: bdw_prebuild_wrappers 

ifeq ($(CWBExec_build),1)

dbg_build_DPA_B:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=DPA_B
	@$(MAKE) BDW_DEBUG=1 build_DPA_B


build_DPA_B build_DPA_B_sub: bdw_prebuild_wrappers 
	@$(MAKE) siminfo BDW_SIM_CONFIG=DPA_B
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=DPA_B BDW_GENDEPS=1

else
.PHONY: build_DPA_B
.PHONY: dbg_build_DPA_B

dbg_build_DPA_B:
	@bdw_exec -jobproject project.tcl -job dbg_build.DPA_B $(MAKE) CWBExec_build=1 dbg_build_DPA_B

build_DPA_B:
	@bdw_exec -jobproject project.tcl -job build.DPA_B $(MAKE) CWBExec_build=1 build_DPA_B

build_DPA_B_sub:
	@bdw_exec -jobproject project.tcl -job build.DPA_B.s $(MAKE) CWBExec_build=1 build_DPA_B_sub
endif


ifeq ($(CWBExec_sim),1)
sim_DPA_B sim_sub_DPA_B: build_DPA_B_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=DPA_B 

else
.PHONY: sim_DPA_B

sim_DPA_B:
	@bdw_exec -jobproject project.tcl -job sim.DPA_B $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_DPA_B 

sim_sub_DPA_B:
	@bdw_exec -jobproject project.tcl -job sim_sub.DPA_B.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_DPA_B 
endif


kill_sim_DPA_B:
	@bdw_kill -job sim.DPA_B
	@bdw_kill -job sim.DPA_B.s


catlog_DPA_B: 
debug_DPA_B: 
	@$(MAKE) BDW_DEBUG=1 build_DPA_B
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=DPA_B RUN_DEBUGGER=1
    
ifeq ($(CWBExec_view),1)
view_DPA_B:
	@if [ -e $(BDW_WORKLIB)/sims/DPA_B/systemc.vcd ]; then \
	bdw_view_waveform -project project.tcl -simconfig DPA_B ;\
	else   \
	$(MAKE) sim_DPA_B ;\
	bdw_view_waveform -project project.tcl -simconfig DPA_B ;\
    fi
else
view_DPA_B:
	@bdw_exec -jobproject project.tcl -job view.DPA_B $(MAKE) CWBExec_view=1 view_DPA_B
endif
    


clean_wrap_DPA_B:
	@rm -f 
	@rm -rf $(BDW_WORKLIB)/sims/DPA_B $(BDW_WORKLIB)/sims/DPA_B/sim_DPA_B
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=DPA_B

clean_DPA_B: clean_hls_DPA_B clean_sim_DPA_B

clean_sim_DPA_B: clean_wrap_DPA_B
	@rm -rf $(BDW_WORKLIB)/jobs/sim.DPA_B.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.DPA_B
	@rm -rf $(BDW_WORKLIB)/jobs/build.DPA_B


#########################################################
## Start of the rule set for sim_config DPA_V
#########################################################


hls_DPA_V:  
	$(MAKE) -j1 hls_dut_DPA



cynth_DPA_V:  
	$(MAKE) -j1 hlsc_dut_DPA

hls_clean_DPA_V: clean_hls_DPA_V

cynth_clean_DPA_V: hls_clean_DPA_V

clean_hls_DPA_V: $(addprefix clean_, hls_dut_DPA) 

clean_cynth_DPA_V: clean_hls_DPA_V

prebuild_DPA_V: bdw_prebuild_wrappers  
	$(MAKE) -j1 hls_dut_DPA

ifeq ($(CWBExec_build),1)

dbg_build_DPA_V:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=DPA_V
	@$(MAKE) BDW_DEBUG=1 build_DPA_V


build_DPA_V build_DPA_V_sub: bdw_prebuild_wrappers  
	$(MAKE) -j1 CWBExec_hls=1 hls_dut_DPA
	@$(MAKE) siminfo BDW_SIM_CONFIG=DPA_V
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=DPA_V BDW_GENDEPS=1

else
.PHONY: build_DPA_V
.PHONY: dbg_build_DPA_V

dbg_build_DPA_V:
	@bdw_exec -jobproject project.tcl -job dbg_build.DPA_V $(MAKE) CWBExec_build=1 dbg_build_DPA_V

build_DPA_V:
	@bdw_exec -jobproject project.tcl -job build.DPA_V $(MAKE) CWBExec_build=1 build_DPA_V

build_DPA_V_sub:
	@bdw_exec -jobproject project.tcl -job build.DPA_V.s $(MAKE) CWBExec_build=1 build_DPA_V_sub
endif


ifeq ($(CWBExec_sim),1)
sim_DPA_V sim_sub_DPA_V: build_DPA_V_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=DPA_V 

else
.PHONY: sim_DPA_V

sim_DPA_V:
	@bdw_exec -jobproject project.tcl -job sim.DPA_V $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_DPA_V 

sim_sub_DPA_V:
	@bdw_exec -jobproject project.tcl -job sim_sub.DPA_V.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_DPA_V 
endif


kill_sim_DPA_V:
	@bdw_kill -job sim.DPA_V
	@bdw_kill -job sim.DPA_V.s


catlog_DPA_V: catVLGLog_dut_DPA
debug_DPA_V: 
	@$(MAKE) BDW_DEBUG=1 build_DPA_V
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=DPA_V RUN_DEBUGGER=1
    
ifeq ($(CWBExec_view),1)
view_DPA_V:
	@if [ -e $(BDW_WORKLIB)/sims/DPA_V/verilog.vcd ]; then \
	bdw_view_waveform -project project.tcl -simconfig DPA_V ;\
	else   \
	$(MAKE) sim_DPA_V ;\
	bdw_view_waveform -project project.tcl -simconfig DPA_V ;\
    fi
else
view_DPA_V:
	@bdw_exec -jobproject project.tcl -job view.DPA_V $(MAKE) CWBExec_view=1 view_DPA_V
endif
    


clean_wrap_DPA_V:
	@rm -f $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/DPA_V $(BDW_WORKLIB)/sims/DPA_V/sim_DPA_V.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=DPA_V

clean_DPA_V: clean_hls_DPA_V clean_sim_DPA_V

clean_sim_DPA_V: clean_wrap_DPA_V
	@rm -rf $(BDW_WORKLIB)/jobs/sim.DPA_V.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.DPA_V
	@rm -rf $(BDW_WORKLIB)/jobs/build.DPA_V


$(BDW_WORKLIB)/sims/top_DPA_V.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project project.tcl -simconfig DPA_V -top top



#########################################################
## Start of the rule set for sim_config NODPO_B
#########################################################


hls_NODPO_B: 



cynth_NODPO_B: 

hls_clean_NODPO_B: clean_hls_NODPO_B

cynth_clean_NODPO_B: hls_clean_NODPO_B

clean_hls_NODPO_B: $(addprefix clean_, ) 

clean_cynth_NODPO_B: clean_hls_NODPO_B

prebuild_NODPO_B: bdw_prebuild_wrappers 

ifeq ($(CWBExec_build),1)

dbg_build_NODPO_B:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=NODPO_B
	@$(MAKE) BDW_DEBUG=1 build_NODPO_B


build_NODPO_B build_NODPO_B_sub: bdw_prebuild_wrappers 
	@$(MAKE) siminfo BDW_SIM_CONFIG=NODPO_B
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=NODPO_B BDW_GENDEPS=1

else
.PHONY: build_NODPO_B
.PHONY: dbg_build_NODPO_B

dbg_build_NODPO_B:
	@bdw_exec -jobproject project.tcl -job dbg_build.NODPO_B $(MAKE) CWBExec_build=1 dbg_build_NODPO_B

build_NODPO_B:
	@bdw_exec -jobproject project.tcl -job build.NODPO_B $(MAKE) CWBExec_build=1 build_NODPO_B

build_NODPO_B_sub:
	@bdw_exec -jobproject project.tcl -job build.NODPO_B.s $(MAKE) CWBExec_build=1 build_NODPO_B_sub
endif


ifeq ($(CWBExec_sim),1)
sim_NODPO_B sim_sub_NODPO_B: build_NODPO_B_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=NODPO_B 

else
.PHONY: sim_NODPO_B

sim_NODPO_B:
	@bdw_exec -jobproject project.tcl -job sim.NODPO_B $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_NODPO_B 

sim_sub_NODPO_B:
	@bdw_exec -jobproject project.tcl -job sim_sub.NODPO_B.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_NODPO_B 
endif


kill_sim_NODPO_B:
	@bdw_kill -job sim.NODPO_B
	@bdw_kill -job sim.NODPO_B.s


catlog_NODPO_B: 
debug_NODPO_B: 
	@$(MAKE) BDW_DEBUG=1 build_NODPO_B
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=NODPO_B RUN_DEBUGGER=1
    
ifeq ($(CWBExec_view),1)
view_NODPO_B:
	@if [ -e $(BDW_WORKLIB)/sims/NODPO_B/systemc.vcd ]; then \
	bdw_view_waveform -project project.tcl -simconfig NODPO_B ;\
	else   \
	$(MAKE) sim_NODPO_B ;\
	bdw_view_waveform -project project.tcl -simconfig NODPO_B ;\
    fi
else
view_NODPO_B:
	@bdw_exec -jobproject project.tcl -job view.NODPO_B $(MAKE) CWBExec_view=1 view_NODPO_B
endif
    


clean_wrap_NODPO_B:
	@rm -f 
	@rm -rf $(BDW_WORKLIB)/sims/NODPO_B $(BDW_WORKLIB)/sims/NODPO_B/sim_NODPO_B
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=NODPO_B

clean_NODPO_B: clean_hls_NODPO_B clean_sim_NODPO_B

clean_sim_NODPO_B: clean_wrap_NODPO_B
	@rm -rf $(BDW_WORKLIB)/jobs/sim.NODPO_B.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.NODPO_B
	@rm -rf $(BDW_WORKLIB)/jobs/build.NODPO_B


#########################################################
## Start of the rule set for sim_config NODPO_V
#########################################################


hls_NODPO_V:  
	$(MAKE) -j1 hls_dut_NODPO



cynth_NODPO_V:  
	$(MAKE) -j1 hlsc_dut_NODPO

hls_clean_NODPO_V: clean_hls_NODPO_V

cynth_clean_NODPO_V: hls_clean_NODPO_V

clean_hls_NODPO_V: $(addprefix clean_, hls_dut_NODPO) 

clean_cynth_NODPO_V: clean_hls_NODPO_V

prebuild_NODPO_V: bdw_prebuild_wrappers  
	$(MAKE) -j1 hls_dut_NODPO

ifeq ($(CWBExec_build),1)

dbg_build_NODPO_V:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=NODPO_V
	@$(MAKE) BDW_DEBUG=1 build_NODPO_V


build_NODPO_V build_NODPO_V_sub: bdw_prebuild_wrappers  
	$(MAKE) -j1 CWBExec_hls=1 hls_dut_NODPO
	@$(MAKE) siminfo BDW_SIM_CONFIG=NODPO_V
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=NODPO_V BDW_GENDEPS=1

else
.PHONY: build_NODPO_V
.PHONY: dbg_build_NODPO_V

dbg_build_NODPO_V:
	@bdw_exec -jobproject project.tcl -job dbg_build.NODPO_V $(MAKE) CWBExec_build=1 dbg_build_NODPO_V

build_NODPO_V:
	@bdw_exec -jobproject project.tcl -job build.NODPO_V $(MAKE) CWBExec_build=1 build_NODPO_V

build_NODPO_V_sub:
	@bdw_exec -jobproject project.tcl -job build.NODPO_V.s $(MAKE) CWBExec_build=1 build_NODPO_V_sub
endif


ifeq ($(CWBExec_sim),1)
sim_NODPO_V sim_sub_NODPO_V: build_NODPO_V_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=NODPO_V 

else
.PHONY: sim_NODPO_V

sim_NODPO_V:
	@bdw_exec -jobproject project.tcl -job sim.NODPO_V $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_NODPO_V 

sim_sub_NODPO_V:
	@bdw_exec -jobproject project.tcl -job sim_sub.NODPO_V.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_NODPO_V 
endif


kill_sim_NODPO_V:
	@bdw_kill -job sim.NODPO_V
	@bdw_kill -job sim.NODPO_V.s


catlog_NODPO_V: catVLGLog_dut_NODPO
debug_NODPO_V: 
	@$(MAKE) BDW_DEBUG=1 build_NODPO_V
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=NODPO_V RUN_DEBUGGER=1
    
ifeq ($(CWBExec_view),1)
view_NODPO_V:
	@if [ -e $(BDW_WORKLIB)/sims/NODPO_V/verilog.vcd ]; then \
	bdw_view_waveform -project project.tcl -simconfig NODPO_V ;\
	else   \
	$(MAKE) sim_NODPO_V ;\
	bdw_view_waveform -project project.tcl -simconfig NODPO_V ;\
    fi
else
view_NODPO_V:
	@bdw_exec -jobproject project.tcl -job view.NODPO_V $(MAKE) CWBExec_view=1 view_NODPO_V
endif
    


clean_wrap_NODPO_V:
	@rm -f $(BDW_WORKLIB)/modules/dut/NODPO/dut_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/NODPO_V $(BDW_WORKLIB)/sims/NODPO_V/sim_NODPO_V.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=NODPO_V

clean_NODPO_V: clean_hls_NODPO_V clean_sim_NODPO_V

clean_sim_NODPO_V: clean_wrap_NODPO_V
	@rm -rf $(BDW_WORKLIB)/jobs/sim.NODPO_V.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.NODPO_V
	@rm -rf $(BDW_WORKLIB)/jobs/build.NODPO_V


$(BDW_WORKLIB)/sims/top_NODPO_V.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project project.tcl -simconfig NODPO_V -top top



#########################################################
## Start of the rule set for sim_config DPO_AUTO_OP_B
#########################################################


hls_DPO_AUTO_OP_B: 



cynth_DPO_AUTO_OP_B: 

hls_clean_DPO_AUTO_OP_B: clean_hls_DPO_AUTO_OP_B

cynth_clean_DPO_AUTO_OP_B: hls_clean_DPO_AUTO_OP_B

clean_hls_DPO_AUTO_OP_B: $(addprefix clean_, ) 

clean_cynth_DPO_AUTO_OP_B: clean_hls_DPO_AUTO_OP_B

prebuild_DPO_AUTO_OP_B: bdw_prebuild_wrappers 

ifeq ($(CWBExec_build),1)

dbg_build_DPO_AUTO_OP_B:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=DPO_AUTO_OP_B
	@$(MAKE) BDW_DEBUG=1 build_DPO_AUTO_OP_B


build_DPO_AUTO_OP_B build_DPO_AUTO_OP_B_sub: bdw_prebuild_wrappers 
	@$(MAKE) siminfo BDW_SIM_CONFIG=DPO_AUTO_OP_B
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=DPO_AUTO_OP_B BDW_GENDEPS=1

else
.PHONY: build_DPO_AUTO_OP_B
.PHONY: dbg_build_DPO_AUTO_OP_B

dbg_build_DPO_AUTO_OP_B:
	@bdw_exec -jobproject project.tcl -job dbg_build.DPO_AUTO_OP_B $(MAKE) CWBExec_build=1 dbg_build_DPO_AUTO_OP_B

build_DPO_AUTO_OP_B:
	@bdw_exec -jobproject project.tcl -job build.DPO_AUTO_OP_B $(MAKE) CWBExec_build=1 build_DPO_AUTO_OP_B

build_DPO_AUTO_OP_B_sub:
	@bdw_exec -jobproject project.tcl -job build.DPO_AUTO_OP_B.s $(MAKE) CWBExec_build=1 build_DPO_AUTO_OP_B_sub
endif


ifeq ($(CWBExec_sim),1)
sim_DPO_AUTO_OP_B sim_sub_DPO_AUTO_OP_B: build_DPO_AUTO_OP_B_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=DPO_AUTO_OP_B 

else
.PHONY: sim_DPO_AUTO_OP_B

sim_DPO_AUTO_OP_B:
	@bdw_exec -jobproject project.tcl -job sim.DPO_AUTO_OP_B $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_DPO_AUTO_OP_B 

sim_sub_DPO_AUTO_OP_B:
	@bdw_exec -jobproject project.tcl -job sim_sub.DPO_AUTO_OP_B.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_DPO_AUTO_OP_B 
endif


kill_sim_DPO_AUTO_OP_B:
	@bdw_kill -job sim.DPO_AUTO_OP_B
	@bdw_kill -job sim.DPO_AUTO_OP_B.s


catlog_DPO_AUTO_OP_B: 
debug_DPO_AUTO_OP_B: 
	@$(MAKE) BDW_DEBUG=1 build_DPO_AUTO_OP_B
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=DPO_AUTO_OP_B RUN_DEBUGGER=1
    
ifeq ($(CWBExec_view),1)
view_DPO_AUTO_OP_B:
	@if [ -e $(BDW_WORKLIB)/sims/DPO_AUTO_OP_B/systemc.vcd ]; then \
	bdw_view_waveform -project project.tcl -simconfig DPO_AUTO_OP_B ;\
	else   \
	$(MAKE) sim_DPO_AUTO_OP_B ;\
	bdw_view_waveform -project project.tcl -simconfig DPO_AUTO_OP_B ;\
    fi
else
view_DPO_AUTO_OP_B:
	@bdw_exec -jobproject project.tcl -job view.DPO_AUTO_OP_B $(MAKE) CWBExec_view=1 view_DPO_AUTO_OP_B
endif
    


clean_wrap_DPO_AUTO_OP_B:
	@rm -f 
	@rm -rf $(BDW_WORKLIB)/sims/DPO_AUTO_OP_B $(BDW_WORKLIB)/sims/DPO_AUTO_OP_B/sim_DPO_AUTO_OP_B
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=DPO_AUTO_OP_B

clean_DPO_AUTO_OP_B: clean_hls_DPO_AUTO_OP_B clean_sim_DPO_AUTO_OP_B

clean_sim_DPO_AUTO_OP_B: clean_wrap_DPO_AUTO_OP_B
	@rm -rf $(BDW_WORKLIB)/jobs/sim.DPO_AUTO_OP_B.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.DPO_AUTO_OP_B
	@rm -rf $(BDW_WORKLIB)/jobs/build.DPO_AUTO_OP_B


#########################################################
## Start of the rule set for sim_config DPO_AUTO_OP_V
#########################################################


hls_DPO_AUTO_OP_V:  
	$(MAKE) -j1 hls_dut_DPO_AUTO_OP



cynth_DPO_AUTO_OP_V:  
	$(MAKE) -j1 hlsc_dut_DPO_AUTO_OP

hls_clean_DPO_AUTO_OP_V: clean_hls_DPO_AUTO_OP_V

cynth_clean_DPO_AUTO_OP_V: hls_clean_DPO_AUTO_OP_V

clean_hls_DPO_AUTO_OP_V: $(addprefix clean_, hls_dut_DPO_AUTO_OP) 

clean_cynth_DPO_AUTO_OP_V: clean_hls_DPO_AUTO_OP_V

prebuild_DPO_AUTO_OP_V: bdw_prebuild_wrappers  
	$(MAKE) -j1 hls_dut_DPO_AUTO_OP

ifeq ($(CWBExec_build),1)

dbg_build_DPO_AUTO_OP_V:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=DPO_AUTO_OP_V
	@$(MAKE) BDW_DEBUG=1 build_DPO_AUTO_OP_V


build_DPO_AUTO_OP_V build_DPO_AUTO_OP_V_sub: bdw_prebuild_wrappers  
	$(MAKE) -j1 CWBExec_hls=1 hls_dut_DPO_AUTO_OP
	@$(MAKE) siminfo BDW_SIM_CONFIG=DPO_AUTO_OP_V
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=DPO_AUTO_OP_V BDW_GENDEPS=1

else
.PHONY: build_DPO_AUTO_OP_V
.PHONY: dbg_build_DPO_AUTO_OP_V

dbg_build_DPO_AUTO_OP_V:
	@bdw_exec -jobproject project.tcl -job dbg_build.DPO_AUTO_OP_V $(MAKE) CWBExec_build=1 dbg_build_DPO_AUTO_OP_V

build_DPO_AUTO_OP_V:
	@bdw_exec -jobproject project.tcl -job build.DPO_AUTO_OP_V $(MAKE) CWBExec_build=1 build_DPO_AUTO_OP_V

build_DPO_AUTO_OP_V_sub:
	@bdw_exec -jobproject project.tcl -job build.DPO_AUTO_OP_V.s $(MAKE) CWBExec_build=1 build_DPO_AUTO_OP_V_sub
endif


ifeq ($(CWBExec_sim),1)
sim_DPO_AUTO_OP_V sim_sub_DPO_AUTO_OP_V: build_DPO_AUTO_OP_V_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=DPO_AUTO_OP_V 

else
.PHONY: sim_DPO_AUTO_OP_V

sim_DPO_AUTO_OP_V:
	@bdw_exec -jobproject project.tcl -job sim.DPO_AUTO_OP_V $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_DPO_AUTO_OP_V 

sim_sub_DPO_AUTO_OP_V:
	@bdw_exec -jobproject project.tcl -job sim_sub.DPO_AUTO_OP_V.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_DPO_AUTO_OP_V 
endif


kill_sim_DPO_AUTO_OP_V:
	@bdw_kill -job sim.DPO_AUTO_OP_V
	@bdw_kill -job sim.DPO_AUTO_OP_V.s


catlog_DPO_AUTO_OP_V: catVLGLog_dut_DPO_AUTO_OP
debug_DPO_AUTO_OP_V: 
	@$(MAKE) BDW_DEBUG=1 build_DPO_AUTO_OP_V
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=DPO_AUTO_OP_V RUN_DEBUGGER=1
    
ifeq ($(CWBExec_view),1)
view_DPO_AUTO_OP_V:
	@if [ -e $(BDW_WORKLIB)/sims/DPO_AUTO_OP_V/verilog.vcd ]; then \
	bdw_view_waveform -project project.tcl -simconfig DPO_AUTO_OP_V ;\
	else   \
	$(MAKE) sim_DPO_AUTO_OP_V ;\
	bdw_view_waveform -project project.tcl -simconfig DPO_AUTO_OP_V ;\
    fi
else
view_DPO_AUTO_OP_V:
	@bdw_exec -jobproject project.tcl -job view.DPO_AUTO_OP_V $(MAKE) CWBExec_view=1 view_DPO_AUTO_OP_V
endif
    


clean_wrap_DPO_AUTO_OP_V:
	@rm -f $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/DPO_AUTO_OP_V $(BDW_WORKLIB)/sims/DPO_AUTO_OP_V/sim_DPO_AUTO_OP_V.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=DPO_AUTO_OP_V

clean_DPO_AUTO_OP_V: clean_hls_DPO_AUTO_OP_V clean_sim_DPO_AUTO_OP_V

clean_sim_DPO_AUTO_OP_V: clean_wrap_DPO_AUTO_OP_V
	@rm -rf $(BDW_WORKLIB)/jobs/sim.DPO_AUTO_OP_V.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.DPO_AUTO_OP_V
	@rm -rf $(BDW_WORKLIB)/jobs/build.DPO_AUTO_OP_V


$(BDW_WORKLIB)/sims/top_DPO_AUTO_OP_V.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project project.tcl -simconfig DPO_AUTO_OP_V -top top



#########################################################
## Start of the rule set for sim_config DPO_AUTO_EXPR_B
#########################################################


hls_DPO_AUTO_EXPR_B: 



cynth_DPO_AUTO_EXPR_B: 

hls_clean_DPO_AUTO_EXPR_B: clean_hls_DPO_AUTO_EXPR_B

cynth_clean_DPO_AUTO_EXPR_B: hls_clean_DPO_AUTO_EXPR_B

clean_hls_DPO_AUTO_EXPR_B: $(addprefix clean_, ) 

clean_cynth_DPO_AUTO_EXPR_B: clean_hls_DPO_AUTO_EXPR_B

prebuild_DPO_AUTO_EXPR_B: bdw_prebuild_wrappers 

ifeq ($(CWBExec_build),1)

dbg_build_DPO_AUTO_EXPR_B:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=DPO_AUTO_EXPR_B
	@$(MAKE) BDW_DEBUG=1 build_DPO_AUTO_EXPR_B


build_DPO_AUTO_EXPR_B build_DPO_AUTO_EXPR_B_sub: bdw_prebuild_wrappers 
	@$(MAKE) siminfo BDW_SIM_CONFIG=DPO_AUTO_EXPR_B
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=DPO_AUTO_EXPR_B BDW_GENDEPS=1

else
.PHONY: build_DPO_AUTO_EXPR_B
.PHONY: dbg_build_DPO_AUTO_EXPR_B

dbg_build_DPO_AUTO_EXPR_B:
	@bdw_exec -jobproject project.tcl -job dbg_build.DPO_AUTO_EXPR_B $(MAKE) CWBExec_build=1 dbg_build_DPO_AUTO_EXPR_B

build_DPO_AUTO_EXPR_B:
	@bdw_exec -jobproject project.tcl -job build.DPO_AUTO_EXPR_B $(MAKE) CWBExec_build=1 build_DPO_AUTO_EXPR_B

build_DPO_AUTO_EXPR_B_sub:
	@bdw_exec -jobproject project.tcl -job build.DPO_AUTO_EXPR_B.s $(MAKE) CWBExec_build=1 build_DPO_AUTO_EXPR_B_sub
endif


ifeq ($(CWBExec_sim),1)
sim_DPO_AUTO_EXPR_B sim_sub_DPO_AUTO_EXPR_B: build_DPO_AUTO_EXPR_B_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=DPO_AUTO_EXPR_B 

else
.PHONY: sim_DPO_AUTO_EXPR_B

sim_DPO_AUTO_EXPR_B:
	@bdw_exec -jobproject project.tcl -job sim.DPO_AUTO_EXPR_B $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_DPO_AUTO_EXPR_B 

sim_sub_DPO_AUTO_EXPR_B:
	@bdw_exec -jobproject project.tcl -job sim_sub.DPO_AUTO_EXPR_B.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_DPO_AUTO_EXPR_B 
endif


kill_sim_DPO_AUTO_EXPR_B:
	@bdw_kill -job sim.DPO_AUTO_EXPR_B
	@bdw_kill -job sim.DPO_AUTO_EXPR_B.s


catlog_DPO_AUTO_EXPR_B: 
debug_DPO_AUTO_EXPR_B: 
	@$(MAKE) BDW_DEBUG=1 build_DPO_AUTO_EXPR_B
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=DPO_AUTO_EXPR_B RUN_DEBUGGER=1
    
ifeq ($(CWBExec_view),1)
view_DPO_AUTO_EXPR_B:
	@if [ -e $(BDW_WORKLIB)/sims/DPO_AUTO_EXPR_B/systemc.vcd ]; then \
	bdw_view_waveform -project project.tcl -simconfig DPO_AUTO_EXPR_B ;\
	else   \
	$(MAKE) sim_DPO_AUTO_EXPR_B ;\
	bdw_view_waveform -project project.tcl -simconfig DPO_AUTO_EXPR_B ;\
    fi
else
view_DPO_AUTO_EXPR_B:
	@bdw_exec -jobproject project.tcl -job view.DPO_AUTO_EXPR_B $(MAKE) CWBExec_view=1 view_DPO_AUTO_EXPR_B
endif
    


clean_wrap_DPO_AUTO_EXPR_B:
	@rm -f 
	@rm -rf $(BDW_WORKLIB)/sims/DPO_AUTO_EXPR_B $(BDW_WORKLIB)/sims/DPO_AUTO_EXPR_B/sim_DPO_AUTO_EXPR_B
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=DPO_AUTO_EXPR_B

clean_DPO_AUTO_EXPR_B: clean_hls_DPO_AUTO_EXPR_B clean_sim_DPO_AUTO_EXPR_B

clean_sim_DPO_AUTO_EXPR_B: clean_wrap_DPO_AUTO_EXPR_B
	@rm -rf $(BDW_WORKLIB)/jobs/sim.DPO_AUTO_EXPR_B.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.DPO_AUTO_EXPR_B
	@rm -rf $(BDW_WORKLIB)/jobs/build.DPO_AUTO_EXPR_B


#########################################################
## Start of the rule set for sim_config DPO_AUTO_EXPR_V
#########################################################


hls_DPO_AUTO_EXPR_V:  
	$(MAKE) -j1 hls_dut_DPO_AUTO_EXPR



cynth_DPO_AUTO_EXPR_V:  
	$(MAKE) -j1 hlsc_dut_DPO_AUTO_EXPR

hls_clean_DPO_AUTO_EXPR_V: clean_hls_DPO_AUTO_EXPR_V

cynth_clean_DPO_AUTO_EXPR_V: hls_clean_DPO_AUTO_EXPR_V

clean_hls_DPO_AUTO_EXPR_V: $(addprefix clean_, hls_dut_DPO_AUTO_EXPR) 

clean_cynth_DPO_AUTO_EXPR_V: clean_hls_DPO_AUTO_EXPR_V

prebuild_DPO_AUTO_EXPR_V: bdw_prebuild_wrappers  
	$(MAKE) -j1 hls_dut_DPO_AUTO_EXPR

ifeq ($(CWBExec_build),1)

dbg_build_DPO_AUTO_EXPR_V:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=DPO_AUTO_EXPR_V
	@$(MAKE) BDW_DEBUG=1 build_DPO_AUTO_EXPR_V


build_DPO_AUTO_EXPR_V build_DPO_AUTO_EXPR_V_sub: bdw_prebuild_wrappers  
	$(MAKE) -j1 CWBExec_hls=1 hls_dut_DPO_AUTO_EXPR
	@$(MAKE) siminfo BDW_SIM_CONFIG=DPO_AUTO_EXPR_V
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=DPO_AUTO_EXPR_V BDW_GENDEPS=1

else
.PHONY: build_DPO_AUTO_EXPR_V
.PHONY: dbg_build_DPO_AUTO_EXPR_V

dbg_build_DPO_AUTO_EXPR_V:
	@bdw_exec -jobproject project.tcl -job dbg_build.DPO_AUTO_EXPR_V $(MAKE) CWBExec_build=1 dbg_build_DPO_AUTO_EXPR_V

build_DPO_AUTO_EXPR_V:
	@bdw_exec -jobproject project.tcl -job build.DPO_AUTO_EXPR_V $(MAKE) CWBExec_build=1 build_DPO_AUTO_EXPR_V

build_DPO_AUTO_EXPR_V_sub:
	@bdw_exec -jobproject project.tcl -job build.DPO_AUTO_EXPR_V.s $(MAKE) CWBExec_build=1 build_DPO_AUTO_EXPR_V_sub
endif


ifeq ($(CWBExec_sim),1)
sim_DPO_AUTO_EXPR_V sim_sub_DPO_AUTO_EXPR_V: build_DPO_AUTO_EXPR_V_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=DPO_AUTO_EXPR_V 

else
.PHONY: sim_DPO_AUTO_EXPR_V

sim_DPO_AUTO_EXPR_V:
	@bdw_exec -jobproject project.tcl -job sim.DPO_AUTO_EXPR_V $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_DPO_AUTO_EXPR_V 

sim_sub_DPO_AUTO_EXPR_V:
	@bdw_exec -jobproject project.tcl -job sim_sub.DPO_AUTO_EXPR_V.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_DPO_AUTO_EXPR_V 
endif


kill_sim_DPO_AUTO_EXPR_V:
	@bdw_kill -job sim.DPO_AUTO_EXPR_V
	@bdw_kill -job sim.DPO_AUTO_EXPR_V.s


catlog_DPO_AUTO_EXPR_V: catVLGLog_dut_DPO_AUTO_EXPR
debug_DPO_AUTO_EXPR_V: 
	@$(MAKE) BDW_DEBUG=1 build_DPO_AUTO_EXPR_V
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=DPO_AUTO_EXPR_V RUN_DEBUGGER=1
    
ifeq ($(CWBExec_view),1)
view_DPO_AUTO_EXPR_V:
	@if [ -e $(BDW_WORKLIB)/sims/DPO_AUTO_EXPR_V/verilog.vcd ]; then \
	bdw_view_waveform -project project.tcl -simconfig DPO_AUTO_EXPR_V ;\
	else   \
	$(MAKE) sim_DPO_AUTO_EXPR_V ;\
	bdw_view_waveform -project project.tcl -simconfig DPO_AUTO_EXPR_V ;\
    fi
else
view_DPO_AUTO_EXPR_V:
	@bdw_exec -jobproject project.tcl -job view.DPO_AUTO_EXPR_V $(MAKE) CWBExec_view=1 view_DPO_AUTO_EXPR_V
endif
    


clean_wrap_DPO_AUTO_EXPR_V:
	@rm -f $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/DPO_AUTO_EXPR_V $(BDW_WORKLIB)/sims/DPO_AUTO_EXPR_V/sim_DPO_AUTO_EXPR_V.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=DPO_AUTO_EXPR_V

clean_DPO_AUTO_EXPR_V: clean_hls_DPO_AUTO_EXPR_V clean_sim_DPO_AUTO_EXPR_V

clean_sim_DPO_AUTO_EXPR_V: clean_wrap_DPO_AUTO_EXPR_V
	@rm -rf $(BDW_WORKLIB)/jobs/sim.DPO_AUTO_EXPR_V.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.DPO_AUTO_EXPR_V
	@rm -rf $(BDW_WORKLIB)/jobs/build.DPO_AUTO_EXPR_V


$(BDW_WORKLIB)/sims/top_DPO_AUTO_EXPR_V.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project project.tcl -simconfig DPO_AUTO_EXPR_V -top top



#########################################################
## Start of the rule set for sim_config DPO_REGION_B
#########################################################


hls_DPO_REGION_B: 



cynth_DPO_REGION_B: 

hls_clean_DPO_REGION_B: clean_hls_DPO_REGION_B

cynth_clean_DPO_REGION_B: hls_clean_DPO_REGION_B

clean_hls_DPO_REGION_B: $(addprefix clean_, ) 

clean_cynth_DPO_REGION_B: clean_hls_DPO_REGION_B

prebuild_DPO_REGION_B: bdw_prebuild_wrappers 

ifeq ($(CWBExec_build),1)

dbg_build_DPO_REGION_B:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=DPO_REGION_B
	@$(MAKE) BDW_DEBUG=1 build_DPO_REGION_B


build_DPO_REGION_B build_DPO_REGION_B_sub: bdw_prebuild_wrappers 
	@$(MAKE) siminfo BDW_SIM_CONFIG=DPO_REGION_B
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=DPO_REGION_B BDW_GENDEPS=1

else
.PHONY: build_DPO_REGION_B
.PHONY: dbg_build_DPO_REGION_B

dbg_build_DPO_REGION_B:
	@bdw_exec -jobproject project.tcl -job dbg_build.DPO_REGION_B $(MAKE) CWBExec_build=1 dbg_build_DPO_REGION_B

build_DPO_REGION_B:
	@bdw_exec -jobproject project.tcl -job build.DPO_REGION_B $(MAKE) CWBExec_build=1 build_DPO_REGION_B

build_DPO_REGION_B_sub:
	@bdw_exec -jobproject project.tcl -job build.DPO_REGION_B.s $(MAKE) CWBExec_build=1 build_DPO_REGION_B_sub
endif


ifeq ($(CWBExec_sim),1)
sim_DPO_REGION_B sim_sub_DPO_REGION_B: build_DPO_REGION_B_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=DPO_REGION_B 

else
.PHONY: sim_DPO_REGION_B

sim_DPO_REGION_B:
	@bdw_exec -jobproject project.tcl -job sim.DPO_REGION_B $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_DPO_REGION_B 

sim_sub_DPO_REGION_B:
	@bdw_exec -jobproject project.tcl -job sim_sub.DPO_REGION_B.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_DPO_REGION_B 
endif


kill_sim_DPO_REGION_B:
	@bdw_kill -job sim.DPO_REGION_B
	@bdw_kill -job sim.DPO_REGION_B.s


catlog_DPO_REGION_B: 
debug_DPO_REGION_B: 
	@$(MAKE) BDW_DEBUG=1 build_DPO_REGION_B
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=DPO_REGION_B RUN_DEBUGGER=1
    
ifeq ($(CWBExec_view),1)
view_DPO_REGION_B:
	@if [ -e $(BDW_WORKLIB)/sims/DPO_REGION_B/systemc.vcd ]; then \
	bdw_view_waveform -project project.tcl -simconfig DPO_REGION_B ;\
	else   \
	$(MAKE) sim_DPO_REGION_B ;\
	bdw_view_waveform -project project.tcl -simconfig DPO_REGION_B ;\
    fi
else
view_DPO_REGION_B:
	@bdw_exec -jobproject project.tcl -job view.DPO_REGION_B $(MAKE) CWBExec_view=1 view_DPO_REGION_B
endif
    


clean_wrap_DPO_REGION_B:
	@rm -f 
	@rm -rf $(BDW_WORKLIB)/sims/DPO_REGION_B $(BDW_WORKLIB)/sims/DPO_REGION_B/sim_DPO_REGION_B
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=DPO_REGION_B

clean_DPO_REGION_B: clean_hls_DPO_REGION_B clean_sim_DPO_REGION_B

clean_sim_DPO_REGION_B: clean_wrap_DPO_REGION_B
	@rm -rf $(BDW_WORKLIB)/jobs/sim.DPO_REGION_B.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.DPO_REGION_B
	@rm -rf $(BDW_WORKLIB)/jobs/build.DPO_REGION_B


#########################################################
## Start of the rule set for sim_config DPO_REGION_V
#########################################################


hls_DPO_REGION_V:  
	$(MAKE) -j1 hls_dut_DPO_REGION



cynth_DPO_REGION_V:  
	$(MAKE) -j1 hlsc_dut_DPO_REGION

hls_clean_DPO_REGION_V: clean_hls_DPO_REGION_V

cynth_clean_DPO_REGION_V: hls_clean_DPO_REGION_V

clean_hls_DPO_REGION_V: $(addprefix clean_, hls_dut_DPO_REGION) 

clean_cynth_DPO_REGION_V: clean_hls_DPO_REGION_V

prebuild_DPO_REGION_V: bdw_prebuild_wrappers  
	$(MAKE) -j1 hls_dut_DPO_REGION

ifeq ($(CWBExec_build),1)

dbg_build_DPO_REGION_V:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=DPO_REGION_V
	@$(MAKE) BDW_DEBUG=1 build_DPO_REGION_V


build_DPO_REGION_V build_DPO_REGION_V_sub: bdw_prebuild_wrappers  
	$(MAKE) -j1 CWBExec_hls=1 hls_dut_DPO_REGION
	@$(MAKE) siminfo BDW_SIM_CONFIG=DPO_REGION_V
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=DPO_REGION_V BDW_GENDEPS=1

else
.PHONY: build_DPO_REGION_V
.PHONY: dbg_build_DPO_REGION_V

dbg_build_DPO_REGION_V:
	@bdw_exec -jobproject project.tcl -job dbg_build.DPO_REGION_V $(MAKE) CWBExec_build=1 dbg_build_DPO_REGION_V

build_DPO_REGION_V:
	@bdw_exec -jobproject project.tcl -job build.DPO_REGION_V $(MAKE) CWBExec_build=1 build_DPO_REGION_V

build_DPO_REGION_V_sub:
	@bdw_exec -jobproject project.tcl -job build.DPO_REGION_V.s $(MAKE) CWBExec_build=1 build_DPO_REGION_V_sub
endif


ifeq ($(CWBExec_sim),1)
sim_DPO_REGION_V sim_sub_DPO_REGION_V: build_DPO_REGION_V_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=DPO_REGION_V 

else
.PHONY: sim_DPO_REGION_V

sim_DPO_REGION_V:
	@bdw_exec -jobproject project.tcl -job sim.DPO_REGION_V $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_DPO_REGION_V 

sim_sub_DPO_REGION_V:
	@bdw_exec -jobproject project.tcl -job sim_sub.DPO_REGION_V.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_DPO_REGION_V 
endif


kill_sim_DPO_REGION_V:
	@bdw_kill -job sim.DPO_REGION_V
	@bdw_kill -job sim.DPO_REGION_V.s


catlog_DPO_REGION_V: catVLGLog_dut_DPO_REGION
debug_DPO_REGION_V: 
	@$(MAKE) BDW_DEBUG=1 build_DPO_REGION_V
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=DPO_REGION_V RUN_DEBUGGER=1
    
ifeq ($(CWBExec_view),1)
view_DPO_REGION_V:
	@if [ -e $(BDW_WORKLIB)/sims/DPO_REGION_V/verilog.vcd ]; then \
	bdw_view_waveform -project project.tcl -simconfig DPO_REGION_V ;\
	else   \
	$(MAKE) sim_DPO_REGION_V ;\
	bdw_view_waveform -project project.tcl -simconfig DPO_REGION_V ;\
    fi
else
view_DPO_REGION_V:
	@bdw_exec -jobproject project.tcl -job view.DPO_REGION_V $(MAKE) CWBExec_view=1 view_DPO_REGION_V
endif
    


clean_wrap_DPO_REGION_V:
	@rm -f $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/DPO_REGION_V $(BDW_WORKLIB)/sims/DPO_REGION_V/sim_DPO_REGION_V.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=DPO_REGION_V

clean_DPO_REGION_V: clean_hls_DPO_REGION_V clean_sim_DPO_REGION_V

clean_sim_DPO_REGION_V: clean_wrap_DPO_REGION_V
	@rm -rf $(BDW_WORKLIB)/jobs/sim.DPO_REGION_V.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.DPO_REGION_V
	@rm -rf $(BDW_WORKLIB)/jobs/build.DPO_REGION_V


$(BDW_WORKLIB)/sims/top_DPO_REGION_V.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project project.tcl -simconfig DPO_REGION_V -top top



#########################################################
## Start of the rule set for sim_config FLAT_UNROLL_ALL_FAST_B
#########################################################


hls_FLAT_UNROLL_ALL_FAST_B: 



cynth_FLAT_UNROLL_ALL_FAST_B: 

hls_clean_FLAT_UNROLL_ALL_FAST_B: clean_hls_FLAT_UNROLL_ALL_FAST_B

cynth_clean_FLAT_UNROLL_ALL_FAST_B: hls_clean_FLAT_UNROLL_ALL_FAST_B

clean_hls_FLAT_UNROLL_ALL_FAST_B: $(addprefix clean_, ) 

clean_cynth_FLAT_UNROLL_ALL_FAST_B: clean_hls_FLAT_UNROLL_ALL_FAST_B

prebuild_FLAT_UNROLL_ALL_FAST_B: bdw_prebuild_wrappers 

ifeq ($(CWBExec_build),1)

dbg_build_FLAT_UNROLL_ALL_FAST_B:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=FLAT_UNROLL_ALL_FAST_B
	@$(MAKE) BDW_DEBUG=1 build_FLAT_UNROLL_ALL_FAST_B


build_FLAT_UNROLL_ALL_FAST_B build_FLAT_UNROLL_ALL_FAST_B_sub: bdw_prebuild_wrappers 
	@$(MAKE) siminfo BDW_SIM_CONFIG=FLAT_UNROLL_ALL_FAST_B
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=FLAT_UNROLL_ALL_FAST_B BDW_GENDEPS=1

else
.PHONY: build_FLAT_UNROLL_ALL_FAST_B
.PHONY: dbg_build_FLAT_UNROLL_ALL_FAST_B

dbg_build_FLAT_UNROLL_ALL_FAST_B:
	@bdw_exec -jobproject project.tcl -job dbg_build.FLAT_UNROLL_ALL_FAST_B $(MAKE) CWBExec_build=1 dbg_build_FLAT_UNROLL_ALL_FAST_B

build_FLAT_UNROLL_ALL_FAST_B:
	@bdw_exec -jobproject project.tcl -job build.FLAT_UNROLL_ALL_FAST_B $(MAKE) CWBExec_build=1 build_FLAT_UNROLL_ALL_FAST_B

build_FLAT_UNROLL_ALL_FAST_B_sub:
	@bdw_exec -jobproject project.tcl -job build.FLAT_UNROLL_ALL_FAST_B.s $(MAKE) CWBExec_build=1 build_FLAT_UNROLL_ALL_FAST_B_sub
endif


ifeq ($(CWBExec_sim),1)
sim_FLAT_UNROLL_ALL_FAST_B sim_sub_FLAT_UNROLL_ALL_FAST_B: build_FLAT_UNROLL_ALL_FAST_B_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=FLAT_UNROLL_ALL_FAST_B 

else
.PHONY: sim_FLAT_UNROLL_ALL_FAST_B

sim_FLAT_UNROLL_ALL_FAST_B:
	@bdw_exec -jobproject project.tcl -job sim.FLAT_UNROLL_ALL_FAST_B $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_FLAT_UNROLL_ALL_FAST_B 

sim_sub_FLAT_UNROLL_ALL_FAST_B:
	@bdw_exec -jobproject project.tcl -job sim_sub.FLAT_UNROLL_ALL_FAST_B.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_FLAT_UNROLL_ALL_FAST_B 
endif


kill_sim_FLAT_UNROLL_ALL_FAST_B:
	@bdw_kill -job sim.FLAT_UNROLL_ALL_FAST_B
	@bdw_kill -job sim.FLAT_UNROLL_ALL_FAST_B.s


catlog_FLAT_UNROLL_ALL_FAST_B: 
debug_FLAT_UNROLL_ALL_FAST_B: 
	@$(MAKE) BDW_DEBUG=1 build_FLAT_UNROLL_ALL_FAST_B
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=FLAT_UNROLL_ALL_FAST_B RUN_DEBUGGER=1
    
ifeq ($(CWBExec_view),1)
view_FLAT_UNROLL_ALL_FAST_B:
	@if [ -e $(BDW_WORKLIB)/sims/FLAT_UNROLL_ALL_FAST_B/systemc.vcd ]; then \
	bdw_view_waveform -project project.tcl -simconfig FLAT_UNROLL_ALL_FAST_B ;\
	else   \
	$(MAKE) sim_FLAT_UNROLL_ALL_FAST_B ;\
	bdw_view_waveform -project project.tcl -simconfig FLAT_UNROLL_ALL_FAST_B ;\
    fi
else
view_FLAT_UNROLL_ALL_FAST_B:
	@bdw_exec -jobproject project.tcl -job view.FLAT_UNROLL_ALL_FAST_B $(MAKE) CWBExec_view=1 view_FLAT_UNROLL_ALL_FAST_B
endif
    


clean_wrap_FLAT_UNROLL_ALL_FAST_B:
	@rm -f 
	@rm -rf $(BDW_WORKLIB)/sims/FLAT_UNROLL_ALL_FAST_B $(BDW_WORKLIB)/sims/FLAT_UNROLL_ALL_FAST_B/sim_FLAT_UNROLL_ALL_FAST_B
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=FLAT_UNROLL_ALL_FAST_B

clean_FLAT_UNROLL_ALL_FAST_B: clean_hls_FLAT_UNROLL_ALL_FAST_B clean_sim_FLAT_UNROLL_ALL_FAST_B

clean_sim_FLAT_UNROLL_ALL_FAST_B: clean_wrap_FLAT_UNROLL_ALL_FAST_B
	@rm -rf $(BDW_WORKLIB)/jobs/sim.FLAT_UNROLL_ALL_FAST_B.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.FLAT_UNROLL_ALL_FAST_B
	@rm -rf $(BDW_WORKLIB)/jobs/build.FLAT_UNROLL_ALL_FAST_B


#########################################################
## Start of the rule set for sim_config FLAT_UNROLL_ALL_FAST_V
#########################################################


hls_FLAT_UNROLL_ALL_FAST_V:  
	$(MAKE) -j1 hls_dut_FLAT_UNROLL_ALL_FAST



cynth_FLAT_UNROLL_ALL_FAST_V:  
	$(MAKE) -j1 hlsc_dut_FLAT_UNROLL_ALL_FAST

hls_clean_FLAT_UNROLL_ALL_FAST_V: clean_hls_FLAT_UNROLL_ALL_FAST_V

cynth_clean_FLAT_UNROLL_ALL_FAST_V: hls_clean_FLAT_UNROLL_ALL_FAST_V

clean_hls_FLAT_UNROLL_ALL_FAST_V: $(addprefix clean_, hls_dut_FLAT_UNROLL_ALL_FAST) 

clean_cynth_FLAT_UNROLL_ALL_FAST_V: clean_hls_FLAT_UNROLL_ALL_FAST_V

prebuild_FLAT_UNROLL_ALL_FAST_V: bdw_prebuild_wrappers  
	$(MAKE) -j1 hls_dut_FLAT_UNROLL_ALL_FAST

ifeq ($(CWBExec_build),1)

dbg_build_FLAT_UNROLL_ALL_FAST_V:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=FLAT_UNROLL_ALL_FAST_V
	@$(MAKE) BDW_DEBUG=1 build_FLAT_UNROLL_ALL_FAST_V


build_FLAT_UNROLL_ALL_FAST_V build_FLAT_UNROLL_ALL_FAST_V_sub: bdw_prebuild_wrappers  
	$(MAKE) -j1 CWBExec_hls=1 hls_dut_FLAT_UNROLL_ALL_FAST
	@$(MAKE) siminfo BDW_SIM_CONFIG=FLAT_UNROLL_ALL_FAST_V
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=FLAT_UNROLL_ALL_FAST_V BDW_GENDEPS=1

else
.PHONY: build_FLAT_UNROLL_ALL_FAST_V
.PHONY: dbg_build_FLAT_UNROLL_ALL_FAST_V

dbg_build_FLAT_UNROLL_ALL_FAST_V:
	@bdw_exec -jobproject project.tcl -job dbg_build.FLAT_UNROLL_ALL_FAST_V $(MAKE) CWBExec_build=1 dbg_build_FLAT_UNROLL_ALL_FAST_V

build_FLAT_UNROLL_ALL_FAST_V:
	@bdw_exec -jobproject project.tcl -job build.FLAT_UNROLL_ALL_FAST_V $(MAKE) CWBExec_build=1 build_FLAT_UNROLL_ALL_FAST_V

build_FLAT_UNROLL_ALL_FAST_V_sub:
	@bdw_exec -jobproject project.tcl -job build.FLAT_UNROLL_ALL_FAST_V.s $(MAKE) CWBExec_build=1 build_FLAT_UNROLL_ALL_FAST_V_sub
endif


ifeq ($(CWBExec_sim),1)
sim_FLAT_UNROLL_ALL_FAST_V sim_sub_FLAT_UNROLL_ALL_FAST_V: build_FLAT_UNROLL_ALL_FAST_V_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=FLAT_UNROLL_ALL_FAST_V 

else
.PHONY: sim_FLAT_UNROLL_ALL_FAST_V

sim_FLAT_UNROLL_ALL_FAST_V:
	@bdw_exec -jobproject project.tcl -job sim.FLAT_UNROLL_ALL_FAST_V $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_FLAT_UNROLL_ALL_FAST_V 

sim_sub_FLAT_UNROLL_ALL_FAST_V:
	@bdw_exec -jobproject project.tcl -job sim_sub.FLAT_UNROLL_ALL_FAST_V.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_FLAT_UNROLL_ALL_FAST_V 
endif


kill_sim_FLAT_UNROLL_ALL_FAST_V:
	@bdw_kill -job sim.FLAT_UNROLL_ALL_FAST_V
	@bdw_kill -job sim.FLAT_UNROLL_ALL_FAST_V.s


catlog_FLAT_UNROLL_ALL_FAST_V: catVLGLog_dut_FLAT_UNROLL_ALL_FAST
debug_FLAT_UNROLL_ALL_FAST_V: 
	@$(MAKE) BDW_DEBUG=1 build_FLAT_UNROLL_ALL_FAST_V
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=FLAT_UNROLL_ALL_FAST_V RUN_DEBUGGER=1
    
ifeq ($(CWBExec_view),1)
view_FLAT_UNROLL_ALL_FAST_V:
	@if [ -e $(BDW_WORKLIB)/sims/FLAT_UNROLL_ALL_FAST_V/verilog.vcd ]; then \
	bdw_view_waveform -project project.tcl -simconfig FLAT_UNROLL_ALL_FAST_V ;\
	else   \
	$(MAKE) sim_FLAT_UNROLL_ALL_FAST_V ;\
	bdw_view_waveform -project project.tcl -simconfig FLAT_UNROLL_ALL_FAST_V ;\
    fi
else
view_FLAT_UNROLL_ALL_FAST_V:
	@bdw_exec -jobproject project.tcl -job view.FLAT_UNROLL_ALL_FAST_V $(MAKE) CWBExec_view=1 view_FLAT_UNROLL_ALL_FAST_V
endif
    


clean_wrap_FLAT_UNROLL_ALL_FAST_V:
	@rm -f $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/FLAT_UNROLL_ALL_FAST_V $(BDW_WORKLIB)/sims/FLAT_UNROLL_ALL_FAST_V/sim_FLAT_UNROLL_ALL_FAST_V.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=FLAT_UNROLL_ALL_FAST_V

clean_FLAT_UNROLL_ALL_FAST_V: clean_hls_FLAT_UNROLL_ALL_FAST_V clean_sim_FLAT_UNROLL_ALL_FAST_V

clean_sim_FLAT_UNROLL_ALL_FAST_V: clean_wrap_FLAT_UNROLL_ALL_FAST_V
	@rm -rf $(BDW_WORKLIB)/jobs/sim.FLAT_UNROLL_ALL_FAST_V.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.FLAT_UNROLL_ALL_FAST_V
	@rm -rf $(BDW_WORKLIB)/jobs/build.FLAT_UNROLL_ALL_FAST_V


$(BDW_WORKLIB)/sims/top_FLAT_UNROLL_ALL_FAST_V.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project project.tcl -simconfig FLAT_UNROLL_ALL_FAST_V -top top



#########################################################
## Start of the rule set for sim_config FLAT_UNROLL_ALL_B
#########################################################


hls_FLAT_UNROLL_ALL_B: 



cynth_FLAT_UNROLL_ALL_B: 

hls_clean_FLAT_UNROLL_ALL_B: clean_hls_FLAT_UNROLL_ALL_B

cynth_clean_FLAT_UNROLL_ALL_B: hls_clean_FLAT_UNROLL_ALL_B

clean_hls_FLAT_UNROLL_ALL_B: $(addprefix clean_, ) 

clean_cynth_FLAT_UNROLL_ALL_B: clean_hls_FLAT_UNROLL_ALL_B

prebuild_FLAT_UNROLL_ALL_B: bdw_prebuild_wrappers 

ifeq ($(CWBExec_build),1)

dbg_build_FLAT_UNROLL_ALL_B:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=FLAT_UNROLL_ALL_B
	@$(MAKE) BDW_DEBUG=1 build_FLAT_UNROLL_ALL_B


build_FLAT_UNROLL_ALL_B build_FLAT_UNROLL_ALL_B_sub: bdw_prebuild_wrappers 
	@$(MAKE) siminfo BDW_SIM_CONFIG=FLAT_UNROLL_ALL_B
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=FLAT_UNROLL_ALL_B BDW_GENDEPS=1

else
.PHONY: build_FLAT_UNROLL_ALL_B
.PHONY: dbg_build_FLAT_UNROLL_ALL_B

dbg_build_FLAT_UNROLL_ALL_B:
	@bdw_exec -jobproject project.tcl -job dbg_build.FLAT_UNROLL_ALL_B $(MAKE) CWBExec_build=1 dbg_build_FLAT_UNROLL_ALL_B

build_FLAT_UNROLL_ALL_B:
	@bdw_exec -jobproject project.tcl -job build.FLAT_UNROLL_ALL_B $(MAKE) CWBExec_build=1 build_FLAT_UNROLL_ALL_B

build_FLAT_UNROLL_ALL_B_sub:
	@bdw_exec -jobproject project.tcl -job build.FLAT_UNROLL_ALL_B.s $(MAKE) CWBExec_build=1 build_FLAT_UNROLL_ALL_B_sub
endif


ifeq ($(CWBExec_sim),1)
sim_FLAT_UNROLL_ALL_B sim_sub_FLAT_UNROLL_ALL_B: build_FLAT_UNROLL_ALL_B_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=FLAT_UNROLL_ALL_B 

else
.PHONY: sim_FLAT_UNROLL_ALL_B

sim_FLAT_UNROLL_ALL_B:
	@bdw_exec -jobproject project.tcl -job sim.FLAT_UNROLL_ALL_B $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_FLAT_UNROLL_ALL_B 

sim_sub_FLAT_UNROLL_ALL_B:
	@bdw_exec -jobproject project.tcl -job sim_sub.FLAT_UNROLL_ALL_B.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_FLAT_UNROLL_ALL_B 
endif


kill_sim_FLAT_UNROLL_ALL_B:
	@bdw_kill -job sim.FLAT_UNROLL_ALL_B
	@bdw_kill -job sim.FLAT_UNROLL_ALL_B.s


catlog_FLAT_UNROLL_ALL_B: 
debug_FLAT_UNROLL_ALL_B: 
	@$(MAKE) BDW_DEBUG=1 build_FLAT_UNROLL_ALL_B
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=FLAT_UNROLL_ALL_B RUN_DEBUGGER=1
    
ifeq ($(CWBExec_view),1)
view_FLAT_UNROLL_ALL_B:
	@if [ -e $(BDW_WORKLIB)/sims/FLAT_UNROLL_ALL_B/systemc.vcd ]; then \
	bdw_view_waveform -project project.tcl -simconfig FLAT_UNROLL_ALL_B ;\
	else   \
	$(MAKE) sim_FLAT_UNROLL_ALL_B ;\
	bdw_view_waveform -project project.tcl -simconfig FLAT_UNROLL_ALL_B ;\
    fi
else
view_FLAT_UNROLL_ALL_B:
	@bdw_exec -jobproject project.tcl -job view.FLAT_UNROLL_ALL_B $(MAKE) CWBExec_view=1 view_FLAT_UNROLL_ALL_B
endif
    


clean_wrap_FLAT_UNROLL_ALL_B:
	@rm -f 
	@rm -rf $(BDW_WORKLIB)/sims/FLAT_UNROLL_ALL_B $(BDW_WORKLIB)/sims/FLAT_UNROLL_ALL_B/sim_FLAT_UNROLL_ALL_B
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=FLAT_UNROLL_ALL_B

clean_FLAT_UNROLL_ALL_B: clean_hls_FLAT_UNROLL_ALL_B clean_sim_FLAT_UNROLL_ALL_B

clean_sim_FLAT_UNROLL_ALL_B: clean_wrap_FLAT_UNROLL_ALL_B
	@rm -rf $(BDW_WORKLIB)/jobs/sim.FLAT_UNROLL_ALL_B.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.FLAT_UNROLL_ALL_B
	@rm -rf $(BDW_WORKLIB)/jobs/build.FLAT_UNROLL_ALL_B


#########################################################
## Start of the rule set for sim_config FLAT_UNROLL_ALL_V
#########################################################


hls_FLAT_UNROLL_ALL_V:  
	$(MAKE) -j1 hls_dut_FLAT_UNROLL_ALL



cynth_FLAT_UNROLL_ALL_V:  
	$(MAKE) -j1 hlsc_dut_FLAT_UNROLL_ALL

hls_clean_FLAT_UNROLL_ALL_V: clean_hls_FLAT_UNROLL_ALL_V

cynth_clean_FLAT_UNROLL_ALL_V: hls_clean_FLAT_UNROLL_ALL_V

clean_hls_FLAT_UNROLL_ALL_V: $(addprefix clean_, hls_dut_FLAT_UNROLL_ALL) 

clean_cynth_FLAT_UNROLL_ALL_V: clean_hls_FLAT_UNROLL_ALL_V

prebuild_FLAT_UNROLL_ALL_V: bdw_prebuild_wrappers  
	$(MAKE) -j1 hls_dut_FLAT_UNROLL_ALL

ifeq ($(CWBExec_build),1)

dbg_build_FLAT_UNROLL_ALL_V:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=FLAT_UNROLL_ALL_V
	@$(MAKE) BDW_DEBUG=1 build_FLAT_UNROLL_ALL_V


build_FLAT_UNROLL_ALL_V build_FLAT_UNROLL_ALL_V_sub: bdw_prebuild_wrappers  
	$(MAKE) -j1 CWBExec_hls=1 hls_dut_FLAT_UNROLL_ALL
	@$(MAKE) siminfo BDW_SIM_CONFIG=FLAT_UNROLL_ALL_V
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=FLAT_UNROLL_ALL_V BDW_GENDEPS=1

else
.PHONY: build_FLAT_UNROLL_ALL_V
.PHONY: dbg_build_FLAT_UNROLL_ALL_V

dbg_build_FLAT_UNROLL_ALL_V:
	@bdw_exec -jobproject project.tcl -job dbg_build.FLAT_UNROLL_ALL_V $(MAKE) CWBExec_build=1 dbg_build_FLAT_UNROLL_ALL_V

build_FLAT_UNROLL_ALL_V:
	@bdw_exec -jobproject project.tcl -job build.FLAT_UNROLL_ALL_V $(MAKE) CWBExec_build=1 build_FLAT_UNROLL_ALL_V

build_FLAT_UNROLL_ALL_V_sub:
	@bdw_exec -jobproject project.tcl -job build.FLAT_UNROLL_ALL_V.s $(MAKE) CWBExec_build=1 build_FLAT_UNROLL_ALL_V_sub
endif


ifeq ($(CWBExec_sim),1)
sim_FLAT_UNROLL_ALL_V sim_sub_FLAT_UNROLL_ALL_V: build_FLAT_UNROLL_ALL_V_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=FLAT_UNROLL_ALL_V 

else
.PHONY: sim_FLAT_UNROLL_ALL_V

sim_FLAT_UNROLL_ALL_V:
	@bdw_exec -jobproject project.tcl -job sim.FLAT_UNROLL_ALL_V $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_FLAT_UNROLL_ALL_V 

sim_sub_FLAT_UNROLL_ALL_V:
	@bdw_exec -jobproject project.tcl -job sim_sub.FLAT_UNROLL_ALL_V.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_FLAT_UNROLL_ALL_V 
endif


kill_sim_FLAT_UNROLL_ALL_V:
	@bdw_kill -job sim.FLAT_UNROLL_ALL_V
	@bdw_kill -job sim.FLAT_UNROLL_ALL_V.s


catlog_FLAT_UNROLL_ALL_V: catVLGLog_dut_FLAT_UNROLL_ALL
debug_FLAT_UNROLL_ALL_V: 
	@$(MAKE) BDW_DEBUG=1 build_FLAT_UNROLL_ALL_V
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=FLAT_UNROLL_ALL_V RUN_DEBUGGER=1
    
ifeq ($(CWBExec_view),1)
view_FLAT_UNROLL_ALL_V:
	@if [ -e $(BDW_WORKLIB)/sims/FLAT_UNROLL_ALL_V/verilog.vcd ]; then \
	bdw_view_waveform -project project.tcl -simconfig FLAT_UNROLL_ALL_V ;\
	else   \
	$(MAKE) sim_FLAT_UNROLL_ALL_V ;\
	bdw_view_waveform -project project.tcl -simconfig FLAT_UNROLL_ALL_V ;\
    fi
else
view_FLAT_UNROLL_ALL_V:
	@bdw_exec -jobproject project.tcl -job view.FLAT_UNROLL_ALL_V $(MAKE) CWBExec_view=1 view_FLAT_UNROLL_ALL_V
endif
    


clean_wrap_FLAT_UNROLL_ALL_V:
	@rm -f $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/FLAT_UNROLL_ALL_V $(BDW_WORKLIB)/sims/FLAT_UNROLL_ALL_V/sim_FLAT_UNROLL_ALL_V.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=FLAT_UNROLL_ALL_V

clean_FLAT_UNROLL_ALL_V: clean_hls_FLAT_UNROLL_ALL_V clean_sim_FLAT_UNROLL_ALL_V

clean_sim_FLAT_UNROLL_ALL_V: clean_wrap_FLAT_UNROLL_ALL_V
	@rm -rf $(BDW_WORKLIB)/jobs/sim.FLAT_UNROLL_ALL_V.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.FLAT_UNROLL_ALL_V
	@rm -rf $(BDW_WORKLIB)/jobs/build.FLAT_UNROLL_ALL_V


$(BDW_WORKLIB)/sims/top_FLAT_UNROLL_ALL_V.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project project.tcl -simconfig FLAT_UNROLL_ALL_V -top top



#########################################################
## Start of the rule set for sim_config PIPELINE_B
#########################################################


hls_PIPELINE_B: 



cynth_PIPELINE_B: 

hls_clean_PIPELINE_B: clean_hls_PIPELINE_B

cynth_clean_PIPELINE_B: hls_clean_PIPELINE_B

clean_hls_PIPELINE_B: $(addprefix clean_, ) 

clean_cynth_PIPELINE_B: clean_hls_PIPELINE_B

prebuild_PIPELINE_B: bdw_prebuild_wrappers 

ifeq ($(CWBExec_build),1)

dbg_build_PIPELINE_B:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=PIPELINE_B
	@$(MAKE) BDW_DEBUG=1 build_PIPELINE_B


build_PIPELINE_B build_PIPELINE_B_sub: bdw_prebuild_wrappers 
	@$(MAKE) siminfo BDW_SIM_CONFIG=PIPELINE_B
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=PIPELINE_B BDW_GENDEPS=1

else
.PHONY: build_PIPELINE_B
.PHONY: dbg_build_PIPELINE_B

dbg_build_PIPELINE_B:
	@bdw_exec -jobproject project.tcl -job dbg_build.PIPELINE_B $(MAKE) CWBExec_build=1 dbg_build_PIPELINE_B

build_PIPELINE_B:
	@bdw_exec -jobproject project.tcl -job build.PIPELINE_B $(MAKE) CWBExec_build=1 build_PIPELINE_B

build_PIPELINE_B_sub:
	@bdw_exec -jobproject project.tcl -job build.PIPELINE_B.s $(MAKE) CWBExec_build=1 build_PIPELINE_B_sub
endif


ifeq ($(CWBExec_sim),1)
sim_PIPELINE_B sim_sub_PIPELINE_B: build_PIPELINE_B_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=PIPELINE_B 

else
.PHONY: sim_PIPELINE_B

sim_PIPELINE_B:
	@bdw_exec -jobproject project.tcl -job sim.PIPELINE_B $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_PIPELINE_B 

sim_sub_PIPELINE_B:
	@bdw_exec -jobproject project.tcl -job sim_sub.PIPELINE_B.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_PIPELINE_B 
endif


kill_sim_PIPELINE_B:
	@bdw_kill -job sim.PIPELINE_B
	@bdw_kill -job sim.PIPELINE_B.s


catlog_PIPELINE_B: 
debug_PIPELINE_B: 
	@$(MAKE) BDW_DEBUG=1 build_PIPELINE_B
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=PIPELINE_B RUN_DEBUGGER=1
    
ifeq ($(CWBExec_view),1)
view_PIPELINE_B:
	@if [ -e $(BDW_WORKLIB)/sims/PIPELINE_B/systemc.vcd ]; then \
	bdw_view_waveform -project project.tcl -simconfig PIPELINE_B ;\
	else   \
	$(MAKE) sim_PIPELINE_B ;\
	bdw_view_waveform -project project.tcl -simconfig PIPELINE_B ;\
    fi
else
view_PIPELINE_B:
	@bdw_exec -jobproject project.tcl -job view.PIPELINE_B $(MAKE) CWBExec_view=1 view_PIPELINE_B
endif
    


clean_wrap_PIPELINE_B:
	@rm -f 
	@rm -rf $(BDW_WORKLIB)/sims/PIPELINE_B $(BDW_WORKLIB)/sims/PIPELINE_B/sim_PIPELINE_B
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=PIPELINE_B

clean_PIPELINE_B: clean_hls_PIPELINE_B clean_sim_PIPELINE_B

clean_sim_PIPELINE_B: clean_wrap_PIPELINE_B
	@rm -rf $(BDW_WORKLIB)/jobs/sim.PIPELINE_B.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.PIPELINE_B
	@rm -rf $(BDW_WORKLIB)/jobs/build.PIPELINE_B


#########################################################
## Start of the rule set for sim_config PIPELINE_V
#########################################################


hls_PIPELINE_V:  
	$(MAKE) -j1 hls_dut_PIPELINE



cynth_PIPELINE_V:  
	$(MAKE) -j1 hlsc_dut_PIPELINE

hls_clean_PIPELINE_V: clean_hls_PIPELINE_V

cynth_clean_PIPELINE_V: hls_clean_PIPELINE_V

clean_hls_PIPELINE_V: $(addprefix clean_, hls_dut_PIPELINE) 

clean_cynth_PIPELINE_V: clean_hls_PIPELINE_V

prebuild_PIPELINE_V: bdw_prebuild_wrappers  
	$(MAKE) -j1 hls_dut_PIPELINE

ifeq ($(CWBExec_build),1)

dbg_build_PIPELINE_V:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=PIPELINE_V
	@$(MAKE) BDW_DEBUG=1 build_PIPELINE_V


build_PIPELINE_V build_PIPELINE_V_sub: bdw_prebuild_wrappers  
	$(MAKE) -j1 CWBExec_hls=1 hls_dut_PIPELINE
	@$(MAKE) siminfo BDW_SIM_CONFIG=PIPELINE_V
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=PIPELINE_V BDW_GENDEPS=1

else
.PHONY: build_PIPELINE_V
.PHONY: dbg_build_PIPELINE_V

dbg_build_PIPELINE_V:
	@bdw_exec -jobproject project.tcl -job dbg_build.PIPELINE_V $(MAKE) CWBExec_build=1 dbg_build_PIPELINE_V

build_PIPELINE_V:
	@bdw_exec -jobproject project.tcl -job build.PIPELINE_V $(MAKE) CWBExec_build=1 build_PIPELINE_V

build_PIPELINE_V_sub:
	@bdw_exec -jobproject project.tcl -job build.PIPELINE_V.s $(MAKE) CWBExec_build=1 build_PIPELINE_V_sub
endif


ifeq ($(CWBExec_sim),1)
sim_PIPELINE_V sim_sub_PIPELINE_V: build_PIPELINE_V_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=PIPELINE_V 

else
.PHONY: sim_PIPELINE_V

sim_PIPELINE_V:
	@bdw_exec -jobproject project.tcl -job sim.PIPELINE_V $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_PIPELINE_V 

sim_sub_PIPELINE_V:
	@bdw_exec -jobproject project.tcl -job sim_sub.PIPELINE_V.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_PIPELINE_V 
endif


kill_sim_PIPELINE_V:
	@bdw_kill -job sim.PIPELINE_V
	@bdw_kill -job sim.PIPELINE_V.s


catlog_PIPELINE_V: catVLGLog_dut_PIPELINE
debug_PIPELINE_V: 
	@$(MAKE) BDW_DEBUG=1 build_PIPELINE_V
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=PIPELINE_V RUN_DEBUGGER=1
    
ifeq ($(CWBExec_view),1)
view_PIPELINE_V:
	@if [ -e $(BDW_WORKLIB)/sims/PIPELINE_V/verilog.vcd ]; then \
	bdw_view_waveform -project project.tcl -simconfig PIPELINE_V ;\
	else   \
	$(MAKE) sim_PIPELINE_V ;\
	bdw_view_waveform -project project.tcl -simconfig PIPELINE_V ;\
    fi
else
view_PIPELINE_V:
	@bdw_exec -jobproject project.tcl -job view.PIPELINE_V $(MAKE) CWBExec_view=1 view_PIPELINE_V
endif
    


clean_wrap_PIPELINE_V:
	@rm -f $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/PIPELINE_V $(BDW_WORKLIB)/sims/PIPELINE_V/sim_PIPELINE_V.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=PIPELINE_V

clean_PIPELINE_V: clean_hls_PIPELINE_V clean_sim_PIPELINE_V

clean_sim_PIPELINE_V: clean_wrap_PIPELINE_V
	@rm -rf $(BDW_WORKLIB)/jobs/sim.PIPELINE_V.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.PIPELINE_V
	@rm -rf $(BDW_WORKLIB)/jobs/build.PIPELINE_V


$(BDW_WORKLIB)/sims/top_PIPELINE_V.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project project.tcl -simconfig PIPELINE_V -top top


#############################################################################
# libesc building rules
#############################################################################

ifeq ($(BDW_DEBUG),1)
libesc_WORKDIR = $(BDW_WORKLIB)/libesc/debug
else
libesc_WORKDIR = $(BDW_WORKLIB)/libesc
endif

BDW_ESC_SOURCES = libesc.o esc_elab.o esc_cleanup.o
BDW_ESC_OBJS = $(addprefix $(libesc_WORKDIR)/, $(BDW_ESC_SOURCES))

$(libesc_WORKDIR)/libesc.a : $(BDW_ESC_OBJS)
	$(BDW_AR) $(libesc_WORKDIR)/libesc.a $(BDW_ESC_OBJS)

${libesc_WORKDIR}/%.o   :   ${STRATUS_HOME}/share/stratus/source/%.cc 
	@if [ ! -d ${libesc_WORKDIR} ]; then mkdir -p ${libesc_WORKDIR}; fi
ifeq ($(BDW_NCSC),1)
	${BDW_CC} "-TP ${BDW_CCFLAGS} ${BDW_COUT}$@ " $<
else
	${BDW_CC} -TP ${BDW_CCFLAGS} ${BDW_COUT}$@ $<
endif



########################################################################
# Rules to prep all libraries
#######################################################################
prep_c_all: $(BDW_C_LIBPREP)

prep_vlog_all: $(BDW_VLOG_LIBPREP)


##############################################################
## Rule for building all Cynth libraries external to the project
##############################################################

build_all_cynthLibs: $(BDW_BOTH_LIBPREP_EXTERNAL)

list_cynthLibs:


##############################################################
## START OF HLS MODULE RULES
##############################################################



##############################################################
## HLS Module "dut"
##############################################################


#
# Dependency Generation rule for BEH module
#
$(BDW_OBJDIR)/dut.d :  dut.cc
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for $< "
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)  dut.cc \
	| sed 's|dut\.o[ :]*|$(BDW_OBJDIR)/dut.o $(BDW_OBJDIR)/dut.d : |' $(BDW_DEP_FILTER)  > $@

$(BDW_WORKLIB)/wrappers/dut_trace.h : $(BDW_WORKLIB)/wrappers/dut_trace.h.updated

$(BDW_WORKLIB)/wrappers/dut_trace.h.updated :  dut.cc $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module dut -vcd 
	@touch $(BDW_WORKLIB)/wrappers/dut_trace.h.updated



$(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/dut.o:  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  $(BDW_CCFLAGS)   -o $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

$(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/dut.o:  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  $(BDW_CCFLAGS)   -o $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/debug/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

.INTERMEDIATE : dut_wrap.h

dut_wrap.h : $(BDW_WORKLIB)/wrappers/dut_wrap.h

$(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_cosim.v   : $(BDW_WRAPDIR)/dut.updated

$(BDW_WRAPDIR)/dut.updated :  dut.cc 
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project project.tcl -module dut "-I$(BDW_WRAPDIR) $(BDW_LIB_DASHI) $(BDW_CCOPTIONS) $(BDW_EXTRA_CCFLAGS)"
	@touch $(BDW_WRAPDIR)/dut.updated
	$(STRATUS_HOME)/bin/bdw_tracegen -module dut -vcd 
	@touch $(BDW_WORKLIB)/wrappers/dut_trace.h.updated
$(BDW_WORKLIB)/wrappers/dut_wrap.d :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)   dut.cc \
		| sed 's|dut\.o[ :]*|$(BDW_WRAPDIR)/dut.updated $(BDW_WORKLIB)/wrappers/dut_wrap.d :  |' $(BDW_DEP_FILTER) > $(BDW_WORKLIB)/wrappers/dut_wrap.d 




##############################################################
## HLS Module "dut" - cynthConfigs
##############################################################


#
# HLS config BASIC
#

#
#	stratus_hls rule
#
LIB_DIRS_dut_BASIC = 
LIB_INCLUDES_dut_BASIC = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_BASIC))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_dut_BASIC = 
LIB_NAMES_FOR_VLOG_dut_BASIC = 
PREFIXED_LIB_NAMES_dut_BASIC = 
EXTRACT_LIB_DASHI_dut_BASIC = $(shell echo "puts stdout [extractHoistLibDashIs project.tcl dut BASIC]" | $(STRATUS_HOME)/bin/bdw_shell)
CCFLAGS_dut_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/BASIC/c_parts -DBASIC=1 -DBDW_RTL_dut_BASIC=1  $(LIB_INCLUDES_dut_BASIC)
CCFLAGS_COSIM_dut_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/BASIC/c_parts -DBASIC=1 -DBDW_RTL_dut_BASIC=1  $(LIB_INCLUDES_dut_BASIC)
CCFLAGS_BEH_dut_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/BASIC/c_parts -DBASIC=1  $(LIB_INCLUDES_dut_BASIC)
CCFLAGS_dut_BASIC += ${BDW_CCFLAGS_TAIL}
CCFLAGS_COSIM_dut_BASIC += ${BDW_CCFLAGS_TAIL}
CCFLAGS_BEH_dut_BASIC += ${BDW_CCFLAGS_TAIL}

hls_dut_BASIC : hlsc_dut_BASIC

cynth_dut_BASIC : hlsc_dut_BASIC 

elab_dut_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/dut/BASIC/stratus_hls.bdr

optim_dut_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/dut/BASIC/stratus_hls.bdr

sched_dut_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/dut/BASIC/stratus_hls.bdr

.PHONY: hlsc_dut_BASIC hls_dut_BASIC

hlsc_dut_BASIC : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.cc BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=dut BDW_HLS_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hls.dut.BASIC $(MAKE) CWBExec_hls=1 hlsc_dut_BASIC
endif

clean_cynth_dut_BASIC: clean_hls_dut_BASIC

clean_dut_BASIC: clean_hls_dut_BASIC

clean_hls_dut_BASIC:
	@rm -rf $(BDW_WORKLIB)/modules/dut/BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.BASIC.s

kill_hls_dut_BASIC:
	@bdw_kill -job hls.dut.BASIC
	@bdw_kill -job hls.dut.BASIC.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),BASIC)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/dut/BASIC/dut.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_dut_BASIC :
	bdw_htmlgen -project project.tcl -module dut -cynthconfig BASIC





ifeq ($(CWBExec_hlsc),1)
$(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.v $(BDW_WORKLIB)/modules/dut/BASIC/stratus_hls.bdr :  dut.cc  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/dut/BASIC ]; then mkdir -p $(BDW_WORKLIB)/modules/dut/BASIC; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=BASIC BDW_CYNTH_CONFIG=BASIC \
	BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.v BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.cc BDW_MODULE=dut BDW_CYNTH_CONFIG=BASIC BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/dut/BASIC BDW_HLS_CONFIG=BASIC BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/dut/BASIC \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_dut_BASIC) \
		-d $(BDW_WORKLIB)/modules/dut/BASIC -o dut_rtl.cc \
		--hls_module=dut --hls_config=BASIC --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_dut_BASIC))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_dut_BASIC))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_dut_BASIC))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_dut_BASIC) \
		 dut.cc
	
	
	

else

$(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.v $(BDW_WORKLIB)/modules/dut/BASIC/stratus_hls.bdr :  dut.cc  $(BDW_LIB_DEPS)
	bdw_exec -jobproject project.tcl -job hls.dut.BASIC.s $(MAKE) -j1 CWBExec_hlsc=1 $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.v $(BDW_WORKLIB)/modules/dut/BASIC/stratus_hls.bdr

endif

	
	
$(BDW_WORKLIB)/modules/dut/BASIC/dut_trace.h : $(BDW_WORKLIB)/modules/dut/BASIC/dut_trace.h.updated

$(BDW_WORKLIB)/modules/dut/BASIC/dut_trace.h.updated : $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.cc $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module dut -cynthconfig BASIC -vcd 
	@touch $(BDW_WORKLIB)/modules/dut/BASIC/dut_trace.h.updated

catHLLog_dut_BASIC:
	cat $(BDW_WORKLIB)/modules/dut/BASIC/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_dut_BASIC : hls_dut_BASIC 


.PHONY: hls_dut_BASIC

hls_dut_BASIC hlsv_dut_BASIC: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_dut_BASIC)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_dut_BASIC BDW_DEP_CYNTH_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hlsv.dut.BASIC $(MAKE) CWBExec_hlsv=1 hlsv_dut_BASIC
endif

catVLGLog_dut_BASIC : catHLLog_dut_BASIC
	cat $(BDW_WORKLIB)/modules/dut/BASIC/stratus_vlg.log

#
#	view rule
#

view_dut_BASIC:
	@echo "ERROR: Schematic viewing target 'view_dut_BASIC' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.o : $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/modules/dut/BASIC/dut_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/dut_wrap.cc `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl dut`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/BASIC -I./ $(CCFLAGS_dut_BASIC) $(EXTRACT_LIB_DASHI_dut_BASIC) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

$(BDW_WORKLIB)/modules/dut/BASIC/debug/dut_rtl.o : $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/modules/dut/BASIC/dut_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/dut_wrap.cc `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl dut`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/BASIC -I./ $(CCFLAGS_dut_BASIC) $(EXTRACT_LIB_DASHI_dut_BASIC) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/dut/BASIC/debug/dut_rtl.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/dut/BASIC/dut_beh.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/BASIC -I./ $(CCFLAGS_BEH_dut_BASIC) -o $(BDW_WORKLIB)/modules/dut/BASIC/dut_beh.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

$(BDW_WORKLIB)/modules/dut/BASIC/debug/dut_beh.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/BASIC -I./ $(CCFLAGS_BEH_dut_BASIC) -o $(BDW_WORKLIB)/modules/dut/BASIC/debug/dut_beh.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

#
# Cosim object file rule
#

$(BDW_WORKLIB)/modules/dut/BASIC/dut.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/BASIC -I./ $(CCFLAGS_COSIM_dut_BASIC) -o $(BDW_WORKLIB)/modules/dut/BASIC/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

$(BDW_WORKLIB)/modules/dut/BASIC/dut_hoist.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/BASIC -I./ $(CCFLAGS_dut_BASIC) $(EXTRACT_LIB_DASHI_dut_BASIC) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/dut/BASIC/dut_hoist.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

$(BDW_WORKLIB)/modules/dut/BASIC/debug/dut.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/BASIC -I./ $(CCFLAGS_COSIM_dut_BASIC) -o $(BDW_WORKLIB)/modules/dut/BASIC/debug/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc


$(BDW_WORKLIB)/modules/dut/BASIC/debug/dut_hoist.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/BASIC -I./ $(CCFLAGS_dut_BASIC) $(EXTRACT_LIB_DASHI_dut_BASIC) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/dut/BASIC/debug/dut_hoist.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/dut/BASIC/dut.d :  dut.cc
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config BASIC of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_dut_BASIC)  dut.cc \
	| sed 's|dut\.o[ :]*|$(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/BASIC/dut_beh.o $(BDW_WORKLIB)/modules/dut/BASIC/debug/dut_beh.o $(BDW_WORKLIB)/modules/dut/BASIC/dut.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/dut/BASIC"
##############################################################

dut_BASIC_SRCDIR = $(BDW_WORKLIB)/modules/dut/BASIC
dut_BASIC_BEH_SRCDIR = $(BDW_WORKLIB)/libs/dut_BASIC
dut_BASIC_LIBNAME = dut_BASIC
dut_BASIC_WORKLIB = $(BDW_WORKLIB)/modules/dut/BASIC
dut_BASIC_C_PARTS_A = $(dut_BASIC_WORKLIB)/objs/libdut_BASIC.a

prep_c_dut_BASIC : $(dut_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_BASIC_WORKLIB) prep_c

prep_vlog_dut_BASIC : $(dut_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_BASIC_WORKLIB) prep_vlog

prep_dut_BASIC : $(dut_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_BASIC_WORKLIB) prep

$(dut_BASIC_WORKLIB)/Makefile : $(dut_BASIC_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(dut_BASIC_WORKLIB) ]; then mkdir -p $(dut_BASIC_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(dut_BASIC_SRCDIR) -o $(dut_BASIC_WORKLIB)/Makefile -module dut -cynthconfig BASIC   

$(dut_BASIC_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(dut_BASIC_WORKLIB) ]; then mkdir -p $(dut_BASIC_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(dut_BASIC_WORKLIB)/dut_BASIC.d :
	@if [ ! -d $(dut_BASIC_WORKLIB) ]; then mkdir -p $(dut_BASIC_WORKLIB); fi
	@touch $(dut_BASIC_WORKLIB)/dut_BASIC.d



#
# HLS config DPA
#

#
#	stratus_hls rule
#
LIB_DIRS_dut_DPA = 
LIB_INCLUDES_dut_DPA = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_DPA))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_dut_DPA = 
LIB_NAMES_FOR_VLOG_dut_DPA = 
PREFIXED_LIB_NAMES_dut_DPA = 
EXTRACT_LIB_DASHI_dut_DPA = $(shell echo "puts stdout [extractHoistLibDashIs project.tcl dut DPA]" | $(STRATUS_HOME)/bin/bdw_shell)
CCFLAGS_dut_DPA = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/DPA/c_parts -DDPA=1 -DBDW_RTL_dut_DPA=1  $(LIB_INCLUDES_dut_DPA)
CCFLAGS_COSIM_dut_DPA = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/DPA/c_parts -DDPA=1 -DBDW_RTL_dut_DPA=1  $(LIB_INCLUDES_dut_DPA)
CCFLAGS_BEH_dut_DPA = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/DPA/c_parts -DDPA=1  $(LIB_INCLUDES_dut_DPA)
CCFLAGS_dut_DPA += ${BDW_CCFLAGS_TAIL}
CCFLAGS_COSIM_dut_DPA += ${BDW_CCFLAGS_TAIL}
CCFLAGS_BEH_dut_DPA += ${BDW_CCFLAGS_TAIL}

hls_dut_DPA : hlsc_dut_DPA

cynth_dut_DPA : hlsc_dut_DPA 

elab_dut_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/dut/DPA/stratus_hls.bdr

optim_dut_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/dut/DPA/stratus_hls.bdr

sched_dut_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/dut/DPA/stratus_hls.bdr

.PHONY: hlsc_dut_DPA hls_dut_DPA

hlsc_dut_DPA : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.cc BDW_DEP_CYNTH_CONFIG=DPA BDW_MODULE=dut BDW_HLS_CONFIG=DPA
else
	@bdw_exec -jobproject project.tcl -job hls.dut.DPA $(MAKE) CWBExec_hls=1 hlsc_dut_DPA
endif

clean_cynth_dut_DPA: clean_hls_dut_DPA

clean_dut_DPA: clean_hls_dut_DPA

clean_hls_dut_DPA:
	@rm -rf $(BDW_WORKLIB)/modules/dut/DPA
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.DPA
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.DPA.s

kill_hls_dut_DPA:
	@bdw_kill -job hls.dut.DPA
	@bdw_kill -job hls.dut.DPA.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),DPA)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/dut/DPA/dut.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_dut_DPA :
	bdw_htmlgen -project project.tcl -module dut -cynthconfig DPA





ifeq ($(CWBExec_hlsc),1)
$(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.v $(BDW_WORKLIB)/modules/dut/DPA/stratus_hls.bdr :  dut.cc  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/dut/DPA ]; then mkdir -p $(BDW_WORKLIB)/modules/dut/DPA; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=DPA BDW_CYNTH_CONFIG=DPA \
	BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.v BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.cc BDW_MODULE=dut BDW_CYNTH_CONFIG=DPA BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/dut/DPA BDW_HLS_CONFIG=DPA BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/dut/DPA \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_dut_DPA) \
		-d $(BDW_WORKLIB)/modules/dut/DPA -o dut_rtl.cc \
		--hls_module=dut --hls_config=DPA --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_dut_DPA))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_dut_DPA))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_dut_DPA))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_dut_DPA) \
		 dut.cc
	
	
	

else

$(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.v $(BDW_WORKLIB)/modules/dut/DPA/stratus_hls.bdr :  dut.cc  $(BDW_LIB_DEPS)
	bdw_exec -jobproject project.tcl -job hls.dut.DPA.s $(MAKE) -j1 CWBExec_hlsc=1 $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.v $(BDW_WORKLIB)/modules/dut/DPA/stratus_hls.bdr

endif

	
	
$(BDW_WORKLIB)/modules/dut/DPA/dut_trace.h : $(BDW_WORKLIB)/modules/dut/DPA/dut_trace.h.updated

$(BDW_WORKLIB)/modules/dut/DPA/dut_trace.h.updated : $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.cc $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module dut -cynthconfig DPA -vcd 
	@touch $(BDW_WORKLIB)/modules/dut/DPA/dut_trace.h.updated

catHLLog_dut_DPA:
	cat $(BDW_WORKLIB)/modules/dut/DPA/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_dut_DPA : hls_dut_DPA 


.PHONY: hls_dut_DPA

hls_dut_DPA hlsv_dut_DPA: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_dut_DPA)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_dut_DPA BDW_DEP_CYNTH_CONFIG=DPA
else
	@bdw_exec -jobproject project.tcl -job hlsv.dut.DPA $(MAKE) CWBExec_hlsv=1 hlsv_dut_DPA
endif

catVLGLog_dut_DPA : catHLLog_dut_DPA
	cat $(BDW_WORKLIB)/modules/dut/DPA/stratus_vlg.log

#
#	view rule
#

view_dut_DPA:
	@echo "ERROR: Schematic viewing target 'view_dut_DPA' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.o : $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/modules/dut/DPA/dut_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/dut_wrap.cc `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl dut`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPA -I./ $(CCFLAGS_dut_DPA) $(EXTRACT_LIB_DASHI_dut_DPA) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

$(BDW_WORKLIB)/modules/dut/DPA/debug/dut_rtl.o : $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/modules/dut/DPA/dut_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/dut_wrap.cc `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl dut`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPA -I./ $(CCFLAGS_dut_DPA) $(EXTRACT_LIB_DASHI_dut_DPA) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/dut/DPA/debug/dut_rtl.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/dut/DPA/dut_beh.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPA -I./ $(CCFLAGS_BEH_dut_DPA) -o $(BDW_WORKLIB)/modules/dut/DPA/dut_beh.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

$(BDW_WORKLIB)/modules/dut/DPA/debug/dut_beh.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPA -I./ $(CCFLAGS_BEH_dut_DPA) -o $(BDW_WORKLIB)/modules/dut/DPA/debug/dut_beh.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

#
# Cosim object file rule
#

$(BDW_WORKLIB)/modules/dut/DPA/dut.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPA -I./ $(CCFLAGS_COSIM_dut_DPA) -o $(BDW_WORKLIB)/modules/dut/DPA/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

$(BDW_WORKLIB)/modules/dut/DPA/dut_hoist.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPA -I./ $(CCFLAGS_dut_DPA) $(EXTRACT_LIB_DASHI_dut_DPA) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/dut/DPA/dut_hoist.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

$(BDW_WORKLIB)/modules/dut/DPA/debug/dut.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPA -I./ $(CCFLAGS_COSIM_dut_DPA) -o $(BDW_WORKLIB)/modules/dut/DPA/debug/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc


$(BDW_WORKLIB)/modules/dut/DPA/debug/dut_hoist.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPA -I./ $(CCFLAGS_dut_DPA) $(EXTRACT_LIB_DASHI_dut_DPA) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/dut/DPA/debug/dut_hoist.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/dut/DPA/dut.d :  dut.cc
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config DPA of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_dut_DPA)  dut.cc \
	| sed 's|dut\.o[ :]*|$(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/DPA/dut_beh.o $(BDW_WORKLIB)/modules/dut/DPA/debug/dut_beh.o $(BDW_WORKLIB)/modules/dut/DPA/dut.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/dut/DPA"
##############################################################

dut_DPA_SRCDIR = $(BDW_WORKLIB)/modules/dut/DPA
dut_DPA_BEH_SRCDIR = $(BDW_WORKLIB)/libs/dut_DPA
dut_DPA_LIBNAME = dut_DPA
dut_DPA_WORKLIB = $(BDW_WORKLIB)/modules/dut/DPA
dut_DPA_C_PARTS_A = $(dut_DPA_WORKLIB)/objs/libdut_DPA.a

prep_c_dut_DPA : $(dut_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_DPA_WORKLIB) prep_c

prep_vlog_dut_DPA : $(dut_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_DPA_WORKLIB) prep_vlog

prep_dut_DPA : $(dut_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_DPA_WORKLIB) prep

$(dut_DPA_WORKLIB)/Makefile : $(dut_DPA_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(dut_DPA_WORKLIB) ]; then mkdir -p $(dut_DPA_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(dut_DPA_SRCDIR) -o $(dut_DPA_WORKLIB)/Makefile -module dut -cynthconfig DPA   

$(dut_DPA_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(dut_DPA_WORKLIB) ]; then mkdir -p $(dut_DPA_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(dut_DPA_WORKLIB)/dut_DPA.d :
	@if [ ! -d $(dut_DPA_WORKLIB) ]; then mkdir -p $(dut_DPA_WORKLIB); fi
	@touch $(dut_DPA_WORKLIB)/dut_DPA.d



#
# HLS config NODPO
#

#
#	stratus_hls rule
#
LIB_DIRS_dut_NODPO = 
LIB_INCLUDES_dut_NODPO = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_NODPO))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_dut_NODPO = 
LIB_NAMES_FOR_VLOG_dut_NODPO = 
PREFIXED_LIB_NAMES_dut_NODPO = 
EXTRACT_LIB_DASHI_dut_NODPO = $(shell echo "puts stdout [extractHoistLibDashIs project.tcl dut NODPO]" | $(STRATUS_HOME)/bin/bdw_shell)
CCFLAGS_dut_NODPO = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/NODPO/c_parts -DNODPO=1 -DBDW_RTL_dut_NODPO=1 -DLAT=2 $(LIB_INCLUDES_dut_NODPO)
CCFLAGS_COSIM_dut_NODPO = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/NODPO/c_parts -DNODPO=1 -DBDW_RTL_dut_NODPO=1 -DLAT=2 $(LIB_INCLUDES_dut_NODPO)
CCFLAGS_BEH_dut_NODPO = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/NODPO/c_parts -DNODPO=1 -DLAT=2 $(LIB_INCLUDES_dut_NODPO)
CCFLAGS_dut_NODPO += ${BDW_CCFLAGS_TAIL}
CCFLAGS_COSIM_dut_NODPO += ${BDW_CCFLAGS_TAIL}
CCFLAGS_BEH_dut_NODPO += ${BDW_CCFLAGS_TAIL}

hls_dut_NODPO : hlsc_dut_NODPO

cynth_dut_NODPO : hlsc_dut_NODPO 

elab_dut_NODPO : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/dut/NODPO/stratus_hls.bdr

optim_dut_NODPO : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/dut/NODPO/stratus_hls.bdr

sched_dut_NODPO : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/dut/NODPO/stratus_hls.bdr

.PHONY: hlsc_dut_NODPO hls_dut_NODPO

hlsc_dut_NODPO : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(BDW_WORKLIB)/modules/dut/NODPO/dut_rtl.cc BDW_DEP_CYNTH_CONFIG=NODPO BDW_MODULE=dut BDW_HLS_CONFIG=NODPO
else
	@bdw_exec -jobproject project.tcl -job hls.dut.NODPO $(MAKE) CWBExec_hls=1 hlsc_dut_NODPO
endif

clean_cynth_dut_NODPO: clean_hls_dut_NODPO

clean_dut_NODPO: clean_hls_dut_NODPO

clean_hls_dut_NODPO:
	@rm -rf $(BDW_WORKLIB)/modules/dut/NODPO
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.NODPO
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.NODPO.s

kill_hls_dut_NODPO:
	@bdw_kill -job hls.dut.NODPO
	@bdw_kill -job hls.dut.NODPO.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),NODPO)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/dut/NODPO/dut.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_dut_NODPO :
	bdw_htmlgen -project project.tcl -module dut -cynthconfig NODPO





ifeq ($(CWBExec_hlsc),1)
$(BDW_WORKLIB)/modules/dut/NODPO/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/NODPO/dut_rtl.v $(BDW_WORKLIB)/modules/dut/NODPO/stratus_hls.bdr :  dut.cc  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/dut/NODPO ]; then mkdir -p $(BDW_WORKLIB)/modules/dut/NODPO; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=NODPO BDW_CYNTH_CONFIG=NODPO \
	BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/dut/NODPO/dut_rtl.v BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/dut/NODPO/dut_rtl.cc BDW_MODULE=dut BDW_CYNTH_CONFIG=NODPO BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/dut/NODPO BDW_HLS_CONFIG=NODPO BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/dut/NODPO \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_dut_NODPO) \
		-d $(BDW_WORKLIB)/modules/dut/NODPO -o dut_rtl.cc \
		--hls_module=dut --hls_config=NODPO --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_dut_NODPO))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_dut_NODPO))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_dut_NODPO))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_dut_NODPO) \
		 dut.cc
	
	
	

else

$(BDW_WORKLIB)/modules/dut/NODPO/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/NODPO/dut_rtl.v $(BDW_WORKLIB)/modules/dut/NODPO/stratus_hls.bdr :  dut.cc  $(BDW_LIB_DEPS)
	bdw_exec -jobproject project.tcl -job hls.dut.NODPO.s $(MAKE) -j1 CWBExec_hlsc=1 $(BDW_WORKLIB)/modules/dut/NODPO/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/NODPO/dut_rtl.v $(BDW_WORKLIB)/modules/dut/NODPO/stratus_hls.bdr

endif

	
	
$(BDW_WORKLIB)/modules/dut/NODPO/dut_trace.h : $(BDW_WORKLIB)/modules/dut/NODPO/dut_trace.h.updated

$(BDW_WORKLIB)/modules/dut/NODPO/dut_trace.h.updated : $(BDW_WORKLIB)/modules/dut/NODPO/dut_rtl.cc $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module dut -cynthconfig NODPO -vcd 
	@touch $(BDW_WORKLIB)/modules/dut/NODPO/dut_trace.h.updated

catHLLog_dut_NODPO:
	cat $(BDW_WORKLIB)/modules/dut/NODPO/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_dut_NODPO : hls_dut_NODPO 


.PHONY: hls_dut_NODPO

hls_dut_NODPO hlsv_dut_NODPO: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_dut_NODPO)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_dut_NODPO BDW_DEP_CYNTH_CONFIG=NODPO
else
	@bdw_exec -jobproject project.tcl -job hlsv.dut.NODPO $(MAKE) CWBExec_hlsv=1 hlsv_dut_NODPO
endif

catVLGLog_dut_NODPO : catHLLog_dut_NODPO
	cat $(BDW_WORKLIB)/modules/dut/NODPO/stratus_vlg.log

#
#	view rule
#

view_dut_NODPO:
	@echo "ERROR: Schematic viewing target 'view_dut_NODPO' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/dut/NODPO/dut_rtl.o : $(BDW_WORKLIB)/modules/dut/NODPO/dut_rtl.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/modules/dut/NODPO/dut_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/dut_wrap.cc `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl dut`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/NODPO -I./ $(CCFLAGS_dut_NODPO) $(EXTRACT_LIB_DASHI_dut_NODPO) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/dut/NODPO/dut_rtl.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

$(BDW_WORKLIB)/modules/dut/NODPO/debug/dut_rtl.o : $(BDW_WORKLIB)/modules/dut/NODPO/dut_rtl.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/modules/dut/NODPO/dut_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/dut_wrap.cc `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl dut`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/NODPO -I./ $(CCFLAGS_dut_NODPO) $(EXTRACT_LIB_DASHI_dut_NODPO) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/dut/NODPO/debug/dut_rtl.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/dut/NODPO/dut_beh.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/NODPO -I./ $(CCFLAGS_BEH_dut_NODPO) -o $(BDW_WORKLIB)/modules/dut/NODPO/dut_beh.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

$(BDW_WORKLIB)/modules/dut/NODPO/debug/dut_beh.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/NODPO -I./ $(CCFLAGS_BEH_dut_NODPO) -o $(BDW_WORKLIB)/modules/dut/NODPO/debug/dut_beh.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

#
# Cosim object file rule
#

$(BDW_WORKLIB)/modules/dut/NODPO/dut.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/NODPO -I./ $(CCFLAGS_COSIM_dut_NODPO) -o $(BDW_WORKLIB)/modules/dut/NODPO/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

$(BDW_WORKLIB)/modules/dut/NODPO/dut_hoist.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/NODPO -I./ $(CCFLAGS_dut_NODPO) $(EXTRACT_LIB_DASHI_dut_NODPO) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/dut/NODPO/dut_hoist.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

$(BDW_WORKLIB)/modules/dut/NODPO/debug/dut.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/NODPO -I./ $(CCFLAGS_COSIM_dut_NODPO) -o $(BDW_WORKLIB)/modules/dut/NODPO/debug/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc


$(BDW_WORKLIB)/modules/dut/NODPO/debug/dut_hoist.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/NODPO -I./ $(CCFLAGS_dut_NODPO) $(EXTRACT_LIB_DASHI_dut_NODPO) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/dut/NODPO/debug/dut_hoist.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/dut/NODPO/dut.d :  dut.cc
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config NODPO of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_dut_NODPO)  dut.cc \
	| sed 's|dut\.o[ :]*|$(BDW_WORKLIB)/modules/dut/NODPO/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/NODPO/dut_beh.o $(BDW_WORKLIB)/modules/dut/NODPO/debug/dut_beh.o $(BDW_WORKLIB)/modules/dut/NODPO/dut.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/dut/NODPO"
##############################################################

dut_NODPO_SRCDIR = $(BDW_WORKLIB)/modules/dut/NODPO
dut_NODPO_BEH_SRCDIR = $(BDW_WORKLIB)/libs/dut_NODPO
dut_NODPO_LIBNAME = dut_NODPO
dut_NODPO_WORKLIB = $(BDW_WORKLIB)/modules/dut/NODPO
dut_NODPO_C_PARTS_A = $(dut_NODPO_WORKLIB)/objs/libdut_NODPO.a

prep_c_dut_NODPO : $(dut_NODPO_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_NODPO_WORKLIB) prep_c

prep_vlog_dut_NODPO : $(dut_NODPO_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_NODPO_WORKLIB) prep_vlog

prep_dut_NODPO : $(dut_NODPO_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_NODPO_WORKLIB) prep

$(dut_NODPO_WORKLIB)/Makefile : $(dut_NODPO_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(dut_NODPO_WORKLIB) ]; then mkdir -p $(dut_NODPO_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(dut_NODPO_SRCDIR) -o $(dut_NODPO_WORKLIB)/Makefile -module dut -cynthconfig NODPO   

$(dut_NODPO_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(dut_NODPO_WORKLIB) ]; then mkdir -p $(dut_NODPO_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(dut_NODPO_WORKLIB)/dut_NODPO.d :
	@if [ ! -d $(dut_NODPO_WORKLIB) ]; then mkdir -p $(dut_NODPO_WORKLIB); fi
	@touch $(dut_NODPO_WORKLIB)/dut_NODPO.d



#
# HLS config DPO_AUTO_OP
#

#
#	stratus_hls rule
#
LIB_DIRS_dut_DPO_AUTO_OP = 
LIB_INCLUDES_dut_DPO_AUTO_OP = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_DPO_AUTO_OP))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_dut_DPO_AUTO_OP = 
LIB_NAMES_FOR_VLOG_dut_DPO_AUTO_OP = 
PREFIXED_LIB_NAMES_dut_DPO_AUTO_OP = 
EXTRACT_LIB_DASHI_dut_DPO_AUTO_OP = $(shell echo "puts stdout [extractHoistLibDashIs project.tcl dut DPO_AUTO_OP]" | $(STRATUS_HOME)/bin/bdw_shell)
CCFLAGS_dut_DPO_AUTO_OP = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/c_parts -DDPO_AUTO_OP=1 -DBDW_RTL_dut_DPO_AUTO_OP=1 -DLAT=3 $(LIB_INCLUDES_dut_DPO_AUTO_OP)
CCFLAGS_COSIM_dut_DPO_AUTO_OP = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/c_parts -DDPO_AUTO_OP=1 -DBDW_RTL_dut_DPO_AUTO_OP=1 -DLAT=3 $(LIB_INCLUDES_dut_DPO_AUTO_OP)
CCFLAGS_BEH_dut_DPO_AUTO_OP = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/c_parts -DDPO_AUTO_OP=1 -DLAT=3 $(LIB_INCLUDES_dut_DPO_AUTO_OP)
CCFLAGS_dut_DPO_AUTO_OP += ${BDW_CCFLAGS_TAIL}
CCFLAGS_COSIM_dut_DPO_AUTO_OP += ${BDW_CCFLAGS_TAIL}
CCFLAGS_BEH_dut_DPO_AUTO_OP += ${BDW_CCFLAGS_TAIL}

hls_dut_DPO_AUTO_OP : hlsc_dut_DPO_AUTO_OP

cynth_dut_DPO_AUTO_OP : hlsc_dut_DPO_AUTO_OP 

elab_dut_DPO_AUTO_OP : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/stratus_hls.bdr

optim_dut_DPO_AUTO_OP : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/stratus_hls.bdr

sched_dut_DPO_AUTO_OP : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/stratus_hls.bdr

.PHONY: hlsc_dut_DPO_AUTO_OP hls_dut_DPO_AUTO_OP

hlsc_dut_DPO_AUTO_OP : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_rtl.cc BDW_DEP_CYNTH_CONFIG=DPO_AUTO_OP BDW_MODULE=dut BDW_HLS_CONFIG=DPO_AUTO_OP
else
	@bdw_exec -jobproject project.tcl -job hls.dut.DPO_AUTO_OP $(MAKE) CWBExec_hls=1 hlsc_dut_DPO_AUTO_OP
endif

clean_cynth_dut_DPO_AUTO_OP: clean_hls_dut_DPO_AUTO_OP

clean_dut_DPO_AUTO_OP: clean_hls_dut_DPO_AUTO_OP

clean_hls_dut_DPO_AUTO_OP:
	@rm -rf $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.DPO_AUTO_OP
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.DPO_AUTO_OP.s

kill_hls_dut_DPO_AUTO_OP:
	@bdw_kill -job hls.dut.DPO_AUTO_OP
	@bdw_kill -job hls.dut.DPO_AUTO_OP.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),DPO_AUTO_OP)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_dut_DPO_AUTO_OP :
	bdw_htmlgen -project project.tcl -module dut -cynthconfig DPO_AUTO_OP





ifeq ($(CWBExec_hlsc),1)
$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_rtl.v $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/stratus_hls.bdr :  dut.cc  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP ]; then mkdir -p $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=DPO_AUTO_OP BDW_CYNTH_CONFIG=DPO_AUTO_OP \
	BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_rtl.v BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_rtl.cc BDW_MODULE=dut BDW_CYNTH_CONFIG=DPO_AUTO_OP BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP BDW_HLS_CONFIG=DPO_AUTO_OP BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_dut_DPO_AUTO_OP) \
		-d $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP -o dut_rtl.cc \
		--hls_module=dut --hls_config=DPO_AUTO_OP --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_dut_DPO_AUTO_OP))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_dut_DPO_AUTO_OP))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_dut_DPO_AUTO_OP))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_dut_DPO_AUTO_OP) \
		 dut.cc
	
	
	

else

$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_rtl.v $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/stratus_hls.bdr :  dut.cc  $(BDW_LIB_DEPS)
	bdw_exec -jobproject project.tcl -job hls.dut.DPO_AUTO_OP.s $(MAKE) -j1 CWBExec_hlsc=1 $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_rtl.v $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/stratus_hls.bdr

endif

	
	
$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_trace.h : $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_trace.h.updated

$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_trace.h.updated : $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_rtl.cc $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module dut -cynthconfig DPO_AUTO_OP -vcd 
	@touch $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_trace.h.updated

catHLLog_dut_DPO_AUTO_OP:
	cat $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_dut_DPO_AUTO_OP : hls_dut_DPO_AUTO_OP 


.PHONY: hls_dut_DPO_AUTO_OP

hls_dut_DPO_AUTO_OP hlsv_dut_DPO_AUTO_OP: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_dut_DPO_AUTO_OP)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_dut_DPO_AUTO_OP BDW_DEP_CYNTH_CONFIG=DPO_AUTO_OP
else
	@bdw_exec -jobproject project.tcl -job hlsv.dut.DPO_AUTO_OP $(MAKE) CWBExec_hlsv=1 hlsv_dut_DPO_AUTO_OP
endif

catVLGLog_dut_DPO_AUTO_OP : catHLLog_dut_DPO_AUTO_OP
	cat $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/stratus_vlg.log

#
#	view rule
#

view_dut_DPO_AUTO_OP:
	@echo "ERROR: Schematic viewing target 'view_dut_DPO_AUTO_OP' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_rtl.o : $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_rtl.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/dut_wrap.cc `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl dut`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP -I./ $(CCFLAGS_dut_DPO_AUTO_OP) $(EXTRACT_LIB_DASHI_dut_DPO_AUTO_OP) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_rtl.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/debug/dut_rtl.o : $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_rtl.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/dut_wrap.cc `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl dut`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP -I./ $(CCFLAGS_dut_DPO_AUTO_OP) $(EXTRACT_LIB_DASHI_dut_DPO_AUTO_OP) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/debug/dut_rtl.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_beh.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP -I./ $(CCFLAGS_BEH_dut_DPO_AUTO_OP) -o $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_beh.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/debug/dut_beh.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP -I./ $(CCFLAGS_BEH_dut_DPO_AUTO_OP) -o $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/debug/dut_beh.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

#
# Cosim object file rule
#

$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP -I./ $(CCFLAGS_COSIM_dut_DPO_AUTO_OP) -o $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_hoist.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP -I./ $(CCFLAGS_dut_DPO_AUTO_OP) $(EXTRACT_LIB_DASHI_dut_DPO_AUTO_OP) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_hoist.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/debug/dut.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP -I./ $(CCFLAGS_COSIM_dut_DPO_AUTO_OP) -o $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/debug/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc


$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/debug/dut_hoist.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP -I./ $(CCFLAGS_dut_DPO_AUTO_OP) $(EXTRACT_LIB_DASHI_dut_DPO_AUTO_OP) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/debug/dut_hoist.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut.d :  dut.cc
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config DPO_AUTO_OP of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_dut_DPO_AUTO_OP)  dut.cc \
	| sed 's|dut\.o[ :]*|$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_beh.o $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/debug/dut_beh.o $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP"
##############################################################

dut_DPO_AUTO_OP_SRCDIR = $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP
dut_DPO_AUTO_OP_BEH_SRCDIR = $(BDW_WORKLIB)/libs/dut_DPO_AUTO_OP
dut_DPO_AUTO_OP_LIBNAME = dut_DPO_AUTO_OP
dut_DPO_AUTO_OP_WORKLIB = $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP
dut_DPO_AUTO_OP_C_PARTS_A = $(dut_DPO_AUTO_OP_WORKLIB)/objs/libdut_DPO_AUTO_OP.a

prep_c_dut_DPO_AUTO_OP : $(dut_DPO_AUTO_OP_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_DPO_AUTO_OP_WORKLIB) prep_c

prep_vlog_dut_DPO_AUTO_OP : $(dut_DPO_AUTO_OP_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_DPO_AUTO_OP_WORKLIB) prep_vlog

prep_dut_DPO_AUTO_OP : $(dut_DPO_AUTO_OP_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_DPO_AUTO_OP_WORKLIB) prep

$(dut_DPO_AUTO_OP_WORKLIB)/Makefile : $(dut_DPO_AUTO_OP_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(dut_DPO_AUTO_OP_WORKLIB) ]; then mkdir -p $(dut_DPO_AUTO_OP_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(dut_DPO_AUTO_OP_SRCDIR) -o $(dut_DPO_AUTO_OP_WORKLIB)/Makefile -module dut -cynthconfig DPO_AUTO_OP   

$(dut_DPO_AUTO_OP_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(dut_DPO_AUTO_OP_WORKLIB) ]; then mkdir -p $(dut_DPO_AUTO_OP_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(dut_DPO_AUTO_OP_WORKLIB)/dut_DPO_AUTO_OP.d :
	@if [ ! -d $(dut_DPO_AUTO_OP_WORKLIB) ]; then mkdir -p $(dut_DPO_AUTO_OP_WORKLIB); fi
	@touch $(dut_DPO_AUTO_OP_WORKLIB)/dut_DPO_AUTO_OP.d



#
# HLS config DPO_AUTO_EXPR
#

#
#	stratus_hls rule
#
LIB_DIRS_dut_DPO_AUTO_EXPR = 
LIB_INCLUDES_dut_DPO_AUTO_EXPR = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_DPO_AUTO_EXPR))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_dut_DPO_AUTO_EXPR = 
LIB_NAMES_FOR_VLOG_dut_DPO_AUTO_EXPR = 
PREFIXED_LIB_NAMES_dut_DPO_AUTO_EXPR = 
EXTRACT_LIB_DASHI_dut_DPO_AUTO_EXPR = $(shell echo "puts stdout [extractHoistLibDashIs project.tcl dut DPO_AUTO_EXPR]" | $(STRATUS_HOME)/bin/bdw_shell)
CCFLAGS_dut_DPO_AUTO_EXPR = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/c_parts -DDPO_AUTO_EXPR=1 -DBDW_RTL_dut_DPO_AUTO_EXPR=1 -DLAT=3 $(LIB_INCLUDES_dut_DPO_AUTO_EXPR)
CCFLAGS_COSIM_dut_DPO_AUTO_EXPR = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/c_parts -DDPO_AUTO_EXPR=1 -DBDW_RTL_dut_DPO_AUTO_EXPR=1 -DLAT=3 $(LIB_INCLUDES_dut_DPO_AUTO_EXPR)
CCFLAGS_BEH_dut_DPO_AUTO_EXPR = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/c_parts -DDPO_AUTO_EXPR=1 -DLAT=3 $(LIB_INCLUDES_dut_DPO_AUTO_EXPR)
CCFLAGS_dut_DPO_AUTO_EXPR += ${BDW_CCFLAGS_TAIL}
CCFLAGS_COSIM_dut_DPO_AUTO_EXPR += ${BDW_CCFLAGS_TAIL}
CCFLAGS_BEH_dut_DPO_AUTO_EXPR += ${BDW_CCFLAGS_TAIL}

hls_dut_DPO_AUTO_EXPR : hlsc_dut_DPO_AUTO_EXPR

cynth_dut_DPO_AUTO_EXPR : hlsc_dut_DPO_AUTO_EXPR 

elab_dut_DPO_AUTO_EXPR : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/stratus_hls.bdr

optim_dut_DPO_AUTO_EXPR : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/stratus_hls.bdr

sched_dut_DPO_AUTO_EXPR : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/stratus_hls.bdr

.PHONY: hlsc_dut_DPO_AUTO_EXPR hls_dut_DPO_AUTO_EXPR

hlsc_dut_DPO_AUTO_EXPR : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_rtl.cc BDW_DEP_CYNTH_CONFIG=DPO_AUTO_EXPR BDW_MODULE=dut BDW_HLS_CONFIG=DPO_AUTO_EXPR
else
	@bdw_exec -jobproject project.tcl -job hls.dut.DPO_AUTO_EXPR $(MAKE) CWBExec_hls=1 hlsc_dut_DPO_AUTO_EXPR
endif

clean_cynth_dut_DPO_AUTO_EXPR: clean_hls_dut_DPO_AUTO_EXPR

clean_dut_DPO_AUTO_EXPR: clean_hls_dut_DPO_AUTO_EXPR

clean_hls_dut_DPO_AUTO_EXPR:
	@rm -rf $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.DPO_AUTO_EXPR
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.DPO_AUTO_EXPR.s

kill_hls_dut_DPO_AUTO_EXPR:
	@bdw_kill -job hls.dut.DPO_AUTO_EXPR
	@bdw_kill -job hls.dut.DPO_AUTO_EXPR.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),DPO_AUTO_EXPR)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_dut_DPO_AUTO_EXPR :
	bdw_htmlgen -project project.tcl -module dut -cynthconfig DPO_AUTO_EXPR





ifeq ($(CWBExec_hlsc),1)
$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_rtl.v $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/stratus_hls.bdr :  dut.cc  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR ]; then mkdir -p $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=DPO_AUTO_EXPR BDW_CYNTH_CONFIG=DPO_AUTO_EXPR \
	BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_rtl.v BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_rtl.cc BDW_MODULE=dut BDW_CYNTH_CONFIG=DPO_AUTO_EXPR BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR BDW_HLS_CONFIG=DPO_AUTO_EXPR BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_dut_DPO_AUTO_EXPR) \
		-d $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR -o dut_rtl.cc \
		--hls_module=dut --hls_config=DPO_AUTO_EXPR --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_dut_DPO_AUTO_EXPR))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_dut_DPO_AUTO_EXPR))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_dut_DPO_AUTO_EXPR))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_dut_DPO_AUTO_EXPR) \
		 dut.cc
	
	
	

else

$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_rtl.v $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/stratus_hls.bdr :  dut.cc  $(BDW_LIB_DEPS)
	bdw_exec -jobproject project.tcl -job hls.dut.DPO_AUTO_EXPR.s $(MAKE) -j1 CWBExec_hlsc=1 $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_rtl.v $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/stratus_hls.bdr

endif

	
	
$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_trace.h : $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_trace.h.updated

$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_trace.h.updated : $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_rtl.cc $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module dut -cynthconfig DPO_AUTO_EXPR -vcd 
	@touch $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_trace.h.updated

catHLLog_dut_DPO_AUTO_EXPR:
	cat $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_dut_DPO_AUTO_EXPR : hls_dut_DPO_AUTO_EXPR 


.PHONY: hls_dut_DPO_AUTO_EXPR

hls_dut_DPO_AUTO_EXPR hlsv_dut_DPO_AUTO_EXPR: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_dut_DPO_AUTO_EXPR)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_dut_DPO_AUTO_EXPR BDW_DEP_CYNTH_CONFIG=DPO_AUTO_EXPR
else
	@bdw_exec -jobproject project.tcl -job hlsv.dut.DPO_AUTO_EXPR $(MAKE) CWBExec_hlsv=1 hlsv_dut_DPO_AUTO_EXPR
endif

catVLGLog_dut_DPO_AUTO_EXPR : catHLLog_dut_DPO_AUTO_EXPR
	cat $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/stratus_vlg.log

#
#	view rule
#

view_dut_DPO_AUTO_EXPR:
	@echo "ERROR: Schematic viewing target 'view_dut_DPO_AUTO_EXPR' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_rtl.o : $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_rtl.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/dut_wrap.cc `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl dut`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR -I./ $(CCFLAGS_dut_DPO_AUTO_EXPR) $(EXTRACT_LIB_DASHI_dut_DPO_AUTO_EXPR) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_rtl.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/debug/dut_rtl.o : $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_rtl.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/dut_wrap.cc `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl dut`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR -I./ $(CCFLAGS_dut_DPO_AUTO_EXPR) $(EXTRACT_LIB_DASHI_dut_DPO_AUTO_EXPR) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/debug/dut_rtl.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_beh.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR -I./ $(CCFLAGS_BEH_dut_DPO_AUTO_EXPR) -o $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_beh.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/debug/dut_beh.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR -I./ $(CCFLAGS_BEH_dut_DPO_AUTO_EXPR) -o $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/debug/dut_beh.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

#
# Cosim object file rule
#

$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR -I./ $(CCFLAGS_COSIM_dut_DPO_AUTO_EXPR) -o $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_hoist.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR -I./ $(CCFLAGS_dut_DPO_AUTO_EXPR) $(EXTRACT_LIB_DASHI_dut_DPO_AUTO_EXPR) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_hoist.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/debug/dut.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR -I./ $(CCFLAGS_COSIM_dut_DPO_AUTO_EXPR) -o $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/debug/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc


$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/debug/dut_hoist.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR -I./ $(CCFLAGS_dut_DPO_AUTO_EXPR) $(EXTRACT_LIB_DASHI_dut_DPO_AUTO_EXPR) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/debug/dut_hoist.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut.d :  dut.cc
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config DPO_AUTO_EXPR of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_dut_DPO_AUTO_EXPR)  dut.cc \
	| sed 's|dut\.o[ :]*|$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_beh.o $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/debug/dut_beh.o $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR"
##############################################################

dut_DPO_AUTO_EXPR_SRCDIR = $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR
dut_DPO_AUTO_EXPR_BEH_SRCDIR = $(BDW_WORKLIB)/libs/dut_DPO_AUTO_EXPR
dut_DPO_AUTO_EXPR_LIBNAME = dut_DPO_AUTO_EXPR
dut_DPO_AUTO_EXPR_WORKLIB = $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR
dut_DPO_AUTO_EXPR_C_PARTS_A = $(dut_DPO_AUTO_EXPR_WORKLIB)/objs/libdut_DPO_AUTO_EXPR.a

prep_c_dut_DPO_AUTO_EXPR : $(dut_DPO_AUTO_EXPR_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_DPO_AUTO_EXPR_WORKLIB) prep_c

prep_vlog_dut_DPO_AUTO_EXPR : $(dut_DPO_AUTO_EXPR_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_DPO_AUTO_EXPR_WORKLIB) prep_vlog

prep_dut_DPO_AUTO_EXPR : $(dut_DPO_AUTO_EXPR_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_DPO_AUTO_EXPR_WORKLIB) prep

$(dut_DPO_AUTO_EXPR_WORKLIB)/Makefile : $(dut_DPO_AUTO_EXPR_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(dut_DPO_AUTO_EXPR_WORKLIB) ]; then mkdir -p $(dut_DPO_AUTO_EXPR_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(dut_DPO_AUTO_EXPR_SRCDIR) -o $(dut_DPO_AUTO_EXPR_WORKLIB)/Makefile -module dut -cynthconfig DPO_AUTO_EXPR   

$(dut_DPO_AUTO_EXPR_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(dut_DPO_AUTO_EXPR_WORKLIB) ]; then mkdir -p $(dut_DPO_AUTO_EXPR_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(dut_DPO_AUTO_EXPR_WORKLIB)/dut_DPO_AUTO_EXPR.d :
	@if [ ! -d $(dut_DPO_AUTO_EXPR_WORKLIB) ]; then mkdir -p $(dut_DPO_AUTO_EXPR_WORKLIB); fi
	@touch $(dut_DPO_AUTO_EXPR_WORKLIB)/dut_DPO_AUTO_EXPR.d



#
# HLS config DPO_REGION
#

#
#	stratus_hls rule
#
LIB_DIRS_dut_DPO_REGION = 
LIB_INCLUDES_dut_DPO_REGION = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_DPO_REGION))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_dut_DPO_REGION = 
LIB_NAMES_FOR_VLOG_dut_DPO_REGION = 
PREFIXED_LIB_NAMES_dut_DPO_REGION = 
EXTRACT_LIB_DASHI_dut_DPO_REGION = $(shell echo "puts stdout [extractHoistLibDashIs project.tcl dut DPO_REGION]" | $(STRATUS_HOME)/bin/bdw_shell)
CCFLAGS_dut_DPO_REGION = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/DPO_REGION/c_parts -DDPO_REGION=1 -DBDW_RTL_dut_DPO_REGION=1 -DLAT=2 -DDPOPT_ALL $(LIB_INCLUDES_dut_DPO_REGION)
CCFLAGS_COSIM_dut_DPO_REGION = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/DPO_REGION/c_parts -DDPO_REGION=1 -DBDW_RTL_dut_DPO_REGION=1 -DLAT=2 -DDPOPT_ALL $(LIB_INCLUDES_dut_DPO_REGION)
CCFLAGS_BEH_dut_DPO_REGION = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/DPO_REGION/c_parts -DDPO_REGION=1 -DLAT=2 -DDPOPT_ALL $(LIB_INCLUDES_dut_DPO_REGION)
CCFLAGS_dut_DPO_REGION += ${BDW_CCFLAGS_TAIL}
CCFLAGS_COSIM_dut_DPO_REGION += ${BDW_CCFLAGS_TAIL}
CCFLAGS_BEH_dut_DPO_REGION += ${BDW_CCFLAGS_TAIL}

hls_dut_DPO_REGION : hlsc_dut_DPO_REGION

cynth_dut_DPO_REGION : hlsc_dut_DPO_REGION 

elab_dut_DPO_REGION : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/dut/DPO_REGION/stratus_hls.bdr

optim_dut_DPO_REGION : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/dut/DPO_REGION/stratus_hls.bdr

sched_dut_DPO_REGION : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/dut/DPO_REGION/stratus_hls.bdr

.PHONY: hlsc_dut_DPO_REGION hls_dut_DPO_REGION

hlsc_dut_DPO_REGION : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_rtl.cc BDW_DEP_CYNTH_CONFIG=DPO_REGION BDW_MODULE=dut BDW_HLS_CONFIG=DPO_REGION
else
	@bdw_exec -jobproject project.tcl -job hls.dut.DPO_REGION $(MAKE) CWBExec_hls=1 hlsc_dut_DPO_REGION
endif

clean_cynth_dut_DPO_REGION: clean_hls_dut_DPO_REGION

clean_dut_DPO_REGION: clean_hls_dut_DPO_REGION

clean_hls_dut_DPO_REGION:
	@rm -rf $(BDW_WORKLIB)/modules/dut/DPO_REGION
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.DPO_REGION
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.DPO_REGION.s

kill_hls_dut_DPO_REGION:
	@bdw_kill -job hls.dut.DPO_REGION
	@bdw_kill -job hls.dut.DPO_REGION.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),DPO_REGION)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_dut_DPO_REGION :
	bdw_htmlgen -project project.tcl -module dut -cynthconfig DPO_REGION





ifeq ($(CWBExec_hlsc),1)
$(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_rtl.v $(BDW_WORKLIB)/modules/dut/DPO_REGION/stratus_hls.bdr :  dut.cc  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/dut/DPO_REGION ]; then mkdir -p $(BDW_WORKLIB)/modules/dut/DPO_REGION; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=DPO_REGION BDW_CYNTH_CONFIG=DPO_REGION \
	BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_rtl.v BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_rtl.cc BDW_MODULE=dut BDW_CYNTH_CONFIG=DPO_REGION BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/dut/DPO_REGION BDW_HLS_CONFIG=DPO_REGION BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/dut/DPO_REGION \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_dut_DPO_REGION) \
		-d $(BDW_WORKLIB)/modules/dut/DPO_REGION -o dut_rtl.cc \
		--hls_module=dut --hls_config=DPO_REGION --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_dut_DPO_REGION))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_dut_DPO_REGION))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_dut_DPO_REGION))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_dut_DPO_REGION) \
		 dut.cc
	
	
	

else

$(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_rtl.v $(BDW_WORKLIB)/modules/dut/DPO_REGION/stratus_hls.bdr :  dut.cc  $(BDW_LIB_DEPS)
	bdw_exec -jobproject project.tcl -job hls.dut.DPO_REGION.s $(MAKE) -j1 CWBExec_hlsc=1 $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_rtl.v $(BDW_WORKLIB)/modules/dut/DPO_REGION/stratus_hls.bdr

endif

	
	
$(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_trace.h : $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_trace.h.updated

$(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_trace.h.updated : $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_rtl.cc $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module dut -cynthconfig DPO_REGION -vcd 
	@touch $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_trace.h.updated

catHLLog_dut_DPO_REGION:
	cat $(BDW_WORKLIB)/modules/dut/DPO_REGION/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_dut_DPO_REGION : hls_dut_DPO_REGION 


.PHONY: hls_dut_DPO_REGION

hls_dut_DPO_REGION hlsv_dut_DPO_REGION: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_dut_DPO_REGION)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_dut_DPO_REGION BDW_DEP_CYNTH_CONFIG=DPO_REGION
else
	@bdw_exec -jobproject project.tcl -job hlsv.dut.DPO_REGION $(MAKE) CWBExec_hlsv=1 hlsv_dut_DPO_REGION
endif

catVLGLog_dut_DPO_REGION : catHLLog_dut_DPO_REGION
	cat $(BDW_WORKLIB)/modules/dut/DPO_REGION/stratus_vlg.log

#
#	view rule
#

view_dut_DPO_REGION:
	@echo "ERROR: Schematic viewing target 'view_dut_DPO_REGION' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_rtl.o : $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_rtl.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/dut_wrap.cc `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl dut`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPO_REGION -I./ $(CCFLAGS_dut_DPO_REGION) $(EXTRACT_LIB_DASHI_dut_DPO_REGION) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_rtl.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

$(BDW_WORKLIB)/modules/dut/DPO_REGION/debug/dut_rtl.o : $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_rtl.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/dut_wrap.cc `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl dut`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPO_REGION -I./ $(CCFLAGS_dut_DPO_REGION) $(EXTRACT_LIB_DASHI_dut_DPO_REGION) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/dut/DPO_REGION/debug/dut_rtl.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_beh.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPO_REGION -I./ $(CCFLAGS_BEH_dut_DPO_REGION) -o $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_beh.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

$(BDW_WORKLIB)/modules/dut/DPO_REGION/debug/dut_beh.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPO_REGION -I./ $(CCFLAGS_BEH_dut_DPO_REGION) -o $(BDW_WORKLIB)/modules/dut/DPO_REGION/debug/dut_beh.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

#
# Cosim object file rule
#

$(BDW_WORKLIB)/modules/dut/DPO_REGION/dut.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPO_REGION -I./ $(CCFLAGS_COSIM_dut_DPO_REGION) -o $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

$(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_hoist.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPO_REGION -I./ $(CCFLAGS_dut_DPO_REGION) $(EXTRACT_LIB_DASHI_dut_DPO_REGION) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_hoist.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

$(BDW_WORKLIB)/modules/dut/DPO_REGION/debug/dut.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPO_REGION -I./ $(CCFLAGS_COSIM_dut_DPO_REGION) -o $(BDW_WORKLIB)/modules/dut/DPO_REGION/debug/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc


$(BDW_WORKLIB)/modules/dut/DPO_REGION/debug/dut_hoist.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPO_REGION -I./ $(CCFLAGS_dut_DPO_REGION) $(EXTRACT_LIB_DASHI_dut_DPO_REGION) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/dut/DPO_REGION/debug/dut_hoist.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/dut/DPO_REGION/dut.d :  dut.cc
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config DPO_REGION of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_dut_DPO_REGION)  dut.cc \
	| sed 's|dut\.o[ :]*|$(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_beh.o $(BDW_WORKLIB)/modules/dut/DPO_REGION/debug/dut_beh.o $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/dut/DPO_REGION"
##############################################################

dut_DPO_REGION_SRCDIR = $(BDW_WORKLIB)/modules/dut/DPO_REGION
dut_DPO_REGION_BEH_SRCDIR = $(BDW_WORKLIB)/libs/dut_DPO_REGION
dut_DPO_REGION_LIBNAME = dut_DPO_REGION
dut_DPO_REGION_WORKLIB = $(BDW_WORKLIB)/modules/dut/DPO_REGION
dut_DPO_REGION_C_PARTS_A = $(dut_DPO_REGION_WORKLIB)/objs/libdut_DPO_REGION.a

prep_c_dut_DPO_REGION : $(dut_DPO_REGION_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_DPO_REGION_WORKLIB) prep_c

prep_vlog_dut_DPO_REGION : $(dut_DPO_REGION_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_DPO_REGION_WORKLIB) prep_vlog

prep_dut_DPO_REGION : $(dut_DPO_REGION_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_DPO_REGION_WORKLIB) prep

$(dut_DPO_REGION_WORKLIB)/Makefile : $(dut_DPO_REGION_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(dut_DPO_REGION_WORKLIB) ]; then mkdir -p $(dut_DPO_REGION_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(dut_DPO_REGION_SRCDIR) -o $(dut_DPO_REGION_WORKLIB)/Makefile -module dut -cynthconfig DPO_REGION   

$(dut_DPO_REGION_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(dut_DPO_REGION_WORKLIB) ]; then mkdir -p $(dut_DPO_REGION_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(dut_DPO_REGION_WORKLIB)/dut_DPO_REGION.d :
	@if [ ! -d $(dut_DPO_REGION_WORKLIB) ]; then mkdir -p $(dut_DPO_REGION_WORKLIB); fi
	@touch $(dut_DPO_REGION_WORKLIB)/dut_DPO_REGION.d



#
# HLS config FLAT_UNROLL_ALL_FAST
#

#
#	stratus_hls rule
#
LIB_DIRS_dut_FLAT_UNROLL_ALL_FAST = 
LIB_INCLUDES_dut_FLAT_UNROLL_ALL_FAST = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_FLAT_UNROLL_ALL_FAST))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_dut_FLAT_UNROLL_ALL_FAST = 
LIB_NAMES_FOR_VLOG_dut_FLAT_UNROLL_ALL_FAST = 
PREFIXED_LIB_NAMES_dut_FLAT_UNROLL_ALL_FAST = 
EXTRACT_LIB_DASHI_dut_FLAT_UNROLL_ALL_FAST = $(shell echo "puts stdout [extractHoistLibDashIs project.tcl dut FLAT_UNROLL_ALL_FAST]" | $(STRATUS_HOME)/bin/bdw_shell)
CCFLAGS_dut_FLAT_UNROLL_ALL_FAST = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/c_parts -DFLAT_UNROLL_ALL_FAST=1 -DBDW_RTL_dut_FLAT_UNROLL_ALL_FAST=1  $(LIB_INCLUDES_dut_FLAT_UNROLL_ALL_FAST)
CCFLAGS_COSIM_dut_FLAT_UNROLL_ALL_FAST = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/c_parts -DFLAT_UNROLL_ALL_FAST=1 -DBDW_RTL_dut_FLAT_UNROLL_ALL_FAST=1  $(LIB_INCLUDES_dut_FLAT_UNROLL_ALL_FAST)
CCFLAGS_BEH_dut_FLAT_UNROLL_ALL_FAST = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/c_parts -DFLAT_UNROLL_ALL_FAST=1  $(LIB_INCLUDES_dut_FLAT_UNROLL_ALL_FAST)
CCFLAGS_dut_FLAT_UNROLL_ALL_FAST += ${BDW_CCFLAGS_TAIL}
CCFLAGS_COSIM_dut_FLAT_UNROLL_ALL_FAST += ${BDW_CCFLAGS_TAIL}
CCFLAGS_BEH_dut_FLAT_UNROLL_ALL_FAST += ${BDW_CCFLAGS_TAIL}

hls_dut_FLAT_UNROLL_ALL_FAST : hlsc_dut_FLAT_UNROLL_ALL_FAST

cynth_dut_FLAT_UNROLL_ALL_FAST : hlsc_dut_FLAT_UNROLL_ALL_FAST 

elab_dut_FLAT_UNROLL_ALL_FAST : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/stratus_hls.bdr

optim_dut_FLAT_UNROLL_ALL_FAST : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/stratus_hls.bdr

sched_dut_FLAT_UNROLL_ALL_FAST : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/stratus_hls.bdr

.PHONY: hlsc_dut_FLAT_UNROLL_ALL_FAST hls_dut_FLAT_UNROLL_ALL_FAST

hlsc_dut_FLAT_UNROLL_ALL_FAST : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_rtl.cc BDW_DEP_CYNTH_CONFIG=FLAT_UNROLL_ALL_FAST BDW_MODULE=dut BDW_HLS_CONFIG=FLAT_UNROLL_ALL_FAST
else
	@bdw_exec -jobproject project.tcl -job hls.dut.FLAT_UNROLL_ALL_FAST $(MAKE) CWBExec_hls=1 hlsc_dut_FLAT_UNROLL_ALL_FAST
endif

clean_cynth_dut_FLAT_UNROLL_ALL_FAST: clean_hls_dut_FLAT_UNROLL_ALL_FAST

clean_dut_FLAT_UNROLL_ALL_FAST: clean_hls_dut_FLAT_UNROLL_ALL_FAST

clean_hls_dut_FLAT_UNROLL_ALL_FAST:
	@rm -rf $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.FLAT_UNROLL_ALL_FAST
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.FLAT_UNROLL_ALL_FAST.s

kill_hls_dut_FLAT_UNROLL_ALL_FAST:
	@bdw_kill -job hls.dut.FLAT_UNROLL_ALL_FAST
	@bdw_kill -job hls.dut.FLAT_UNROLL_ALL_FAST.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),FLAT_UNROLL_ALL_FAST)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_dut_FLAT_UNROLL_ALL_FAST :
	bdw_htmlgen -project project.tcl -module dut -cynthconfig FLAT_UNROLL_ALL_FAST





ifeq ($(CWBExec_hlsc),1)
$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_rtl.v $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/stratus_hls.bdr :  dut.cc  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST ]; then mkdir -p $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=FLAT_UNROLL_ALL_FAST BDW_CYNTH_CONFIG=FLAT_UNROLL_ALL_FAST \
	BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_rtl.v BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_rtl.cc BDW_MODULE=dut BDW_CYNTH_CONFIG=FLAT_UNROLL_ALL_FAST BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST BDW_HLS_CONFIG=FLAT_UNROLL_ALL_FAST BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_dut_FLAT_UNROLL_ALL_FAST) \
		-d $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST -o dut_rtl.cc \
		--hls_module=dut --hls_config=FLAT_UNROLL_ALL_FAST --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_dut_FLAT_UNROLL_ALL_FAST))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_dut_FLAT_UNROLL_ALL_FAST))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_dut_FLAT_UNROLL_ALL_FAST))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_dut_FLAT_UNROLL_ALL_FAST) \
		 dut.cc
	
	
	

else

$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_rtl.v $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/stratus_hls.bdr :  dut.cc  $(BDW_LIB_DEPS)
	bdw_exec -jobproject project.tcl -job hls.dut.FLAT_UNROLL_ALL_FAST.s $(MAKE) -j1 CWBExec_hlsc=1 $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_rtl.v $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/stratus_hls.bdr

endif

	
	
$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_trace.h : $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_trace.h.updated

$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_trace.h.updated : $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_rtl.cc $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module dut -cynthconfig FLAT_UNROLL_ALL_FAST -vcd 
	@touch $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_trace.h.updated

catHLLog_dut_FLAT_UNROLL_ALL_FAST:
	cat $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_dut_FLAT_UNROLL_ALL_FAST : hls_dut_FLAT_UNROLL_ALL_FAST 


.PHONY: hls_dut_FLAT_UNROLL_ALL_FAST

hls_dut_FLAT_UNROLL_ALL_FAST hlsv_dut_FLAT_UNROLL_ALL_FAST: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_dut_FLAT_UNROLL_ALL_FAST)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_dut_FLAT_UNROLL_ALL_FAST BDW_DEP_CYNTH_CONFIG=FLAT_UNROLL_ALL_FAST
else
	@bdw_exec -jobproject project.tcl -job hlsv.dut.FLAT_UNROLL_ALL_FAST $(MAKE) CWBExec_hlsv=1 hlsv_dut_FLAT_UNROLL_ALL_FAST
endif

catVLGLog_dut_FLAT_UNROLL_ALL_FAST : catHLLog_dut_FLAT_UNROLL_ALL_FAST
	cat $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/stratus_vlg.log

#
#	view rule
#

view_dut_FLAT_UNROLL_ALL_FAST:
	@echo "ERROR: Schematic viewing target 'view_dut_FLAT_UNROLL_ALL_FAST' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_rtl.o : $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_rtl.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/dut_wrap.cc `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl dut`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST -I./ $(CCFLAGS_dut_FLAT_UNROLL_ALL_FAST) $(EXTRACT_LIB_DASHI_dut_FLAT_UNROLL_ALL_FAST) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_rtl.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/debug/dut_rtl.o : $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_rtl.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/dut_wrap.cc `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl dut`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST -I./ $(CCFLAGS_dut_FLAT_UNROLL_ALL_FAST) $(EXTRACT_LIB_DASHI_dut_FLAT_UNROLL_ALL_FAST) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/debug/dut_rtl.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_beh.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST -I./ $(CCFLAGS_BEH_dut_FLAT_UNROLL_ALL_FAST) -o $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_beh.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/debug/dut_beh.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST -I./ $(CCFLAGS_BEH_dut_FLAT_UNROLL_ALL_FAST) -o $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/debug/dut_beh.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

#
# Cosim object file rule
#

$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST -I./ $(CCFLAGS_COSIM_dut_FLAT_UNROLL_ALL_FAST) -o $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_hoist.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST -I./ $(CCFLAGS_dut_FLAT_UNROLL_ALL_FAST) $(EXTRACT_LIB_DASHI_dut_FLAT_UNROLL_ALL_FAST) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_hoist.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/debug/dut.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST -I./ $(CCFLAGS_COSIM_dut_FLAT_UNROLL_ALL_FAST) -o $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/debug/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc


$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/debug/dut_hoist.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST -I./ $(CCFLAGS_dut_FLAT_UNROLL_ALL_FAST) $(EXTRACT_LIB_DASHI_dut_FLAT_UNROLL_ALL_FAST) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/debug/dut_hoist.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut.d :  dut.cc
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config FLAT_UNROLL_ALL_FAST of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_dut_FLAT_UNROLL_ALL_FAST)  dut.cc \
	| sed 's|dut\.o[ :]*|$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_beh.o $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/debug/dut_beh.o $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST"
##############################################################

dut_FLAT_UNROLL_ALL_FAST_SRCDIR = $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST
dut_FLAT_UNROLL_ALL_FAST_BEH_SRCDIR = $(BDW_WORKLIB)/libs/dut_FLAT_UNROLL_ALL_FAST
dut_FLAT_UNROLL_ALL_FAST_LIBNAME = dut_FLAT_UNROLL_ALL_FAST
dut_FLAT_UNROLL_ALL_FAST_WORKLIB = $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST
dut_FLAT_UNROLL_ALL_FAST_C_PARTS_A = $(dut_FLAT_UNROLL_ALL_FAST_WORKLIB)/objs/libdut_FLAT_UNROLL_ALL_FAST.a

prep_c_dut_FLAT_UNROLL_ALL_FAST : $(dut_FLAT_UNROLL_ALL_FAST_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_FLAT_UNROLL_ALL_FAST_WORKLIB) prep_c

prep_vlog_dut_FLAT_UNROLL_ALL_FAST : $(dut_FLAT_UNROLL_ALL_FAST_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_FLAT_UNROLL_ALL_FAST_WORKLIB) prep_vlog

prep_dut_FLAT_UNROLL_ALL_FAST : $(dut_FLAT_UNROLL_ALL_FAST_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_FLAT_UNROLL_ALL_FAST_WORKLIB) prep

$(dut_FLAT_UNROLL_ALL_FAST_WORKLIB)/Makefile : $(dut_FLAT_UNROLL_ALL_FAST_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(dut_FLAT_UNROLL_ALL_FAST_WORKLIB) ]; then mkdir -p $(dut_FLAT_UNROLL_ALL_FAST_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(dut_FLAT_UNROLL_ALL_FAST_SRCDIR) -o $(dut_FLAT_UNROLL_ALL_FAST_WORKLIB)/Makefile -module dut -cynthconfig FLAT_UNROLL_ALL_FAST   

$(dut_FLAT_UNROLL_ALL_FAST_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(dut_FLAT_UNROLL_ALL_FAST_WORKLIB) ]; then mkdir -p $(dut_FLAT_UNROLL_ALL_FAST_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(dut_FLAT_UNROLL_ALL_FAST_WORKLIB)/dut_FLAT_UNROLL_ALL_FAST.d :
	@if [ ! -d $(dut_FLAT_UNROLL_ALL_FAST_WORKLIB) ]; then mkdir -p $(dut_FLAT_UNROLL_ALL_FAST_WORKLIB); fi
	@touch $(dut_FLAT_UNROLL_ALL_FAST_WORKLIB)/dut_FLAT_UNROLL_ALL_FAST.d



#
# HLS config FLAT_UNROLL_ALL
#

#
#	stratus_hls rule
#
LIB_DIRS_dut_FLAT_UNROLL_ALL = 
LIB_INCLUDES_dut_FLAT_UNROLL_ALL = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_FLAT_UNROLL_ALL))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_dut_FLAT_UNROLL_ALL = 
LIB_NAMES_FOR_VLOG_dut_FLAT_UNROLL_ALL = 
PREFIXED_LIB_NAMES_dut_FLAT_UNROLL_ALL = 
EXTRACT_LIB_DASHI_dut_FLAT_UNROLL_ALL = $(shell echo "puts stdout [extractHoistLibDashIs project.tcl dut FLAT_UNROLL_ALL]" | $(STRATUS_HOME)/bin/bdw_shell)
CCFLAGS_dut_FLAT_UNROLL_ALL = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/c_parts -DFLAT_UNROLL_ALL=1 -DBDW_RTL_dut_FLAT_UNROLL_ALL=1  $(LIB_INCLUDES_dut_FLAT_UNROLL_ALL)
CCFLAGS_COSIM_dut_FLAT_UNROLL_ALL = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/c_parts -DFLAT_UNROLL_ALL=1 -DBDW_RTL_dut_FLAT_UNROLL_ALL=1  $(LIB_INCLUDES_dut_FLAT_UNROLL_ALL)
CCFLAGS_BEH_dut_FLAT_UNROLL_ALL = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/c_parts -DFLAT_UNROLL_ALL=1  $(LIB_INCLUDES_dut_FLAT_UNROLL_ALL)
CCFLAGS_dut_FLAT_UNROLL_ALL += ${BDW_CCFLAGS_TAIL}
CCFLAGS_COSIM_dut_FLAT_UNROLL_ALL += ${BDW_CCFLAGS_TAIL}
CCFLAGS_BEH_dut_FLAT_UNROLL_ALL += ${BDW_CCFLAGS_TAIL}

hls_dut_FLAT_UNROLL_ALL : hlsc_dut_FLAT_UNROLL_ALL

cynth_dut_FLAT_UNROLL_ALL : hlsc_dut_FLAT_UNROLL_ALL 

elab_dut_FLAT_UNROLL_ALL : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/stratus_hls.bdr

optim_dut_FLAT_UNROLL_ALL : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/stratus_hls.bdr

sched_dut_FLAT_UNROLL_ALL : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/stratus_hls.bdr

.PHONY: hlsc_dut_FLAT_UNROLL_ALL hls_dut_FLAT_UNROLL_ALL

hlsc_dut_FLAT_UNROLL_ALL : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_rtl.cc BDW_DEP_CYNTH_CONFIG=FLAT_UNROLL_ALL BDW_MODULE=dut BDW_HLS_CONFIG=FLAT_UNROLL_ALL
else
	@bdw_exec -jobproject project.tcl -job hls.dut.FLAT_UNROLL_ALL $(MAKE) CWBExec_hls=1 hlsc_dut_FLAT_UNROLL_ALL
endif

clean_cynth_dut_FLAT_UNROLL_ALL: clean_hls_dut_FLAT_UNROLL_ALL

clean_dut_FLAT_UNROLL_ALL: clean_hls_dut_FLAT_UNROLL_ALL

clean_hls_dut_FLAT_UNROLL_ALL:
	@rm -rf $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.FLAT_UNROLL_ALL
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.FLAT_UNROLL_ALL.s

kill_hls_dut_FLAT_UNROLL_ALL:
	@bdw_kill -job hls.dut.FLAT_UNROLL_ALL
	@bdw_kill -job hls.dut.FLAT_UNROLL_ALL.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),FLAT_UNROLL_ALL)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_dut_FLAT_UNROLL_ALL :
	bdw_htmlgen -project project.tcl -module dut -cynthconfig FLAT_UNROLL_ALL





ifeq ($(CWBExec_hlsc),1)
$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_rtl.v $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/stratus_hls.bdr :  dut.cc  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL ]; then mkdir -p $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=FLAT_UNROLL_ALL BDW_CYNTH_CONFIG=FLAT_UNROLL_ALL \
	BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_rtl.v BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_rtl.cc BDW_MODULE=dut BDW_CYNTH_CONFIG=FLAT_UNROLL_ALL BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL BDW_HLS_CONFIG=FLAT_UNROLL_ALL BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_dut_FLAT_UNROLL_ALL) \
		-d $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL -o dut_rtl.cc \
		--hls_module=dut --hls_config=FLAT_UNROLL_ALL --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_dut_FLAT_UNROLL_ALL))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_dut_FLAT_UNROLL_ALL))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_dut_FLAT_UNROLL_ALL))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_dut_FLAT_UNROLL_ALL) \
		 dut.cc
	
	
	

else

$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_rtl.v $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/stratus_hls.bdr :  dut.cc  $(BDW_LIB_DEPS)
	bdw_exec -jobproject project.tcl -job hls.dut.FLAT_UNROLL_ALL.s $(MAKE) -j1 CWBExec_hlsc=1 $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_rtl.v $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/stratus_hls.bdr

endif

	
	
$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_trace.h : $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_trace.h.updated

$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_trace.h.updated : $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_rtl.cc $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module dut -cynthconfig FLAT_UNROLL_ALL -vcd 
	@touch $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_trace.h.updated

catHLLog_dut_FLAT_UNROLL_ALL:
	cat $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_dut_FLAT_UNROLL_ALL : hls_dut_FLAT_UNROLL_ALL 


.PHONY: hls_dut_FLAT_UNROLL_ALL

hls_dut_FLAT_UNROLL_ALL hlsv_dut_FLAT_UNROLL_ALL: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_dut_FLAT_UNROLL_ALL)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_dut_FLAT_UNROLL_ALL BDW_DEP_CYNTH_CONFIG=FLAT_UNROLL_ALL
else
	@bdw_exec -jobproject project.tcl -job hlsv.dut.FLAT_UNROLL_ALL $(MAKE) CWBExec_hlsv=1 hlsv_dut_FLAT_UNROLL_ALL
endif

catVLGLog_dut_FLAT_UNROLL_ALL : catHLLog_dut_FLAT_UNROLL_ALL
	cat $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/stratus_vlg.log

#
#	view rule
#

view_dut_FLAT_UNROLL_ALL:
	@echo "ERROR: Schematic viewing target 'view_dut_FLAT_UNROLL_ALL' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_rtl.o : $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_rtl.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/dut_wrap.cc `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl dut`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL -I./ $(CCFLAGS_dut_FLAT_UNROLL_ALL) $(EXTRACT_LIB_DASHI_dut_FLAT_UNROLL_ALL) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_rtl.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/debug/dut_rtl.o : $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_rtl.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/dut_wrap.cc `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl dut`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL -I./ $(CCFLAGS_dut_FLAT_UNROLL_ALL) $(EXTRACT_LIB_DASHI_dut_FLAT_UNROLL_ALL) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/debug/dut_rtl.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_beh.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL -I./ $(CCFLAGS_BEH_dut_FLAT_UNROLL_ALL) -o $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_beh.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/debug/dut_beh.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL -I./ $(CCFLAGS_BEH_dut_FLAT_UNROLL_ALL) -o $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/debug/dut_beh.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

#
# Cosim object file rule
#

$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL -I./ $(CCFLAGS_COSIM_dut_FLAT_UNROLL_ALL) -o $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_hoist.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL -I./ $(CCFLAGS_dut_FLAT_UNROLL_ALL) $(EXTRACT_LIB_DASHI_dut_FLAT_UNROLL_ALL) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_hoist.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/debug/dut.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL -I./ $(CCFLAGS_COSIM_dut_FLAT_UNROLL_ALL) -o $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/debug/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc


$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/debug/dut_hoist.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL -I./ $(CCFLAGS_dut_FLAT_UNROLL_ALL) $(EXTRACT_LIB_DASHI_dut_FLAT_UNROLL_ALL) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/debug/dut_hoist.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut.d :  dut.cc
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config FLAT_UNROLL_ALL of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_dut_FLAT_UNROLL_ALL)  dut.cc \
	| sed 's|dut\.o[ :]*|$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_beh.o $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/debug/dut_beh.o $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL"
##############################################################

dut_FLAT_UNROLL_ALL_SRCDIR = $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL
dut_FLAT_UNROLL_ALL_BEH_SRCDIR = $(BDW_WORKLIB)/libs/dut_FLAT_UNROLL_ALL
dut_FLAT_UNROLL_ALL_LIBNAME = dut_FLAT_UNROLL_ALL
dut_FLAT_UNROLL_ALL_WORKLIB = $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL
dut_FLAT_UNROLL_ALL_C_PARTS_A = $(dut_FLAT_UNROLL_ALL_WORKLIB)/objs/libdut_FLAT_UNROLL_ALL.a

prep_c_dut_FLAT_UNROLL_ALL : $(dut_FLAT_UNROLL_ALL_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_FLAT_UNROLL_ALL_WORKLIB) prep_c

prep_vlog_dut_FLAT_UNROLL_ALL : $(dut_FLAT_UNROLL_ALL_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_FLAT_UNROLL_ALL_WORKLIB) prep_vlog

prep_dut_FLAT_UNROLL_ALL : $(dut_FLAT_UNROLL_ALL_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_FLAT_UNROLL_ALL_WORKLIB) prep

$(dut_FLAT_UNROLL_ALL_WORKLIB)/Makefile : $(dut_FLAT_UNROLL_ALL_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(dut_FLAT_UNROLL_ALL_WORKLIB) ]; then mkdir -p $(dut_FLAT_UNROLL_ALL_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(dut_FLAT_UNROLL_ALL_SRCDIR) -o $(dut_FLAT_UNROLL_ALL_WORKLIB)/Makefile -module dut -cynthconfig FLAT_UNROLL_ALL   

$(dut_FLAT_UNROLL_ALL_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(dut_FLAT_UNROLL_ALL_WORKLIB) ]; then mkdir -p $(dut_FLAT_UNROLL_ALL_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(dut_FLAT_UNROLL_ALL_WORKLIB)/dut_FLAT_UNROLL_ALL.d :
	@if [ ! -d $(dut_FLAT_UNROLL_ALL_WORKLIB) ]; then mkdir -p $(dut_FLAT_UNROLL_ALL_WORKLIB); fi
	@touch $(dut_FLAT_UNROLL_ALL_WORKLIB)/dut_FLAT_UNROLL_ALL.d



#
# HLS config PIPELINE
#

#
#	stratus_hls rule
#
LIB_DIRS_dut_PIPELINE = 
LIB_INCLUDES_dut_PIPELINE = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_PIPELINE))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_dut_PIPELINE = 
LIB_NAMES_FOR_VLOG_dut_PIPELINE = 
PREFIXED_LIB_NAMES_dut_PIPELINE = 
EXTRACT_LIB_DASHI_dut_PIPELINE = $(shell echo "puts stdout [extractHoistLibDashIs project.tcl dut PIPELINE]" | $(STRATUS_HOME)/bin/bdw_shell)
CCFLAGS_dut_PIPELINE = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/PIPELINE/c_parts -DPIPELINE=1 -DBDW_RTL_dut_PIPELINE=1 -DII=1 $(LIB_INCLUDES_dut_PIPELINE)
CCFLAGS_COSIM_dut_PIPELINE = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/PIPELINE/c_parts -DPIPELINE=1 -DBDW_RTL_dut_PIPELINE=1 -DII=1 $(LIB_INCLUDES_dut_PIPELINE)
CCFLAGS_BEH_dut_PIPELINE = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/PIPELINE/c_parts -DPIPELINE=1 -DII=1 $(LIB_INCLUDES_dut_PIPELINE)
CCFLAGS_dut_PIPELINE += ${BDW_CCFLAGS_TAIL}
CCFLAGS_COSIM_dut_PIPELINE += ${BDW_CCFLAGS_TAIL}
CCFLAGS_BEH_dut_PIPELINE += ${BDW_CCFLAGS_TAIL}

hls_dut_PIPELINE : hlsc_dut_PIPELINE

cynth_dut_PIPELINE : hlsc_dut_PIPELINE 

elab_dut_PIPELINE : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/dut/PIPELINE/stratus_hls.bdr

optim_dut_PIPELINE : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/dut/PIPELINE/stratus_hls.bdr

sched_dut_PIPELINE : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/dut/PIPELINE/stratus_hls.bdr

.PHONY: hlsc_dut_PIPELINE hls_dut_PIPELINE

hlsc_dut_PIPELINE : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.cc BDW_DEP_CYNTH_CONFIG=PIPELINE BDW_MODULE=dut BDW_HLS_CONFIG=PIPELINE
else
	@bdw_exec -jobproject project.tcl -job hls.dut.PIPELINE $(MAKE) CWBExec_hls=1 hlsc_dut_PIPELINE
endif

clean_cynth_dut_PIPELINE: clean_hls_dut_PIPELINE

clean_dut_PIPELINE: clean_hls_dut_PIPELINE

clean_hls_dut_PIPELINE:
	@rm -rf $(BDW_WORKLIB)/modules/dut/PIPELINE
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.PIPELINE
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.PIPELINE.s

kill_hls_dut_PIPELINE:
	@bdw_kill -job hls.dut.PIPELINE
	@bdw_kill -job hls.dut.PIPELINE.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),PIPELINE)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/dut/PIPELINE/dut.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_dut_PIPELINE :
	bdw_htmlgen -project project.tcl -module dut -cynthconfig PIPELINE





ifeq ($(CWBExec_hlsc),1)
$(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.v $(BDW_WORKLIB)/modules/dut/PIPELINE/stratus_hls.bdr :  dut.cc  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/dut/PIPELINE ]; then mkdir -p $(BDW_WORKLIB)/modules/dut/PIPELINE; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=PIPELINE BDW_CYNTH_CONFIG=PIPELINE \
	BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.v BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.cc BDW_MODULE=dut BDW_CYNTH_CONFIG=PIPELINE BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/dut/PIPELINE BDW_HLS_CONFIG=PIPELINE BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/dut/PIPELINE \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_dut_PIPELINE) \
		-d $(BDW_WORKLIB)/modules/dut/PIPELINE -o dut_rtl.cc \
		--hls_module=dut --hls_config=PIPELINE --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_dut_PIPELINE))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_dut_PIPELINE))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_dut_PIPELINE))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_dut_PIPELINE) \
		 dut.cc
	
	
	

else

$(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.v $(BDW_WORKLIB)/modules/dut/PIPELINE/stratus_hls.bdr :  dut.cc  $(BDW_LIB_DEPS)
	bdw_exec -jobproject project.tcl -job hls.dut.PIPELINE.s $(MAKE) -j1 CWBExec_hlsc=1 $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.v $(BDW_WORKLIB)/modules/dut/PIPELINE/stratus_hls.bdr

endif

	
	
$(BDW_WORKLIB)/modules/dut/PIPELINE/dut_trace.h : $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_trace.h.updated

$(BDW_WORKLIB)/modules/dut/PIPELINE/dut_trace.h.updated : $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.cc $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module dut -cynthconfig PIPELINE -vcd 
	@touch $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_trace.h.updated

catHLLog_dut_PIPELINE:
	cat $(BDW_WORKLIB)/modules/dut/PIPELINE/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_dut_PIPELINE : hls_dut_PIPELINE 


.PHONY: hls_dut_PIPELINE

hls_dut_PIPELINE hlsv_dut_PIPELINE: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_dut_PIPELINE)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_dut_PIPELINE BDW_DEP_CYNTH_CONFIG=PIPELINE
else
	@bdw_exec -jobproject project.tcl -job hlsv.dut.PIPELINE $(MAKE) CWBExec_hlsv=1 hlsv_dut_PIPELINE
endif

catVLGLog_dut_PIPELINE : catHLLog_dut_PIPELINE
	cat $(BDW_WORKLIB)/modules/dut/PIPELINE/stratus_vlg.log

#
#	view rule
#

view_dut_PIPELINE:
	@echo "ERROR: Schematic viewing target 'view_dut_PIPELINE' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.o : $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/dut_wrap.cc `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl dut`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/PIPELINE -I./ $(CCFLAGS_dut_PIPELINE) $(EXTRACT_LIB_DASHI_dut_PIPELINE) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

$(BDW_WORKLIB)/modules/dut/PIPELINE/debug/dut_rtl.o : $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/dut_wrap.cc `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl dut`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/PIPELINE -I./ $(CCFLAGS_dut_PIPELINE) $(EXTRACT_LIB_DASHI_dut_PIPELINE) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/dut/PIPELINE/debug/dut_rtl.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/dut/PIPELINE/dut_beh.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/PIPELINE -I./ $(CCFLAGS_BEH_dut_PIPELINE) -o $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_beh.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

$(BDW_WORKLIB)/modules/dut/PIPELINE/debug/dut_beh.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/PIPELINE -I./ $(CCFLAGS_BEH_dut_PIPELINE) -o $(BDW_WORKLIB)/modules/dut/PIPELINE/debug/dut_beh.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

#
# Cosim object file rule
#

$(BDW_WORKLIB)/modules/dut/PIPELINE/dut.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/PIPELINE -I./ $(CCFLAGS_COSIM_dut_PIPELINE) -o $(BDW_WORKLIB)/modules/dut/PIPELINE/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

$(BDW_WORKLIB)/modules/dut/PIPELINE/dut_hoist.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/PIPELINE -I./ $(CCFLAGS_dut_PIPELINE) $(EXTRACT_LIB_DASHI_dut_PIPELINE) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_hoist.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

$(BDW_WORKLIB)/modules/dut/PIPELINE/debug/dut.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/PIPELINE -I./ $(CCFLAGS_COSIM_dut_PIPELINE) -o $(BDW_WORKLIB)/modules/dut/PIPELINE/debug/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc


$(BDW_WORKLIB)/modules/dut/PIPELINE/debug/dut_hoist.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/PIPELINE -I./ $(CCFLAGS_dut_PIPELINE) $(EXTRACT_LIB_DASHI_dut_PIPELINE) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/dut/PIPELINE/debug/dut_hoist.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/dut/PIPELINE/dut.d :  dut.cc
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config PIPELINE of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_dut_PIPELINE)  dut.cc \
	| sed 's|dut\.o[ :]*|$(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_beh.o $(BDW_WORKLIB)/modules/dut/PIPELINE/debug/dut_beh.o $(BDW_WORKLIB)/modules/dut/PIPELINE/dut.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/dut/PIPELINE"
##############################################################

dut_PIPELINE_SRCDIR = $(BDW_WORKLIB)/modules/dut/PIPELINE
dut_PIPELINE_BEH_SRCDIR = $(BDW_WORKLIB)/libs/dut_PIPELINE
dut_PIPELINE_LIBNAME = dut_PIPELINE
dut_PIPELINE_WORKLIB = $(BDW_WORKLIB)/modules/dut/PIPELINE
dut_PIPELINE_C_PARTS_A = $(dut_PIPELINE_WORKLIB)/objs/libdut_PIPELINE.a

prep_c_dut_PIPELINE : $(dut_PIPELINE_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_PIPELINE_WORKLIB) prep_c

prep_vlog_dut_PIPELINE : $(dut_PIPELINE_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_PIPELINE_WORKLIB) prep_vlog

prep_dut_PIPELINE : $(dut_PIPELINE_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_PIPELINE_WORKLIB) prep

$(dut_PIPELINE_WORKLIB)/Makefile : $(dut_PIPELINE_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(dut_PIPELINE_WORKLIB) ]; then mkdir -p $(dut_PIPELINE_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(dut_PIPELINE_SRCDIR) -o $(dut_PIPELINE_WORKLIB)/Makefile -module dut -cynthconfig PIPELINE   

$(dut_PIPELINE_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(dut_PIPELINE_WORKLIB) ]; then mkdir -p $(dut_PIPELINE_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(dut_PIPELINE_WORKLIB)/dut_PIPELINE.d :
	@if [ ! -d $(dut_PIPELINE_WORKLIB) ]; then mkdir -p $(dut_PIPELINE_WORKLIB); fi
	@touch $(dut_PIPELINE_WORKLIB)/dut_PIPELINE.d



#
# Rules for configured systemModules
#


#
# Per-hls_config rules
#

cynth_NODPO:  cynth_dut_NODPO
hlsc_NODPO:  
	$(MAKE) -j1 hlsc_dut_NODPO

cynthvlg_NODPO: hls_NODPO
hls_NODPO:  
	$(MAKE) -j1 hls_dut_NODPO

cynthvlg_NODPO: elab_NODPO
elab_NODPO:  
	$(MAKE) -j1 elab_dut_NODPO

cynthvlg_NODPO: optim_NODPO
optim_NODPO:  
	$(MAKE) -j1 optim_dut_NODPO

cynthvlg_NODPO: sched_NODPO
sched_NODPO:  
	$(MAKE) -j1 sched_dut_NODPO

view_NODPO:
	@echo "ERROR: Schematic viewing target 'view_NODPO' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."


clean_NODPO:
	@rm -f $(BDW_WORKLIB)/modules/dut/NODPO/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/NODPO/stratus_hls.bdr


cynth_DPO_AUTO_EXPR:  cynth_dut_DPO_AUTO_EXPR
hlsc_DPO_AUTO_EXPR:  
	$(MAKE) -j1 hlsc_dut_DPO_AUTO_EXPR

cynthvlg_DPO_AUTO_EXPR: hls_DPO_AUTO_EXPR
hls_DPO_AUTO_EXPR:  
	$(MAKE) -j1 hls_dut_DPO_AUTO_EXPR

cynthvlg_DPO_AUTO_EXPR: elab_DPO_AUTO_EXPR
elab_DPO_AUTO_EXPR:  
	$(MAKE) -j1 elab_dut_DPO_AUTO_EXPR

cynthvlg_DPO_AUTO_EXPR: optim_DPO_AUTO_EXPR
optim_DPO_AUTO_EXPR:  
	$(MAKE) -j1 optim_dut_DPO_AUTO_EXPR

cynthvlg_DPO_AUTO_EXPR: sched_DPO_AUTO_EXPR
sched_DPO_AUTO_EXPR:  
	$(MAKE) -j1 sched_dut_DPO_AUTO_EXPR

view_DPO_AUTO_EXPR:
	@echo "ERROR: Schematic viewing target 'view_DPO_AUTO_EXPR' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."


clean_DPO_AUTO_EXPR:
	@rm -f $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/stratus_hls.bdr


cynth_DPO_AUTO_OP:  cynth_dut_DPO_AUTO_OP
hlsc_DPO_AUTO_OP:  
	$(MAKE) -j1 hlsc_dut_DPO_AUTO_OP

cynthvlg_DPO_AUTO_OP: hls_DPO_AUTO_OP
hls_DPO_AUTO_OP:  
	$(MAKE) -j1 hls_dut_DPO_AUTO_OP

cynthvlg_DPO_AUTO_OP: elab_DPO_AUTO_OP
elab_DPO_AUTO_OP:  
	$(MAKE) -j1 elab_dut_DPO_AUTO_OP

cynthvlg_DPO_AUTO_OP: optim_DPO_AUTO_OP
optim_DPO_AUTO_OP:  
	$(MAKE) -j1 optim_dut_DPO_AUTO_OP

cynthvlg_DPO_AUTO_OP: sched_DPO_AUTO_OP
sched_DPO_AUTO_OP:  
	$(MAKE) -j1 sched_dut_DPO_AUTO_OP

view_DPO_AUTO_OP:
	@echo "ERROR: Schematic viewing target 'view_DPO_AUTO_OP' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."


clean_DPO_AUTO_OP:
	@rm -f $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/stratus_hls.bdr


cynth_DPA:  cynth_dut_DPA
hlsc_DPA:  
	$(MAKE) -j1 hlsc_dut_DPA

cynthvlg_DPA: hls_DPA
hls_DPA:  
	$(MAKE) -j1 hls_dut_DPA

cynthvlg_DPA: elab_DPA
elab_DPA:  
	$(MAKE) -j1 elab_dut_DPA

cynthvlg_DPA: optim_DPA
optim_DPA:  
	$(MAKE) -j1 optim_dut_DPA

cynthvlg_DPA: sched_DPA
sched_DPA:  
	$(MAKE) -j1 sched_dut_DPA

view_DPA:
	@echo "ERROR: Schematic viewing target 'view_DPA' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."


clean_DPA:
	@rm -f $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/DPA/stratus_hls.bdr


cynth_PIPELINE:  cynth_dut_PIPELINE
hlsc_PIPELINE:  
	$(MAKE) -j1 hlsc_dut_PIPELINE

cynthvlg_PIPELINE: hls_PIPELINE
hls_PIPELINE:  
	$(MAKE) -j1 hls_dut_PIPELINE

cynthvlg_PIPELINE: elab_PIPELINE
elab_PIPELINE:  
	$(MAKE) -j1 elab_dut_PIPELINE

cynthvlg_PIPELINE: optim_PIPELINE
optim_PIPELINE:  
	$(MAKE) -j1 optim_dut_PIPELINE

cynthvlg_PIPELINE: sched_PIPELINE
sched_PIPELINE:  
	$(MAKE) -j1 sched_dut_PIPELINE

view_PIPELINE:
	@echo "ERROR: Schematic viewing target 'view_PIPELINE' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."


clean_PIPELINE:
	@rm -f $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/PIPELINE/stratus_hls.bdr


cynth_FLAT_UNROLL_ALL:  cynth_dut_FLAT_UNROLL_ALL
hlsc_FLAT_UNROLL_ALL:  
	$(MAKE) -j1 hlsc_dut_FLAT_UNROLL_ALL

cynthvlg_FLAT_UNROLL_ALL: hls_FLAT_UNROLL_ALL
hls_FLAT_UNROLL_ALL:  
	$(MAKE) -j1 hls_dut_FLAT_UNROLL_ALL

cynthvlg_FLAT_UNROLL_ALL: elab_FLAT_UNROLL_ALL
elab_FLAT_UNROLL_ALL:  
	$(MAKE) -j1 elab_dut_FLAT_UNROLL_ALL

cynthvlg_FLAT_UNROLL_ALL: optim_FLAT_UNROLL_ALL
optim_FLAT_UNROLL_ALL:  
	$(MAKE) -j1 optim_dut_FLAT_UNROLL_ALL

cynthvlg_FLAT_UNROLL_ALL: sched_FLAT_UNROLL_ALL
sched_FLAT_UNROLL_ALL:  
	$(MAKE) -j1 sched_dut_FLAT_UNROLL_ALL

view_FLAT_UNROLL_ALL:
	@echo "ERROR: Schematic viewing target 'view_FLAT_UNROLL_ALL' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."


clean_FLAT_UNROLL_ALL:
	@rm -f $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/stratus_hls.bdr


cynth_DPO_REGION:  cynth_dut_DPO_REGION
hlsc_DPO_REGION:  
	$(MAKE) -j1 hlsc_dut_DPO_REGION

cynthvlg_DPO_REGION: hls_DPO_REGION
hls_DPO_REGION:  
	$(MAKE) -j1 hls_dut_DPO_REGION

cynthvlg_DPO_REGION: elab_DPO_REGION
elab_DPO_REGION:  
	$(MAKE) -j1 elab_dut_DPO_REGION

cynthvlg_DPO_REGION: optim_DPO_REGION
optim_DPO_REGION:  
	$(MAKE) -j1 optim_dut_DPO_REGION

cynthvlg_DPO_REGION: sched_DPO_REGION
sched_DPO_REGION:  
	$(MAKE) -j1 sched_dut_DPO_REGION

view_DPO_REGION:
	@echo "ERROR: Schematic viewing target 'view_DPO_REGION' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."


clean_DPO_REGION:
	@rm -f $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/DPO_REGION/stratus_hls.bdr


cynth_BASIC:  cynth_dut_BASIC
hlsc_BASIC:  
	$(MAKE) -j1 hlsc_dut_BASIC

cynthvlg_BASIC: hls_BASIC
hls_BASIC:  
	$(MAKE) -j1 hls_dut_BASIC

cynthvlg_BASIC: elab_BASIC
elab_BASIC:  
	$(MAKE) -j1 elab_dut_BASIC

cynthvlg_BASIC: optim_BASIC
optim_BASIC:  
	$(MAKE) -j1 optim_dut_BASIC

cynthvlg_BASIC: sched_BASIC
sched_BASIC:  
	$(MAKE) -j1 sched_dut_BASIC

view_BASIC:
	@echo "ERROR: Schematic viewing target 'view_BASIC' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."


clean_BASIC:
	@rm -f $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/BASIC/stratus_hls.bdr


cynth_FLAT_UNROLL_ALL_FAST:  cynth_dut_FLAT_UNROLL_ALL_FAST
hlsc_FLAT_UNROLL_ALL_FAST:  
	$(MAKE) -j1 hlsc_dut_FLAT_UNROLL_ALL_FAST

cynthvlg_FLAT_UNROLL_ALL_FAST: hls_FLAT_UNROLL_ALL_FAST
hls_FLAT_UNROLL_ALL_FAST:  
	$(MAKE) -j1 hls_dut_FLAT_UNROLL_ALL_FAST

cynthvlg_FLAT_UNROLL_ALL_FAST: elab_FLAT_UNROLL_ALL_FAST
elab_FLAT_UNROLL_ALL_FAST:  
	$(MAKE) -j1 elab_dut_FLAT_UNROLL_ALL_FAST

cynthvlg_FLAT_UNROLL_ALL_FAST: optim_FLAT_UNROLL_ALL_FAST
optim_FLAT_UNROLL_ALL_FAST:  
	$(MAKE) -j1 optim_dut_FLAT_UNROLL_ALL_FAST

cynthvlg_FLAT_UNROLL_ALL_FAST: sched_FLAT_UNROLL_ALL_FAST
sched_FLAT_UNROLL_ALL_FAST:  
	$(MAKE) -j1 sched_dut_FLAT_UNROLL_ALL_FAST

view_FLAT_UNROLL_ALL_FAST:
	@echo "ERROR: Schematic viewing target 'view_FLAT_UNROLL_ALL_FAST' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."


clean_FLAT_UNROLL_ALL_FAST:
	@rm -f $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/stratus_hls.bdr



##############################################################################
#   start of rules for logic synthesis
##############################################################################

synth1target:
	@echo "NOTE 02926: BEGIN EXTERNAL TOOL PROCESSING"
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@if [ ! -d $(BDW_LS_CONFIG_DIR) ]; then mkdir -p $(BDW_LS_CONFIG_DIR); fi
	@rm -rf $(BDW_LS_CONFIG_LOGS)
	@$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_synthinfo.tcl
ifeq ($(BDW_USE_GRID_INT),1)
	@date +"INFO: %D %T ${@} in `pwd` BDW_LS_LIC='${BDW_LS_LIC}' BDW_LS_CMD='${BDW_LS_CMD}' STARTED"
ifeq ($(BDW_LS_LIC),)
	@echo "****** Error: synth1target FAILED because BDW_LS_LIC was not set"; exit 1
endif
endif
	@$(BDW_EXEC_CMD) bdw_exec -jobproject project.tcl -job ls.$(BDW_LS_CONFIG).s $(BDW_LS_CMD)
ifeq ($(BDW_USE_GRID_INT),1)
	@date +"INFO: %D %T ${@} in `pwd` BDW_LS_LIC='${BDW_LS_LIC}' BDW_LS_CMD='${BDW_LS_CMD}' FINISHED"
endif


#
#   Rules for logicSynth config L_BASIC
#

ifeq ($(CWBExec_ls),1)
ls_L_BASIC: $(BDW_WORKLIB)/logicsynth/L_BASIC/dut_gates.v
else
.PHONY: ls_L_BASIC

ls_L_BASIC:
	@bdw_exec -jobproject project.tcl -job ls.L_BASIC $(BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND) $(MAKE) CWBExec_ls=1 ls_L_BASIC

ls_sub_L_BASIC:
	@bdw_exec -jobproject project.tcl -job ls_sub.L_BASIC.s $(BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND) $(MAKE) CWBExec_ls=1 ls_L_BASIC
endif

kill_ls_L_BASIC:
	@bdw_kill -job ls.L_BASIC
	@bdw_kill -job ls.L_BASIC.s

clean_ls_L_BASIC:
	@rm -rf $(BDW_WORKLIB)/logicsynth/L_BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/ls.L_BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/ls.L_BASIC.s

$(BDW_WORKLIB)/logicsynth/L_BASIC/dut_gates.v: $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_dut_BASIC 
	@$(MAKE) synth1target BDW_LS_CONFIG=L_BASIC BDW_MODULE=dut

view_ls_L_BASIC: 
	@echo "ERROR: Schematic viewing target 'view_ls_L_BASIC' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#   Rules for logicSynth config L_DPA
#

ifeq ($(CWBExec_ls),1)
ls_L_DPA: $(BDW_WORKLIB)/logicsynth/L_DPA/dut_gates.v
else
.PHONY: ls_L_DPA

ls_L_DPA:
	@bdw_exec -jobproject project.tcl -job ls.L_DPA $(BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND) $(MAKE) CWBExec_ls=1 ls_L_DPA

ls_sub_L_DPA:
	@bdw_exec -jobproject project.tcl -job ls_sub.L_DPA.s $(BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND) $(MAKE) CWBExec_ls=1 ls_L_DPA
endif

kill_ls_L_DPA:
	@bdw_kill -job ls.L_DPA
	@bdw_kill -job ls.L_DPA.s

clean_ls_L_DPA:
	@rm -rf $(BDW_WORKLIB)/logicsynth/L_DPA
	@rm -rf $(BDW_WORKLIB)/jobs/ls.L_DPA
	@rm -rf $(BDW_WORKLIB)/jobs/ls.L_DPA.s

$(BDW_WORKLIB)/logicsynth/L_DPA/dut_gates.v: $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_dut_DPA 
	@$(MAKE) synth1target BDW_LS_CONFIG=L_DPA BDW_MODULE=dut

view_ls_L_DPA: 
	@echo "ERROR: Schematic viewing target 'view_ls_L_DPA' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#   Rules for logicSynth config L_NODPO
#

ifeq ($(CWBExec_ls),1)
ls_L_NODPO: $(BDW_WORKLIB)/logicsynth/L_NODPO/dut_gates.v
else
.PHONY: ls_L_NODPO

ls_L_NODPO:
	@bdw_exec -jobproject project.tcl -job ls.L_NODPO $(BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND) $(MAKE) CWBExec_ls=1 ls_L_NODPO

ls_sub_L_NODPO:
	@bdw_exec -jobproject project.tcl -job ls_sub.L_NODPO.s $(BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND) $(MAKE) CWBExec_ls=1 ls_L_NODPO
endif

kill_ls_L_NODPO:
	@bdw_kill -job ls.L_NODPO
	@bdw_kill -job ls.L_NODPO.s

clean_ls_L_NODPO:
	@rm -rf $(BDW_WORKLIB)/logicsynth/L_NODPO
	@rm -rf $(BDW_WORKLIB)/jobs/ls.L_NODPO
	@rm -rf $(BDW_WORKLIB)/jobs/ls.L_NODPO.s

$(BDW_WORKLIB)/logicsynth/L_NODPO/dut_gates.v: $(BDW_WORKLIB)/modules/dut/NODPO/dut_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_dut_NODPO 
	@$(MAKE) synth1target BDW_LS_CONFIG=L_NODPO BDW_MODULE=dut

view_ls_L_NODPO: 
	@echo "ERROR: Schematic viewing target 'view_ls_L_NODPO' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#   Rules for logicSynth config L_DPO_AUTO_OP
#

ifeq ($(CWBExec_ls),1)
ls_L_DPO_AUTO_OP: $(BDW_WORKLIB)/logicsynth/L_DPO_AUTO_OP/dut_gates.v
else
.PHONY: ls_L_DPO_AUTO_OP

ls_L_DPO_AUTO_OP:
	@bdw_exec -jobproject project.tcl -job ls.L_DPO_AUTO_OP $(BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND) $(MAKE) CWBExec_ls=1 ls_L_DPO_AUTO_OP

ls_sub_L_DPO_AUTO_OP:
	@bdw_exec -jobproject project.tcl -job ls_sub.L_DPO_AUTO_OP.s $(BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND) $(MAKE) CWBExec_ls=1 ls_L_DPO_AUTO_OP
endif

kill_ls_L_DPO_AUTO_OP:
	@bdw_kill -job ls.L_DPO_AUTO_OP
	@bdw_kill -job ls.L_DPO_AUTO_OP.s

clean_ls_L_DPO_AUTO_OP:
	@rm -rf $(BDW_WORKLIB)/logicsynth/L_DPO_AUTO_OP
	@rm -rf $(BDW_WORKLIB)/jobs/ls.L_DPO_AUTO_OP
	@rm -rf $(BDW_WORKLIB)/jobs/ls.L_DPO_AUTO_OP.s

$(BDW_WORKLIB)/logicsynth/L_DPO_AUTO_OP/dut_gates.v: $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_dut_DPO_AUTO_OP 
	@$(MAKE) synth1target BDW_LS_CONFIG=L_DPO_AUTO_OP BDW_MODULE=dut

view_ls_L_DPO_AUTO_OP: 
	@echo "ERROR: Schematic viewing target 'view_ls_L_DPO_AUTO_OP' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#   Rules for logicSynth config L_DPO_AUTO_EXPR
#

ifeq ($(CWBExec_ls),1)
ls_L_DPO_AUTO_EXPR: $(BDW_WORKLIB)/logicsynth/L_DPO_AUTO_EXPR/dut_gates.v
else
.PHONY: ls_L_DPO_AUTO_EXPR

ls_L_DPO_AUTO_EXPR:
	@bdw_exec -jobproject project.tcl -job ls.L_DPO_AUTO_EXPR $(BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND) $(MAKE) CWBExec_ls=1 ls_L_DPO_AUTO_EXPR

ls_sub_L_DPO_AUTO_EXPR:
	@bdw_exec -jobproject project.tcl -job ls_sub.L_DPO_AUTO_EXPR.s $(BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND) $(MAKE) CWBExec_ls=1 ls_L_DPO_AUTO_EXPR
endif

kill_ls_L_DPO_AUTO_EXPR:
	@bdw_kill -job ls.L_DPO_AUTO_EXPR
	@bdw_kill -job ls.L_DPO_AUTO_EXPR.s

clean_ls_L_DPO_AUTO_EXPR:
	@rm -rf $(BDW_WORKLIB)/logicsynth/L_DPO_AUTO_EXPR
	@rm -rf $(BDW_WORKLIB)/jobs/ls.L_DPO_AUTO_EXPR
	@rm -rf $(BDW_WORKLIB)/jobs/ls.L_DPO_AUTO_EXPR.s

$(BDW_WORKLIB)/logicsynth/L_DPO_AUTO_EXPR/dut_gates.v: $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_dut_DPO_AUTO_EXPR 
	@$(MAKE) synth1target BDW_LS_CONFIG=L_DPO_AUTO_EXPR BDW_MODULE=dut

view_ls_L_DPO_AUTO_EXPR: 
	@echo "ERROR: Schematic viewing target 'view_ls_L_DPO_AUTO_EXPR' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#   Rules for logicSynth config L_DPO_REGION
#

ifeq ($(CWBExec_ls),1)
ls_L_DPO_REGION: $(BDW_WORKLIB)/logicsynth/L_DPO_REGION/dut_gates.v
else
.PHONY: ls_L_DPO_REGION

ls_L_DPO_REGION:
	@bdw_exec -jobproject project.tcl -job ls.L_DPO_REGION $(BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND) $(MAKE) CWBExec_ls=1 ls_L_DPO_REGION

ls_sub_L_DPO_REGION:
	@bdw_exec -jobproject project.tcl -job ls_sub.L_DPO_REGION.s $(BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND) $(MAKE) CWBExec_ls=1 ls_L_DPO_REGION
endif

kill_ls_L_DPO_REGION:
	@bdw_kill -job ls.L_DPO_REGION
	@bdw_kill -job ls.L_DPO_REGION.s

clean_ls_L_DPO_REGION:
	@rm -rf $(BDW_WORKLIB)/logicsynth/L_DPO_REGION
	@rm -rf $(BDW_WORKLIB)/jobs/ls.L_DPO_REGION
	@rm -rf $(BDW_WORKLIB)/jobs/ls.L_DPO_REGION.s

$(BDW_WORKLIB)/logicsynth/L_DPO_REGION/dut_gates.v: $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_dut_DPO_REGION 
	@$(MAKE) synth1target BDW_LS_CONFIG=L_DPO_REGION BDW_MODULE=dut

view_ls_L_DPO_REGION: 
	@echo "ERROR: Schematic viewing target 'view_ls_L_DPO_REGION' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#   Rules for logicSynth config L_FLAT_UNROLL_ALL_FAST
#

ifeq ($(CWBExec_ls),1)
ls_L_FLAT_UNROLL_ALL_FAST: $(BDW_WORKLIB)/logicsynth/L_FLAT_UNROLL_ALL_FAST/dut_gates.v
else
.PHONY: ls_L_FLAT_UNROLL_ALL_FAST

ls_L_FLAT_UNROLL_ALL_FAST:
	@bdw_exec -jobproject project.tcl -job ls.L_FLAT_UNROLL_ALL_FAST $(BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND) $(MAKE) CWBExec_ls=1 ls_L_FLAT_UNROLL_ALL_FAST

ls_sub_L_FLAT_UNROLL_ALL_FAST:
	@bdw_exec -jobproject project.tcl -job ls_sub.L_FLAT_UNROLL_ALL_FAST.s $(BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND) $(MAKE) CWBExec_ls=1 ls_L_FLAT_UNROLL_ALL_FAST
endif

kill_ls_L_FLAT_UNROLL_ALL_FAST:
	@bdw_kill -job ls.L_FLAT_UNROLL_ALL_FAST
	@bdw_kill -job ls.L_FLAT_UNROLL_ALL_FAST.s

clean_ls_L_FLAT_UNROLL_ALL_FAST:
	@rm -rf $(BDW_WORKLIB)/logicsynth/L_FLAT_UNROLL_ALL_FAST
	@rm -rf $(BDW_WORKLIB)/jobs/ls.L_FLAT_UNROLL_ALL_FAST
	@rm -rf $(BDW_WORKLIB)/jobs/ls.L_FLAT_UNROLL_ALL_FAST.s

$(BDW_WORKLIB)/logicsynth/L_FLAT_UNROLL_ALL_FAST/dut_gates.v: $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_dut_FLAT_UNROLL_ALL_FAST 
	@$(MAKE) synth1target BDW_LS_CONFIG=L_FLAT_UNROLL_ALL_FAST BDW_MODULE=dut

view_ls_L_FLAT_UNROLL_ALL_FAST: 
	@echo "ERROR: Schematic viewing target 'view_ls_L_FLAT_UNROLL_ALL_FAST' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#   Rules for logicSynth config L_FLAT_UNROLL_ALL
#

ifeq ($(CWBExec_ls),1)
ls_L_FLAT_UNROLL_ALL: $(BDW_WORKLIB)/logicsynth/L_FLAT_UNROLL_ALL/dut_gates.v
else
.PHONY: ls_L_FLAT_UNROLL_ALL

ls_L_FLAT_UNROLL_ALL:
	@bdw_exec -jobproject project.tcl -job ls.L_FLAT_UNROLL_ALL $(BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND) $(MAKE) CWBExec_ls=1 ls_L_FLAT_UNROLL_ALL

ls_sub_L_FLAT_UNROLL_ALL:
	@bdw_exec -jobproject project.tcl -job ls_sub.L_FLAT_UNROLL_ALL.s $(BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND) $(MAKE) CWBExec_ls=1 ls_L_FLAT_UNROLL_ALL
endif

kill_ls_L_FLAT_UNROLL_ALL:
	@bdw_kill -job ls.L_FLAT_UNROLL_ALL
	@bdw_kill -job ls.L_FLAT_UNROLL_ALL.s

clean_ls_L_FLAT_UNROLL_ALL:
	@rm -rf $(BDW_WORKLIB)/logicsynth/L_FLAT_UNROLL_ALL
	@rm -rf $(BDW_WORKLIB)/jobs/ls.L_FLAT_UNROLL_ALL
	@rm -rf $(BDW_WORKLIB)/jobs/ls.L_FLAT_UNROLL_ALL.s

$(BDW_WORKLIB)/logicsynth/L_FLAT_UNROLL_ALL/dut_gates.v: $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_dut_FLAT_UNROLL_ALL 
	@$(MAKE) synth1target BDW_LS_CONFIG=L_FLAT_UNROLL_ALL BDW_MODULE=dut

view_ls_L_FLAT_UNROLL_ALL: 
	@echo "ERROR: Schematic viewing target 'view_ls_L_FLAT_UNROLL_ALL' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

#
#   Rules for logicSynth config L_PIPELINE
#

ifeq ($(CWBExec_ls),1)
ls_L_PIPELINE: $(BDW_WORKLIB)/logicsynth/L_PIPELINE/dut_gates.v
else
.PHONY: ls_L_PIPELINE

ls_L_PIPELINE:
	@bdw_exec -jobproject project.tcl -job ls.L_PIPELINE $(BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND) $(MAKE) CWBExec_ls=1 ls_L_PIPELINE

ls_sub_L_PIPELINE:
	@bdw_exec -jobproject project.tcl -job ls_sub.L_PIPELINE.s $(BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND) $(MAKE) CWBExec_ls=1 ls_L_PIPELINE
endif

kill_ls_L_PIPELINE:
	@bdw_kill -job ls.L_PIPELINE
	@bdw_kill -job ls.L_PIPELINE.s

clean_ls_L_PIPELINE:
	@rm -rf $(BDW_WORKLIB)/logicsynth/L_PIPELINE
	@rm -rf $(BDW_WORKLIB)/jobs/ls.L_PIPELINE
	@rm -rf $(BDW_WORKLIB)/jobs/ls.L_PIPELINE.s

$(BDW_WORKLIB)/logicsynth/L_PIPELINE/dut_gates.v: $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_dut_PIPELINE 
	@$(MAKE) synth1target BDW_LS_CONFIG=L_PIPELINE BDW_MODULE=dut

view_ls_L_PIPELINE: 
	@echo "ERROR: Schematic viewing target 'view_ls_L_PIPELINE' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

##############################################################################
#   start of rules for code analysis
##############################################################################

analysis1target:
	@echo "NOTE 02926: BEGIN EXTERNAL TOOL PROCESSING"
	@if [ ! -d $(BDW_ANALYSIS_CONFIG_DIR) ]; then mkdir -p $(BDW_ANALYSIS_CONFIG_DIR); fi
	@rm -rf $(BDW_ANALYSIS_CONFIG_LOGS)
	@$(BDW_EXEC_CMD) bdw_exec -jobproject project.tcl -job analysis.$(BDW_ANALYSIS_CONFIG).s $(BDW_ANALYSIS_CMD) -project project.tcl -aconfig $(BDW_ANALYSIS_CONFIG) 2>&1 | tee $(BDW_ANALYSIS_CONFIG_DIR)/$(BDW_ANALYSIS_CONFIG).log

##############################################################################
#   start of rules for place and route
##############################################################################

pnr1target:
	@echo "NOTE 02926: BEGIN EXTERNAL TOOL PROCESSING"
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@if [ ! -d $(BDW_PNR_CONFIG_DIR) ]; then mkdir -p $(BDW_PNR_CONFIG_DIR); fi
	@rm -rf $(BDW_PNR_LOGS)
	@$(BDW_EXEC_CMD) bdw_exec -jobproject project.tcl -job pnr.$(BDW_PNR_CONFIG).s $(BDW_PNR_CMD) project.tcl $(BDW_PNR_CONFIG) 



#############################################################################
#  Rules for equivalence checking
#############################################################################
    

#############################################################################
#  Rules for Power estimation
#############################################################################
    

#
#   Rules for power config P_BASIC
#
ifeq ($(CWBExec_pwr),1)
power_P_BASIC:
	@$(MAKE) build_BASIC_V 
	@$(MAKE) $(BDW_WORKLIB)/sims/BASIC_V/verilog.vcd  
	@if [ ! -d $(BDW_WORKLIB)/power/P_BASIC ]; then mkdir -p $(BDW_WORKLIB)/power/P_BASIC; fi
	@rm -f $(BDW_WORKLIB)/power/P_BASIC/dut.rep $(BDW_WORKLIB)/power/P_BASIC/dut.log $(BDW_WORKLIB)/power/P_BASIC/dut.bdr
	@$(BDW_EXEC_CMD) bdw_exec -jobproject project.tcl -job power.P_BASIC.s  $(BDW_LAUNCH_POWER_COMMAND) bdw_runsjoules $(BDW_WORKLIB)/power/P_BASIC/dut.info project.tcl P_BASIC 2>&1 | tee $(BDW_WORKLIB)/power/P_BASIC/dut.log 

else
.PHONY: power_P_BASIC

power_P_BASIC:
	@bdw_exec -jobproject project.tcl -job power.P_BASIC $(MAKE) CWBExec_pwr=1 power_P_BASIC
endif

kill_power_P_BASIC:
	@bdw_kill -job power.P_BASIC
	@bdw_kill -job power.P_BASIC.s



$(BDW_WORKLIB)/sims/BASIC_V/verilog.vcd: $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.v 
	$(MAKE) sim_BASIC_V
    

clean_power_P_BASIC:
	@rm -rf $(BDW_WORKLIB)/power/P_BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/power.P_BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/power.P_BASIC.s



#
#   Rules for power config P_DPA
#
ifeq ($(CWBExec_pwr),1)
power_P_DPA:
	@$(MAKE) build_DPA_V 
	@$(MAKE) $(BDW_WORKLIB)/sims/DPA_V/verilog.vcd  
	@if [ ! -d $(BDW_WORKLIB)/power/P_DPA ]; then mkdir -p $(BDW_WORKLIB)/power/P_DPA; fi
	@rm -f $(BDW_WORKLIB)/power/P_DPA/dut.rep $(BDW_WORKLIB)/power/P_DPA/dut.log $(BDW_WORKLIB)/power/P_DPA/dut.bdr
	@$(BDW_EXEC_CMD) bdw_exec -jobproject project.tcl -job power.P_DPA.s  $(BDW_LAUNCH_POWER_COMMAND) bdw_runsjoules $(BDW_WORKLIB)/power/P_DPA/dut.info project.tcl P_DPA 2>&1 | tee $(BDW_WORKLIB)/power/P_DPA/dut.log 

else
.PHONY: power_P_DPA

power_P_DPA:
	@bdw_exec -jobproject project.tcl -job power.P_DPA $(MAKE) CWBExec_pwr=1 power_P_DPA
endif

kill_power_P_DPA:
	@bdw_kill -job power.P_DPA
	@bdw_kill -job power.P_DPA.s



$(BDW_WORKLIB)/sims/DPA_V/verilog.vcd: $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.v 
	$(MAKE) sim_DPA_V
    

clean_power_P_DPA:
	@rm -rf $(BDW_WORKLIB)/power/P_DPA
	@rm -rf $(BDW_WORKLIB)/jobs/power.P_DPA
	@rm -rf $(BDW_WORKLIB)/jobs/power.P_DPA.s



#
#   Rules for power config P_NODPO
#
ifeq ($(CWBExec_pwr),1)
power_P_NODPO:
	@$(MAKE) build_NODPO_V 
	@$(MAKE) $(BDW_WORKLIB)/sims/NODPO_V/verilog.vcd  
	@if [ ! -d $(BDW_WORKLIB)/power/P_NODPO ]; then mkdir -p $(BDW_WORKLIB)/power/P_NODPO; fi
	@rm -f $(BDW_WORKLIB)/power/P_NODPO/dut.rep $(BDW_WORKLIB)/power/P_NODPO/dut.log $(BDW_WORKLIB)/power/P_NODPO/dut.bdr
	@$(BDW_EXEC_CMD) bdw_exec -jobproject project.tcl -job power.P_NODPO.s  $(BDW_LAUNCH_POWER_COMMAND) bdw_runsjoules $(BDW_WORKLIB)/power/P_NODPO/dut.info project.tcl P_NODPO 2>&1 | tee $(BDW_WORKLIB)/power/P_NODPO/dut.log 

else
.PHONY: power_P_NODPO

power_P_NODPO:
	@bdw_exec -jobproject project.tcl -job power.P_NODPO $(MAKE) CWBExec_pwr=1 power_P_NODPO
endif

kill_power_P_NODPO:
	@bdw_kill -job power.P_NODPO
	@bdw_kill -job power.P_NODPO.s



$(BDW_WORKLIB)/sims/NODPO_V/verilog.vcd: $(BDW_WORKLIB)/modules/dut/NODPO/dut_rtl.v 
	$(MAKE) sim_NODPO_V
    

clean_power_P_NODPO:
	@rm -rf $(BDW_WORKLIB)/power/P_NODPO
	@rm -rf $(BDW_WORKLIB)/jobs/power.P_NODPO
	@rm -rf $(BDW_WORKLIB)/jobs/power.P_NODPO.s



#
#   Rules for power config P_DPO_AUTO_OP
#
ifeq ($(CWBExec_pwr),1)
power_P_DPO_AUTO_OP:
	@$(MAKE) build_DPO_AUTO_OP_V 
	@$(MAKE) $(BDW_WORKLIB)/sims/DPO_AUTO_OP_V/verilog.vcd  
	@if [ ! -d $(BDW_WORKLIB)/power/P_DPO_AUTO_OP ]; then mkdir -p $(BDW_WORKLIB)/power/P_DPO_AUTO_OP; fi
	@rm -f $(BDW_WORKLIB)/power/P_DPO_AUTO_OP/dut.rep $(BDW_WORKLIB)/power/P_DPO_AUTO_OP/dut.log $(BDW_WORKLIB)/power/P_DPO_AUTO_OP/dut.bdr
	@$(BDW_EXEC_CMD) bdw_exec -jobproject project.tcl -job power.P_DPO_AUTO_OP.s  $(BDW_LAUNCH_POWER_COMMAND) bdw_runsjoules $(BDW_WORKLIB)/power/P_DPO_AUTO_OP/dut.info project.tcl P_DPO_AUTO_OP 2>&1 | tee $(BDW_WORKLIB)/power/P_DPO_AUTO_OP/dut.log 

else
.PHONY: power_P_DPO_AUTO_OP

power_P_DPO_AUTO_OP:
	@bdw_exec -jobproject project.tcl -job power.P_DPO_AUTO_OP $(MAKE) CWBExec_pwr=1 power_P_DPO_AUTO_OP
endif

kill_power_P_DPO_AUTO_OP:
	@bdw_kill -job power.P_DPO_AUTO_OP
	@bdw_kill -job power.P_DPO_AUTO_OP.s



$(BDW_WORKLIB)/sims/DPO_AUTO_OP_V/verilog.vcd: $(BDW_WORKLIB)/modules/dut/DPO_AUTO_OP/dut_rtl.v 
	$(MAKE) sim_DPO_AUTO_OP_V
    

clean_power_P_DPO_AUTO_OP:
	@rm -rf $(BDW_WORKLIB)/power/P_DPO_AUTO_OP
	@rm -rf $(BDW_WORKLIB)/jobs/power.P_DPO_AUTO_OP
	@rm -rf $(BDW_WORKLIB)/jobs/power.P_DPO_AUTO_OP.s



#
#   Rules for power config P_DPO_AUTO_EXPR
#
ifeq ($(CWBExec_pwr),1)
power_P_DPO_AUTO_EXPR:
	@$(MAKE) build_DPO_AUTO_EXPR_V 
	@$(MAKE) $(BDW_WORKLIB)/sims/DPO_AUTO_EXPR_V/verilog.vcd  
	@if [ ! -d $(BDW_WORKLIB)/power/P_DPO_AUTO_EXPR ]; then mkdir -p $(BDW_WORKLIB)/power/P_DPO_AUTO_EXPR; fi
	@rm -f $(BDW_WORKLIB)/power/P_DPO_AUTO_EXPR/dut.rep $(BDW_WORKLIB)/power/P_DPO_AUTO_EXPR/dut.log $(BDW_WORKLIB)/power/P_DPO_AUTO_EXPR/dut.bdr
	@$(BDW_EXEC_CMD) bdw_exec -jobproject project.tcl -job power.P_DPO_AUTO_EXPR.s  $(BDW_LAUNCH_POWER_COMMAND) bdw_runsjoules $(BDW_WORKLIB)/power/P_DPO_AUTO_EXPR/dut.info project.tcl P_DPO_AUTO_EXPR 2>&1 | tee $(BDW_WORKLIB)/power/P_DPO_AUTO_EXPR/dut.log 

else
.PHONY: power_P_DPO_AUTO_EXPR

power_P_DPO_AUTO_EXPR:
	@bdw_exec -jobproject project.tcl -job power.P_DPO_AUTO_EXPR $(MAKE) CWBExec_pwr=1 power_P_DPO_AUTO_EXPR
endif

kill_power_P_DPO_AUTO_EXPR:
	@bdw_kill -job power.P_DPO_AUTO_EXPR
	@bdw_kill -job power.P_DPO_AUTO_EXPR.s



$(BDW_WORKLIB)/sims/DPO_AUTO_EXPR_V/verilog.vcd: $(BDW_WORKLIB)/modules/dut/DPO_AUTO_EXPR/dut_rtl.v 
	$(MAKE) sim_DPO_AUTO_EXPR_V
    

clean_power_P_DPO_AUTO_EXPR:
	@rm -rf $(BDW_WORKLIB)/power/P_DPO_AUTO_EXPR
	@rm -rf $(BDW_WORKLIB)/jobs/power.P_DPO_AUTO_EXPR
	@rm -rf $(BDW_WORKLIB)/jobs/power.P_DPO_AUTO_EXPR.s



#
#   Rules for power config P_DPO_REGION
#
ifeq ($(CWBExec_pwr),1)
power_P_DPO_REGION:
	@$(MAKE) build_DPO_REGION_V 
	@$(MAKE) $(BDW_WORKLIB)/sims/DPO_REGION_V/verilog.vcd  
	@if [ ! -d $(BDW_WORKLIB)/power/P_DPO_REGION ]; then mkdir -p $(BDW_WORKLIB)/power/P_DPO_REGION; fi
	@rm -f $(BDW_WORKLIB)/power/P_DPO_REGION/dut.rep $(BDW_WORKLIB)/power/P_DPO_REGION/dut.log $(BDW_WORKLIB)/power/P_DPO_REGION/dut.bdr
	@$(BDW_EXEC_CMD) bdw_exec -jobproject project.tcl -job power.P_DPO_REGION.s  $(BDW_LAUNCH_POWER_COMMAND) bdw_runsjoules $(BDW_WORKLIB)/power/P_DPO_REGION/dut.info project.tcl P_DPO_REGION 2>&1 | tee $(BDW_WORKLIB)/power/P_DPO_REGION/dut.log 

else
.PHONY: power_P_DPO_REGION

power_P_DPO_REGION:
	@bdw_exec -jobproject project.tcl -job power.P_DPO_REGION $(MAKE) CWBExec_pwr=1 power_P_DPO_REGION
endif

kill_power_P_DPO_REGION:
	@bdw_kill -job power.P_DPO_REGION
	@bdw_kill -job power.P_DPO_REGION.s



$(BDW_WORKLIB)/sims/DPO_REGION_V/verilog.vcd: $(BDW_WORKLIB)/modules/dut/DPO_REGION/dut_rtl.v 
	$(MAKE) sim_DPO_REGION_V
    

clean_power_P_DPO_REGION:
	@rm -rf $(BDW_WORKLIB)/power/P_DPO_REGION
	@rm -rf $(BDW_WORKLIB)/jobs/power.P_DPO_REGION
	@rm -rf $(BDW_WORKLIB)/jobs/power.P_DPO_REGION.s



#
#   Rules for power config P_FLAT_UNROLL_ALL_FAST
#
ifeq ($(CWBExec_pwr),1)
power_P_FLAT_UNROLL_ALL_FAST:
	@$(MAKE) build_FLAT_UNROLL_ALL_FAST_V 
	@$(MAKE) $(BDW_WORKLIB)/sims/FLAT_UNROLL_ALL_FAST_V/verilog.vcd  
	@if [ ! -d $(BDW_WORKLIB)/power/P_FLAT_UNROLL_ALL_FAST ]; then mkdir -p $(BDW_WORKLIB)/power/P_FLAT_UNROLL_ALL_FAST; fi
	@rm -f $(BDW_WORKLIB)/power/P_FLAT_UNROLL_ALL_FAST/dut.rep $(BDW_WORKLIB)/power/P_FLAT_UNROLL_ALL_FAST/dut.log $(BDW_WORKLIB)/power/P_FLAT_UNROLL_ALL_FAST/dut.bdr
	@$(BDW_EXEC_CMD) bdw_exec -jobproject project.tcl -job power.P_FLAT_UNROLL_ALL_FAST.s  $(BDW_LAUNCH_POWER_COMMAND) bdw_runsjoules $(BDW_WORKLIB)/power/P_FLAT_UNROLL_ALL_FAST/dut.info project.tcl P_FLAT_UNROLL_ALL_FAST 2>&1 | tee $(BDW_WORKLIB)/power/P_FLAT_UNROLL_ALL_FAST/dut.log 

else
.PHONY: power_P_FLAT_UNROLL_ALL_FAST

power_P_FLAT_UNROLL_ALL_FAST:
	@bdw_exec -jobproject project.tcl -job power.P_FLAT_UNROLL_ALL_FAST $(MAKE) CWBExec_pwr=1 power_P_FLAT_UNROLL_ALL_FAST
endif

kill_power_P_FLAT_UNROLL_ALL_FAST:
	@bdw_kill -job power.P_FLAT_UNROLL_ALL_FAST
	@bdw_kill -job power.P_FLAT_UNROLL_ALL_FAST.s



$(BDW_WORKLIB)/sims/FLAT_UNROLL_ALL_FAST_V/verilog.vcd: $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL_FAST/dut_rtl.v 
	$(MAKE) sim_FLAT_UNROLL_ALL_FAST_V
    

clean_power_P_FLAT_UNROLL_ALL_FAST:
	@rm -rf $(BDW_WORKLIB)/power/P_FLAT_UNROLL_ALL_FAST
	@rm -rf $(BDW_WORKLIB)/jobs/power.P_FLAT_UNROLL_ALL_FAST
	@rm -rf $(BDW_WORKLIB)/jobs/power.P_FLAT_UNROLL_ALL_FAST.s



#
#   Rules for power config P_FLAT_UNROLL_ALL
#
ifeq ($(CWBExec_pwr),1)
power_P_FLAT_UNROLL_ALL:
	@$(MAKE) build_FLAT_UNROLL_ALL_V 
	@$(MAKE) $(BDW_WORKLIB)/sims/FLAT_UNROLL_ALL_V/verilog.vcd  
	@if [ ! -d $(BDW_WORKLIB)/power/P_FLAT_UNROLL_ALL ]; then mkdir -p $(BDW_WORKLIB)/power/P_FLAT_UNROLL_ALL; fi
	@rm -f $(BDW_WORKLIB)/power/P_FLAT_UNROLL_ALL/dut.rep $(BDW_WORKLIB)/power/P_FLAT_UNROLL_ALL/dut.log $(BDW_WORKLIB)/power/P_FLAT_UNROLL_ALL/dut.bdr
	@$(BDW_EXEC_CMD) bdw_exec -jobproject project.tcl -job power.P_FLAT_UNROLL_ALL.s  $(BDW_LAUNCH_POWER_COMMAND) bdw_runsjoules $(BDW_WORKLIB)/power/P_FLAT_UNROLL_ALL/dut.info project.tcl P_FLAT_UNROLL_ALL 2>&1 | tee $(BDW_WORKLIB)/power/P_FLAT_UNROLL_ALL/dut.log 

else
.PHONY: power_P_FLAT_UNROLL_ALL

power_P_FLAT_UNROLL_ALL:
	@bdw_exec -jobproject project.tcl -job power.P_FLAT_UNROLL_ALL $(MAKE) CWBExec_pwr=1 power_P_FLAT_UNROLL_ALL
endif

kill_power_P_FLAT_UNROLL_ALL:
	@bdw_kill -job power.P_FLAT_UNROLL_ALL
	@bdw_kill -job power.P_FLAT_UNROLL_ALL.s



$(BDW_WORKLIB)/sims/FLAT_UNROLL_ALL_V/verilog.vcd: $(BDW_WORKLIB)/modules/dut/FLAT_UNROLL_ALL/dut_rtl.v 
	$(MAKE) sim_FLAT_UNROLL_ALL_V
    

clean_power_P_FLAT_UNROLL_ALL:
	@rm -rf $(BDW_WORKLIB)/power/P_FLAT_UNROLL_ALL
	@rm -rf $(BDW_WORKLIB)/jobs/power.P_FLAT_UNROLL_ALL
	@rm -rf $(BDW_WORKLIB)/jobs/power.P_FLAT_UNROLL_ALL.s



#
#   Rules for power config P_PIPELINE
#
ifeq ($(CWBExec_pwr),1)
power_P_PIPELINE:
	@$(MAKE) build_PIPELINE_V 
	@$(MAKE) $(BDW_WORKLIB)/sims/PIPELINE_V/verilog.vcd  
	@if [ ! -d $(BDW_WORKLIB)/power/P_PIPELINE ]; then mkdir -p $(BDW_WORKLIB)/power/P_PIPELINE; fi
	@rm -f $(BDW_WORKLIB)/power/P_PIPELINE/dut.rep $(BDW_WORKLIB)/power/P_PIPELINE/dut.log $(BDW_WORKLIB)/power/P_PIPELINE/dut.bdr
	@$(BDW_EXEC_CMD) bdw_exec -jobproject project.tcl -job power.P_PIPELINE.s  $(BDW_LAUNCH_POWER_COMMAND) bdw_runsjoules $(BDW_WORKLIB)/power/P_PIPELINE/dut.info project.tcl P_PIPELINE 2>&1 | tee $(BDW_WORKLIB)/power/P_PIPELINE/dut.log 

else
.PHONY: power_P_PIPELINE

power_P_PIPELINE:
	@bdw_exec -jobproject project.tcl -job power.P_PIPELINE $(MAKE) CWBExec_pwr=1 power_P_PIPELINE
endif

kill_power_P_PIPELINE:
	@bdw_kill -job power.P_PIPELINE
	@bdw_kill -job power.P_PIPELINE.s



$(BDW_WORKLIB)/sims/PIPELINE_V/verilog.vcd: $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.v 
	$(MAKE) sim_PIPELINE_V
    

clean_power_P_PIPELINE:
	@rm -rf $(BDW_WORKLIB)/power/P_PIPELINE
	@rm -rf $(BDW_WORKLIB)/jobs/power.P_PIPELINE
	@rm -rf $(BDW_WORKLIB)/jobs/power.P_PIPELINE.s




.INTERMEDIATE : $(BDW_LIBPREP) 

.PHONY : siminfo

siminfo :
	$(BDW_SIMCONFIG_MKDIR)
	@if [ ! -d $(BDW_WORKLIB)/INCA_libs ] ; then \
	    mkdir -p $(BDW_WORKLIB)/INCA_libs/bdw_worklib ; \
	fi	
	@echo "DEFINE bdw_worklib INCA_libs/bdw_worklib" > $(BDW_WORKLIB)/cds.lib
	@echo "DEFINE WORK bdw_worklib" > $(BDW_WORKLIB)/hdl.var
	$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_siminfo.tcl project.tcl $(BDW_SIM_CONFIG)


######################################################################
## Rules for building executables, shared libs, and running sims.
######################################################################

BDW_LIB_DASHI = \
	$(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
	$(addprefix -I,$(addsuffix /c_parts,$(BDW_WHOLELIB_DIRS)))

BDW_SC_DEBUG_SRC = $(shell if [ -d $(SYSTEMC)/src ]; then echo "-d $(SYSTEMC)/src"; else echo ""; fi)
BDW_SIM_CONFIG_DIR	=	$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
BDW_SIMCONFIG_MKDIR	=	@if [ ! -d $(BDW_SIMDIR)/$(BDW_SIM_CONFIG) ]; then mkdir -p $(BDW_SIMDIR)/$(BDW_SIM_CONFIG); fi
BDW_SIM_ENV_SETUP	=	BDW_SIM_CONFIG_DIR=$(BDW_SIM_CONFIG_DIR)
BDW_END_OF_SIM_CMD	=	$(BDW_SIM_ENV_SETUP) make cmp_result
BDW_STRT_OF_SIM_CMD	=	@echo
ifneq ($(BDW_HUB_ARGV),)
    ifeq ($(BDW_DEBUG),1)
    BDW_VLOGSIM_ARGSINT +=  +hubSetOption+libdef=${BDW_SIMDIR}/$(BDW_SIM_CONFIG)/debug/sim_${BDW_SIM_CONFIG}.so,argv="$(shell echo $(BDW_HUB_ARGV)|sed 's/ /%/g')"
    else
    BDW_VLOGSIM_ARGSINT +=  +hubSetOption+libdef=${BDW_SIMDIR}/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG}.so,argv="$(shell echo $(BDW_HUB_ARGV)|sed 's/ /%/g')"
    endif
else
    ifeq ($(BDW_DEBUG),1)
    BDW_VLOGSIM_ARGSINT +=  +hubSetOption+libdef=${BDW_SIMDIR}/$(BDW_SIM_CONFIG)/debug/sim_${BDW_SIM_CONFIG}.so
    else
    BDW_VLOGSIM_ARGSINT +=  +hubSetOption+libdef=${BDW_SIMDIR}/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG}.so
    endif
endif
BDW_VLOGSIM_ARGSINT += +hubSetOption+bdr=$(BDW_SIM_CONFIG_DIR)/sim.bdr
ifeq ($(RUN_DEBUGGER),1)
    BDW_VLOGSIM_ARGSINT  := $(strip $(BDW_VLOGSIM_ARGSINT)),gdbgui
	BDW_PREEXEC_DEBUG = gdb &
	BDW_INLINE_DEBUG = gdb --args
endif
BDW_VLOGSIM_DEPS	=	$(COSIM_FILES) $(SIM_RTL_TARGETS) $(BDW_LIBPREP) $(BDW_ESC_LIB)

######################################################################
# Verilog RTL Code Coverage Simulation Setup
######################################################################

ifeq ($(BDW_MTI_POST_SIM_COMMANDS),)
BDW_MTI_POST_SIM_COMMANDS = 
endif

###############################################

.PHONY: run_sim

run_sim: 
	$(MAKE) $(EXECUTABLE)

scsim_$(BDW_SIM_CONFIG): $(SIM_BUILD)
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	@echo "Executing simulation: $(SIM_BUILD) $(BDW_SCSIM_ARGS) $(BDW_HUB_ARGV)"
	$(BDW_STRT_OF_SIM_CMD)
	@( $(BDW_EXEC_CMD) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(BDW_INLINE_DEBUG) $(SIM_BUILD) $(BDW_SCSIM_ARGS) $(BDW_HUB_ARGV) ; \
          simstatus=$$? ; export simstatus; \
          if [ $$simstatus -ne 0 ] ; then \
            if [ $$simstatus -gt 127 ] ; then \
                echo "ERROR: simulation exited with signal $$(($$simstatus - 128))" ; \
            else echo "WARNING: exit status = $$simstatus"; fi ; \
          fi ) 2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

#####################################################################
#####################################################################
update_hierarchy: bdw_prebuild_wrappers
	@$(STRATUS_HOME)/bin/bdw_makegen project.tcl -o Makefile.prj 


clean_sim_objs:
	@rm -rf $(SIM_OBJS) $(DEP_FILES) $(dir $(BDW_LIBREF))

bdw_sim_build: $(SIM_BUILD)
build_sim_image: bdw_prebuild_wrappers bdw_prebuild_rtl
	@$(MAKE) -j 4 bdw_sim_build

ifneq ($(BDW_TMPLNK_DIR),)
$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)$(BDW_DEBUG_DIR)/sim_$(BDW_SIM_CONFIG): $(SIM_OBJS) $(BDW_LIBPREP) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_LINK) $(BDW_EXELINKFLAG) $(BDW_DEBUG_OPT) $(BDW_EXTRA_LDFLAGS) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/$(LIBDIR_NAME) \
        -Wl,-rpath,$(SYSTEMC)/$(BDW_SYSTEMC_LIBDIR) \
        -Wl,--enable-new-dtags \
		-o $(BDW_TMPLNK_FILE) \
		$(SIM_OBJS) \
		$(BDW_EXTRA_OBJS) \
		$(BDW_EXTRA_LIBS) \
        $(BDW_ESC_LIB) \
		${BDW_CPARTS_A} \
		${BDW_HUBLIBS} $(BDW_EXTRA_LIB_FLAGS) $(BDW_COV_LIB_FLAGS)
		mv $(BDW_TMPLNK_FILE) $(SIM_BUILD)
else
$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)$(BDW_DEBUG_DIR)/sim_$(BDW_SIM_CONFIG): $(SIM_OBJS) $(BDW_LIBPREP) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_LINK) $(BDW_EXELINKFLAG) $(BDW_DEBUG_OPT) $(BDW_EXTRA_LDFLAGS) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/$(LIBDIR_NAME) \
        -Wl,-rpath,$(SYSTEMC)/$(BDW_SYSTEMC_LIBDIR) \
        -Wl,--enable-new-dtags \
		-o $(SIM_BUILD) \
		$(SIM_OBJS) \
		$(BDW_EXTRA_OBJS) \
		$(BDW_EXTRA_LIBS) \
        $(BDW_ESC_LIB) \
		${BDW_CPARTS_A} \
		${BDW_HUBLIBS} $(BDW_EXTRA_LIB_FLAGS) $(BDW_COV_LIB_FLAGS)
endif

##############################################################
## COSIM simulator rules
##############################################################

vcs: $(BDW_VLOGSIM_DEPS)
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	$(BDW_STRT_OF_SIM_CMD)
ifeq ($(BDW_SIM_RUNTIME),)
		$(BDW_EXEC_CMD) $(STRATUS_HOME)/bin/hub_vcs -debug $(BDW_FSDB_VCS_ARGS) -f $(BDW_SIM_CONFIG_DIR)/siminfo \
		-o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} \
		+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES)
else
		$(BDW_EXEC_CMD) $(STRATUS_HOME)/bin/hub_vcs -debug $(BDW_FSDB_VCS_ARGS) -f $(BDW_SIM_CONFIG_DIR)/siminfo \
		-o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} \
		+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES) \
		+vcs+finish+$(BDW_SIM_RUNTIME)000
endif
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do ]; then \
		echo "run" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do; \
		echo "quit" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do; \
	fi
	$(BDW_PREEXEC_DEBUG)
	$(BDW_EXEC_CMD)  $(BDW_EXEC_FLG) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} $(BDW_VLOGSIM_ARGS)  $(BDW_VLOGSIM_ARGSINT) \
        -ucli \
	    -i $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

vcsi: $(BDW_VLOGSIM_DEPS)
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	$(BDW_STRT_OF_SIM_CMD)
ifeq ($(BDW_SIM_RUNTIME),)
		$(BDW_EXEC_CMD) $(STRATUS_HOME)/bin/hub_vcsi -debug $(BDW_FSDB_VCS_ARGS) -f $(BDW_SIM_CONFIG_DIR)/siminfo -o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} \
	    +libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES)
else
		$(BDW_EXEC_CMD) $(STRATUS_HOME)/bin/hub_vcsi -debug $(BDW_FSDB_VCS_ARGS) -f $(BDW_SIM_CONFIG_DIR)/siminfo -o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} \
	    +libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES) \
		+vcs+finish+$(BDW_SIM_RUNTIME)000
endif
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do ]; then \
		echo "run" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do; \
		echo "quit" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do; \
	fi
	$(BDW_PREEXEC_DEBUG)
	$(BDW_EXEC_CMD)  $(BDW_EXEC_FLG) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} $(BDW_VLOGSIM_ARGS)  $(BDW_VLOGSIM_ARGSINT) \
        -ucli \
	    -l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
	    -i $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

incisive_covsetup:


xcelium incisive ncverilog: $(BDW_VLOGSIM_DEPS) incisive_covsetup
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	@bdw_incisive_info -cxx11_abi_compat
	$(BDW_SIMCONFIG_MKDIR)
	$(BDW_STRT_OF_SIM_CMD)
	$(BDW_PREEXEC_DEBUG)
ifeq ($(BDW_SIM_RUNTIME),)
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do ]; then \
		echo "" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
		echo "run" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
		echo "quit" >>  $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
	fi
	$(BDW_EXEC_CMD)  $(BDW_EXEC_FLG) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(STRATUS_HOME)/bin/hub_ncverilog \
		-f $(BDW_SIM_CONFIG_DIR)/siminfo \
+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES) \
		+nowarn+LIBNOU $(BDW_VLOGSIM_ARGS) $(BDW_VLOGSIM_ARGSINT) \
		-l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
else
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do ]; then \
		echo "" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
		echo "run $(BDW_SIM_RUNTIME) ns" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
		echo "quit" >>  $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
	fi
	$(BDW_EXEC_CMD)  $(BDW_EXEC_FLG) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(STRATUS_HOME)/bin/hub_ncverilog \
		-f $(BDW_SIM_CONFIG_DIR)/siminfo \
+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES) \
		$(BDW_VLOGSIM_ARGS) $(BDW_VLOGSIM_ARGSINT) -l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
endif
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log


export MTI_VCO_MODE = 64

mti: $(BDW_VLOGSIM_DEPS)
ifneq ($(PASSED_LOG),)
	@echo removing log.passed in mti:
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	$(BDW_STRT_OF_SIM_CMD)
	@if [ ! -d $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/work ]; then vlib $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/work; fi
	$(STRATUS_HOME)/bin/hub_vlog -work $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/work \
		-f $(BDW_SIM_CONFIG_DIR)/siminfo \
		+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES)
	$(BDW_PREEXEC_DEBUG)
ifeq ($(BDW_SIM_RUNTIME),)
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do ];  then echo "onbreak resume" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do ; echo "run -all" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; echo "$(BDW_MTI_POST_SIM_COMMANDS)" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; echo "quit" >>  $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; fi
else
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do ]; then  echo "onbreak resume" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do ; echo "run $(BDW_SIM_RUNTIME) ns" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; echo "$(BDW_MTI_POST_SIM_COMMANDS)" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; echo "quit" >>  $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; fi
endif
	$(BDW_EXEC_CMD) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	hub_vsimvlog -c -lib $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/work top $(BDW_VLOG_TOP_MODS)\
		$(BDW_VLOGSIM_ARGS)  $(BDW_VLOGSIM_ARGSINT) -do $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do \
		-l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log


BDW_NCSC_64BIT = -64bit

ifneq ($(BDW_HUB_ARGV),)
BDW_NCSIM_ARGV = +systemc_args+"$(BDW_HUB_ARGV)" +BDW_VLOG_PLUSARGS+"$(BDW_HUB_ARGV)"
else
BDW_NCSIM_ARGV =
endif

ifeq ($(RUN_DEBUGGER), 1)
BDW_NCSIM_DEBUG = -layout cdebug
BDW_NCVLG_DEBUG = -layout cdebug -linedebug
else
BDW_NCSIM_DEBUG =
BDW_NCVLG_DEBUG =
endif

ncsc: incisive_covsetup
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	@bdw_incisive_info -cxx11_abi_compat
	$(BDW_SIMCONFIG_MKDIR)
	$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_siminfo.tcl -gen_ncsim_cmd project.tcl $(BDW_SIM_CONFIG)
ifneq ($(RUN_DEBUGGER),1)
	@echo "run" >>$(BDW_SIM_CONFIG_DIR)/ncsim_cmd.tcl
	@echo "exit" >>$(BDW_SIM_CONFIG_DIR)/ncsim_cmd.tcl
endif
ifneq ($(VLOG_COSIM_TOP), )
	$(BDW_STRT_OF_SIM_CMD)
	$(BDW_EXEC_CMD) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	hub_ncsim \
	-work $(BDW_SIM_CONFIG) -reflib worklib $(BDW_LIBREF_ARGS) \
	-messages $(BDW_NCSC_64BIT) $(BDW_NCVLG_DEBUG) \
	$(BDW_NCSC_GCCVER) \
	-CFLAGS "-Wl,-rpath,$(STRATUS_HOME)/tools.lnx86/stratus/lib/64bit" \
	$(SIM_OBJS) \
	$(BDW_EXTRA_OBJS) \
	$(BDW_EXTRA_LIBS) \
	$(BDW_ESC_LIB) \
	$(BDW_CPARTS_A) \
	$(BDW_NCSC_FSDBLIBS) \
	$(BDW_EXTRA_LDFLAGS) \
	$(BDW_EXTRA_LIB_FLAGS) \
	$(BDW_COV_LIB_FLAGS) \
	+loadpli1=$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME)/ncvlog_ssl:ssl_bootstrap \
	-file $(BDW_SIM_CONFIG_DIR)/siminfo \
	$(BDW_VLOGCOMP_ARGS) \
	$(BDW_XRUN_ELAB) \
	$(BDW_VLOGSIM_ARGS) \
	$(BDW_VLOGSIM_ARGSINT) \
	$(BDW_VLOG_DEFINES) \
	$(BDW_INCISIVE_FRONTEND) \
	$(BDW_NCSC_INPUT_FILE) \
	$(BDW_SC_TOP) $(BDW_VLOG_TOP_MODS) $(BDW_NCSIM_ARGV) \
	$(BDW_VERILOG_TESTBENCH) \
	2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

else
	$(BDW_STRT_OF_SIM_CMD)
	$(BDW_EXEC_CMD) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	hub_ncsim \
	-work $(BDW_SIM_CONFIG) -reflib worklib $(BDW_LIBREF_ARGS) \
	-messages $(BDW_NCSC_64BIT) \
	$(BDW_NCSC_GCCVER) \
	$(BDW_VLOGSIM_ARGS) $(BDW_NCSIM_DEBUG) \
	-CFLAGS "-Wl,-rpath,$(STRATUS_HOME)/tools.lnx86/stratus/lib/64bit" \
	$(BDW_XRUN_FLAGS) \
	$(SIM_OBJS) \
	$(BDW_EXTRA_OBJS) \
	$(BDW_EXTRA_LIBS) \
	$(BDW_ESC_LIB) \
	$(BDW_CPARTS_A) \
	$(BDW_NCSC_FSDBLIBS) \
	$(BDW_EXTRA_LDFLAGS) \
	$(BDW_EXTRA_LIB_FLAGS) \
	$(BDW_COV_LIB_FLAGS) \
	-file $(BDW_SIM_CONFIG_DIR)/siminfo \
	$(BDW_XRUN_ELAB) \
	$(BDW_INCISIVE_FRONTEND) \
	$(BDW_VLOG_DEFINES) \
	$(BDW_NCSC_INPUT_FILE) \
	$(BDW_SC_TOP) $(BDW_VLOG_TOP_MODS) $(BDW_NCSIM_ARGV) \
	$(BDW_VERILOG_TESTBENCH) \
	2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

endif
ifneq ($(BDW_XRUN_ELAB),-elaborate)
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
endif



##############################################################
## Rule to build the COSIM shared library
##############################################################
ifeq ($(BDW_DEBUG),1)
BDW_SHARED_LIB = $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/debug/sim_$(BDW_SIM_CONFIG).so
else
BDW_SHARED_LIB = $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG).so
endif

ifneq ($(BDW_TMPLNK_DIR),)
$(BDW_SHARED_LIB): $(SIM_OBJS) $(BDW_LIBPREP) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB) 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_LINK) ${BDW_SHLIBFLAG} $(BDW_EXTRA_LDFLAGS) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/$(LIBDIR_NAME) \
        -Wl,-rpath,$(SYSTEMC)/$(BDW_SYSTEMC_LIBDIR) \
        -Wl,--enable-new-dtags \
		-o $(BDW_TMPLNK_FILE)  \
		$(SIM_OBJS) \
		$(BDW_EXTRA_OBJS) \
		$(BDW_EXTRA_LIBS) \
        $(BDW_ESC_LIB) \
		$(BDW_CPARTS_A) \
		$(BDW_HUBLIBS) $(BDW_EXTRA_LIB_FLAGS) $(BDW_COV_LIB_FLAGS) \
		-lm -lcrypt -ldl \
		${BDW_LINKOUTFILTER}
		mv $(BDW_TMPLNK_FILE) $(BDW_SHARED_LIB)

else
$(BDW_SHARED_LIB): $(SIM_OBJS) $(BDW_LIBPREP) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB) 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_LINK) ${BDW_SHLIBFLAG} $(BDW_EXTRA_LDFLAGS) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/$(LIBDIR_NAME) \
        -Wl,-rpath,$(SYSTEMC)/$(BDW_SYSTEMC_LIBDIR) \
        -Wl,--enable-new-dtags \
		-o $(BDW_SHARED_LIB) \
		$(SIM_OBJS) \
		$(BDW_EXTRA_OBJS) \
		$(BDW_EXTRA_LIBS) \
        $(BDW_ESC_LIB) \
		$(BDW_CPARTS_A) \
		$(BDW_HUBLIBS) $(BDW_EXTRA_LIB_FLAGS) $(BDW_COV_LIB_FLAGS) \
		-lm -lcrypt -ldl \
		${BDW_LINKOUTFILTER}

endif


##############################################################
## Rule to build verilator trace and coverage support  module
##############################################################

$(BDW_WORKLIB)/objs/esc_catrace.o: $(STRATUS_HOME)/share/stratus/source/esc_catrace.cc
	$(BDW_CC)  -o $@ $(BDW_CCFLAGS) $(BDW_VERILATOR_CCFLAGS)  $<



##############################################################
## Start the stratus_ide GUI
##############################################################
workbench ide:
	$(BDW_LAUNCH_IDE_COMMAND) $(BDW_STRATUS_IDE_COMMAND) project.tcl

##############################################################
## Generate a Visual C++ project file
##############################################################
vcproj: $(BDW_ALL_WRAPPERS)
	$(STRATUS_HOME)/bin/bdw_vcprojgen project.tcl

##############################################################
## Rule to build the synthesis report
##############################################################

html_warn:
	@echo "##############################################" ; \
	echo " The HTML reports have been deprecated. " ; \
	echo " Reporting information is available in stratus_ide." ; \
	echo "" ; \
	echo -n " Do you want to generate deprecated HTML reports (y or n) [n] ? " ; \
	read resp ; \
	case $$resp in \
	y*) $(MAKE) html ;; \
	*) echo ""; echo "HTML Reports not generated." ;  \
	esac
 
html:   html_dut_BASIC html_dut_DPA html_dut_NODPO html_dut_DPO_AUTO_OP html_dut_DPO_AUTO_EXPR html_dut_DPO_REGION html_dut_FLAT_UNROLL_ALL_FAST html_dut_FLAT_UNROLL_ALL html_dut_PIPELINE html_summary

html_summary: project.tcl
	$(STRATUS_HOME)/bin/bdw_htmlgen -project project.tcl -summary




##############################################################
## Rules to build generated library contents
##############################################################

